/****** MAPTYPE.H ************** Belenkov O.V.   ****** 03/04/12 ***
******* MAPTYPE.H ************** Kruzhkov A.E.   ****** 11/04/11 ***
******* MAPTYPE.H ************** Panteleeva N.A  ****** 23/01/12 ***
******* MAPTYPE.H ************** Dishlenko S.G.  ****** 26/03/12 ***
******* MAPTYPE.H ************** Alexeev    S.A. ****** 06/05/11 ***
******* MAPTYPE.H ************** Shabakov D.A.   ****** 27/06/11 ***
******* MAPTYPE.H ************** Gorbunov A.V.   ****** 17/04/12 ***
******* MAPTYPE.H ************** Tarakanova I.R. ****** 19/05/11 ***
******* MAPTYPE.H ************** Derevyagina Zh.A.***** 29/06/10 ***
******* MAPTYPE.H ************** Borzov A.U.     ****** 31/08/11 ***
******* MAPTYPE.H ************** Nefedieva O.A.  ****** 13/01/12 ***
******* MAPTYPE.H ************** öÅÌÅÚÎÑËÏ× ÷.A. ****** 07/02/12 ***
*                                                                  *
*              Copyright (c) PANORAMA Group 1991-2012              *
*                      All Rights Reserved                         *
*                                                                  *
********************************************************************
*                                                                  *
*               ïğéóáîéå âáúï÷ùè ôéğï÷ ğåòåíåîîùè                  *
*                                                                  *
*******************************************************************/

#ifndef MAPTYPE_H
#define MAPTYPE_H

#ifndef MAPMACRO_H
 #include "mapmacro.h"
#endif

#ifndef MAPERR_RH
  #include "maperr.rh"
#endif

#if defined(LINUXAPI) && defined(BUILD_DLL64)           // 26/03/12
#pragma pack(push,1)
#endif

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ïâ'ñ÷ìåîéå éäåîôéæéëáôïòï÷
// (ñ÷ìñàôóñ õëáúáôåìñíé îá óïïô÷åôóô÷õàıéå ëìáóóù ó++ )
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#if defined(_M_X64) || defined(BUILD_DLL64)       // 20/07/09

typedef __int64   HMAP;    // éäåîôéæéëáôïò ïôëòùôïê ÷åëôïòîïê ëáòôù
                           // (õëáúáôåìø îá TMapAccess)
typedef __int64   HSITE;   // éäåîôéæéëáôïò ïôëòùôïê ğïìøúï÷áôåìøóëïê
                           // ëáòôù (õëáúáôåìø îá üìåíåîô ãåğïşëé)
                           // åóìé òá÷åî HMAP (éìé 0) - òáâïôáåí ó
                           // ëáòôïê íåóôîïóôé (æïîï÷ïê ëáòôïê)
typedef __int64   HOBJ;    // éäåîôéæéëáôïò ïâ'åëôá ëáòôù
                           // (õëáúáôåìø îá TObjectInfo)
typedef __int64   HSELECT; // éäåîôéæéëáôïò ëïîôåëóôá ğïéóëá
                           // (õëáúáôåìø îá TMapSelect)
typedef __int64   HRSC;    // éäåîôéæéëáôïò ëìáóóéæéëáôïòá ëáòôù
                           // (õëáúáôåìø îá TMapRsc)
typedef __int64   HMTR3D;  // éäåîôéæéëáôïò ïôëòùôïçï óåáîóá
                           // ôòåèíåòîïê ÷éúõáìéúáãéé íåóôîïóôé
                           // (õëáúáôåìø îá TMtr3D)
typedef __int64   HCROSS;  // (õëáúáôåìø îá TObjectCut)
typedef __int64   HPOINT;  // (õëáúáôåìø îá ÓÔÒÕËÔÕÒÕ CROSSPOINT)
typedef __int64   HDRAW;   // (õëáúáôåìø îá ÓÔÒÕËÔÕÒÕ TDrawEdit)
typedef __int64   HPRINTER;// (õëáúáôåìø îá TPrinter)
typedef __int64   HVECT;   // (õëáúáôåìø îá TVectorImageEdit)       // 29/07/03

// éîôåòæåêó PANTASK/PANACTION
typedef __int64  HPANACTION;   // õëáúáôåìø îá TPanAction
typedef __int64  HMAPACTION;   // õëáúáôåìø îá TUserAction

typedef __int64  HPANTASK;     // õëáúáôåìø îá TPanTask
typedef __int64  HMAPTASK;     // õëáúáôåìø îá TUserTask

typedef __int64  HMAPDOC;      // õëáúáôåìø îá TMapWindow

typedef __int64  HOBJSET;      // õëáúáôåìø îá TObjectSet

typedef __int64  HFORMULA;     // õëáúáôåìø îá TStrFormula          // 17/01/07

typedef __int64  HPARAM;       // ğáòáíåôò æõîëãéé ïâòáâïôëé óïâùôéñ

#else

typedef long int  HMAP;    // éäåîôéæéëáôïò ïôëòùôïê ÷åëôïòîïê ëáòôù
                           // (õëáúáôåìø îá TMapAccess)
typedef long int  HSITE;   // éäåîôéæéëáôïò ïôëòùôïê ğïìøúï÷áôåìøóëïê
                           // ëáòôù (õëáúáôåìø îá üìåíåîô ãåğïşëé)
                           // åóìé òá÷åî HMAP (éìé 0) - òáâïôáåí ó
                           // ëáòôïê íåóôîïóôé (æïîï÷ïê ëáòôïê)
typedef long int  HOBJ;    // éäåîôéæéëáôïò ïâ'åëôá ëáòôù
                           // (õëáúáôåìø îá TObjectInfo)
typedef long int  HSELECT; // éäåîôéæéëáôïò ëïîôåëóôá ğïéóëá
                           // (õëáúáôåìø îá TMapSelect)
typedef long int  HRSC;    // éäåîôéæéëáôïò ëìáóóéæéëáôïòá ëáòôù
                           // (õëáúáôåìø îá TMapRsc)
typedef long int  HMTR3D;  // éäåîôéæéëáôïò ïôëòùôïçï óåáîóá
                           // ôòåèíåòîïê ÷éúõáìéúáãéé íåóôîïóôé
                           // (õëáúáôåìø îá TMtr3D)
typedef long int  HCROSS;  // (õëáúáôåìø îá TObjectCut)
typedef long int  HPOINT;  // (õëáúáôåìø îá ÓÔÒÕËÔÕÒÕ CROSSPOINT)
typedef long int  HDRAW;   // (õëáúáôåìø îá ÓÔÒÕËÔÕÒÕ TDrawEdit)
typedef long int  HPRINTER;// (õëáúáôåìø îá TPrinter)
typedef long int  HVECT;   // (õëáúáôåìø îá TVectorImageEdit)       // 29/07/03

// éîôåòæåêó PANTASK/PANACTION
typedef long int HPANACTION;   // õëáúáôåìø îá TPanAction
typedef long int HMAPACTION;   // õëáúáôåìø îá TUserAction

typedef long int HPANTASK;     // õëáúáôåìø îá TPanTask
typedef long int HMAPTASK;     // õëáúáôåìø îá TUserTask

typedef long int HMAPDOC;      // õëáúáôåìø îá TMapWindow

typedef long int HOBJSET;      // õëáúáôåìø îá TObjectSet

typedef long int HFORMULA;     // õëáúáôåìø îá TStrFormula          // 17/01/07

typedef long int HPARAM;       // ğáòáíåôò æõîëãéé ïâòáâïôëé óïâùôéñ
#endif

typedef long int HIMAGE;       // éäåîôéæéëáôïò TCopyImage

typedef void * HMAPREG;        // éäåîôéæéëáôïò óğéóëá ğáòáíåôòï÷ óéóôåí ïôóşåôá

typedef HANDLE HWMS;           // éäåîôéæéëáôïò WMS-óåò÷éóá

enum KIND                 // ÷éäù æïòíáôï÷ íåôòéëé
{
  IDSHORT2  = 0x7FFF7FFF, // Ä×ÕÈÂÁÊÔÏ×ÁÑ ÃÅÌÏŞÉÓÌÅÎÎÁÑ
  IDLONG2   = 0x7FFE7FFE, // ŞÅÔÙÒÅÈÂÁÊÔÏ×ÁÑ ÃÅÌÏŞÉÓÌÅÎÎÁÑ
  IDFLOAT2  = 0x7FFD7FFD, // Ó ĞÌÁ×ÁÀİÅÊ ÚÁĞÑÔÏÊ
  IDDOUBLE2 = 0x7FFC7FFC, // Ó ĞÌÁ×ÁÀİÅÊ ÚÁĞÑÔÏÊ Ä×ÏÊÎÏÊ ÔÏŞÎÏÓÔØÀ
  IDSHORT3  = 0x7FFB7FFB, // Ä×ÕÈÂÁÊÔÏ×ÁÑ ÃÅÌÏŞÉÓÌÅÎÎÁÑ ÔÒÅÈÍÅÒÎÁÑ
  IDLONG3   = 0x7FFA7FFA, // ŞÅÔÙÒÅÈÂÁÊÔÏ×ÁÑ ÃÅÌÏŞÉÓÌÅÎÎÁÑ ÔÒÅÈÍÅÒÎÁÑ
  IDFLOAT3  = 0x7FF97FF9, // Ó ĞÌÁ×ÁÀİÅÊ ÚÁĞÑÔÏÊ ÔÒÅÈÍÅÒÎÁÑ
  IDDOUBLE3 = 0x7FF87FF8, // Ó ĞÌÁ×ÁÀİÅÊ ÚÁĞÑÔÏÊ Ä×ÏÊÎÏÊ ÔÏŞÎÏÓÔØÀ ÔÒÅÈÍÅÒÎÁÑ
  IDBAD     = 0x7FF87FF7  // ÎÅÉÚ×ÅÓÔÎÙÊ ×ÉÄ
};


#if defined(__BORLANDC__)              // 24/12/09
#ifndef max
 #define max(a,b)            (((a) > (b)) ? (a) : (b))
#endif
#ifndef min
 #define min(a,b)            (((a) < (b)) ? (a) : (b))
#endif
#endif

#define LT left
#define RT right
#define UP top
#define DN bottom

// ôÏŞÎÏÓÔØ ÏÂÒÁÂÏÔËÉ ËÏÏÒÄÉÎÁÔ ĞÒÉ ×ÉÚÕÁÌÉÚÁÃÉÉ

#define DELTANULL  ((double)(1e-3))    // 23/03/00

// ôÏŞÎÏÓÔØ ÏÂÒÁÂÏÔËÉ ËÏÏÒÄÉÎÁÔ ĞÒÉ ×ÙĞÏÌÎÅÎÉÉ ÒÁÓŞÅÔÏ×

#define DOUBLENULL  ((double)(1e-6))   // 26/04/00

// æÕÎËÃÉÑ ÏËÒÕÇÌÅÎÉÑ                  // 06/06/00

#define ROUND(x)    (((x) < 0) ? (int)((x) - 0.5) : (int)((x) + 0.5))

// şÉÓÌÏ ÇÒÁÄÕÓÏ× × 1 ÒÁÄÉÁÎÅ
#define DEGREEINRAD  57.29577951308232l

// şÉÓÌÏ ÓÅËÕÎÄ × 1 ÒÁÄÉÁÎÅ
#define SECONDINRAD  206264.806247096l


typedef struct SHORTPOINT    // ëïïòäéîáôù ôïşëé
{
  unsigned short int X;
  unsigned short int Y;
}
  SHORTPOINT;

typedef struct LONGPOINT     // ëïïòäéîáôù ôïşëé (äìéîîáñ íåôòéëá)
{
  union { int X; int x; };               // 26/03/12
  union { int Y; int y; };
}
  LONGPOINT;

typedef struct FLOATPOINT    // ëïïòäéîáôù ôïşëé (ğìá÷áàıáñ íåôòéëá)
{
  float X;
  float Y;
}
  FLOATPOINT;

typedef struct DOUBLEPOINT   // ëïïòäéîáôù ôïşëé (ğìá÷áàıáñ íåôòéëá)
{
  union { double X; double x; };
  union { double Y; double y; };

  void operator  = (double value)  {         x  = value;   y  = value;  }
   int operator != (double value)  { return (x != value || y != value); }
   int operator == (double value)  { return (x == value && y == value); }
}
  DOUBLEPOINT;


typedef struct DRAWPOINT     // áÎÁÌÏÇ TPoint
{
#ifndef WINCE
  union { XYTYPE x; XYTYPE X; };           // 13/09/00
  union { XYTYPE y; XYTYPE Y; };
#else
  union { long int x; long int X; };
  union { long int y; long int Y; };
#endif

  void operator  = (int value)  {         x  = value;   y  = value;  }
   int operator != (int value)  { return (x != value || y != value); }
   int operator == (int value)  { return (x == value && y == value); }

  DRAWPOINT& operator - (DRAWPOINT& draw)
    { x -= draw.x;  y -= draw.y;  return *this;}

  DRAWPOINT& operator + (DRAWPOINT& draw)
    { x += draw.x;  y += draw.y;  return *this;}
}
  DRAWPOINT;


typedef struct DRAWSIZE      // áÎÁÌÏÇ TSize
{
  union { int cx; int CX; };
  union { int cy; int CY; };

  void operator  = (int value)  {         cx  = value;   cy  = value;  }
  int operator != (int value)  { return (cx != value || cy != value); }
  int operator == (int value)  { return (cx == value && cy == value); }

  DRAWSIZE& operator - (DRAWSIZE& draw)
    { cx -= draw.cx;  cy -= draw.cy;  return *this;}

  DRAWSIZE& operator + (DRAWSIZE& draw)
    { cx += draw.cx;  cy += draw.cy;  return *this;}
}
  DRAWSIZE;


typedef struct DRAWLINE      // ëÏÏÒÄÉÎÁÔÙ ÌÉÎÉÉ
{
  DRAWPOINT First;
  DRAWPOINT Second;
}
  DRAWLINE;


//-----------------------------------------------------------------
// ëïïòäéîáôù ğòñíïõçïìøîéëá ÷ òáêïîå òáâïô
// (X ××ÅÒÈ, Y ×ĞÒÁ×Ï, ÇÒÁÎÉÃÙ ×ËÌÀŞÁÀÔÓÑ)
//-----------------------------------------------------------------

typedef struct FRAME         // ãåìùå
{
  int X1;                                                   // 26/03/12
  int Y1;
  int X2;
  int Y2;

  void operator = (int value)
  {
    X1 = value;  Y1 = value;
    X2 = value;  Y2 = value;
  }

  FRAME operator = (FRAME frame)
  {
    X1 = frame.X1;  Y1 = frame.Y1;
    X2 = frame.X2;  Y2 = frame.Y2;  return *this;
  }

  int operator != (int value)
  {
    return ( X1 != value || Y1 != value ||
             X2 != value || Y2 != value );
  }

  int operator == (int value)
  {
    return ( X1 == value && Y1 == value &&
             X2 == value && Y2 == value);
  }
}
  FRAME;


typedef struct DFRAME        // ğìá÷áàıéå
{
  double X1;
  double Y1;
  double X2;
  double Y2;

  void operator = (double value)
  {
    X1 = value;  Y1 = value;
    X2 = value;  Y2 = value;
  }
}
  DFRAME;


//-----------------------------------------------------------------
// ëïïòäéîáôù ğòñíïõçïìøîéëá ÷ ïëîå
// (X ×ĞÒÁ×Ï, Y ×ÎÉÚ, ÇÒÁÎÉÃÙ ×ËÌÀŞÁÀÔÓÑ)
//-----------------------------------------------------------------

typedef struct BOX           // ãåìùå
{
  union { int LT;  int lt; };                 // 26/03/12
  union { int UP;  int up; };
  union { int RT;  int rt; };
  union { int DN;  int dn; };

  void operator = (int value)
  {
    LT = value;  UP = value;
    RT = value;  DN = value;
  }
}
  BOX;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++  óôòõëôõòá úáäáîéñ íåôòéëé ïâ'åëôá  +++++++++
//++++++++++++++  ÷ óéóôåíå ëïïòäéîáô ïëîá  +++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

#define PF_TESTTEXT      1  // æÌÁÇ ×ÙÂÏÒËÉ ĞÏÄĞÉÓÉ × ÔÏŞËÅ
#define PF_SKIPNUMBER    2  // æÌÁÇ ĞÒÏĞÕÓËÁ ÔÅËÓÔÁ Ó #          // 20/02/07
#define PF_UNICODETEXT   4  // æÌÁÇ ÔÅËÓÔÁ × UNICODE             // 02/06/07
#define PF_SKIPSEMCOLOR  8  // æÌÁÇ ĞÒÏĞÕÓËÁ Ã×ÅÔÁ ĞÏ ÓÅÍÁÎÔÉËÅ  // 11/08/10

typedef struct _DLLCLASS POLYDATA
{
  POLYDATA() { memset(this, 0, sizeof(*this)); }

  DRAWPOINT * Points;  // áÄÒÅÓ ÍÁÓÓÉ×Á ÏÂßÅËÔÏ× ÔÉĞÁ POINT
                       // Ó ËÏÏÒÄÉÎÁÔÁÍÉ ÔÏŞÅË
  int * PolyCounts;   // áÄÒÅÓ ÍÁÓÓÉ×Á ËÏÌÉŞÅÓÔ×Á ÔÏŞÅË                  // 26/03/12
  int        Count;   // şÉÓÌÏ ÌÏÍÁÎÙÈ (ÍÎÏÇÏÕÇÏÌØÎÉËÏ×, ÔÅËÓÔÏ×)
  char **      Text;   // õËÁÚÁÔÅÌØ ÎÁ ÍÁÓÓÉ× ÁÄÒÅÓÏ× ÔÅËÓÔÏ×
                       // ĞÏÄĞÉÓÅÊ (ÓÁÍÉ ÔÅËÓÔÙ ÌÅÖÁÔ
                       // × ĞÅÒ×ÏÎÁŞÁÌØÎÏÊ ÍÅÔÒÉËÅ ÏÂßÅËÔÁ)
  int    AlignCode;   // ëÏÄ ×ÙÒÁ×ÎÉ×ÁÎÉÑ ÄÌÑ ÏÔÏÂÒÁÖÅÎÉÑ ÔÅËÓÔÁ
  char *   Semantic;   // õËÁÚÁÔÅÌØ ÎÁ ÓÅÍÁÎÔÉËÕ ÏÂßÅËÔÁ (SEMANTIC *)
                       // åÓÌÉ ÓÅÍÁÎÔÉËÁ ÎÅ ÎÕÖÎÁ × ÉÚÏÂÒÁÖÅÎÉÉ - ÒÁ×ÎÏ 0
  BOX        Border;   // ğÒÑÍÏÕÇÏÌØÎÉË ÇÁÂÁÒÉÔÏ× ÏÂßÅËÔÁ × ĞÉËÓÅÌÁÈ
                       // ÏÔÎÏÓÉÔÅÌØÎÏ ÏÂÌÁÓÔÉ ÒÉÓÏ×ÁÎÉÑ
  double  ShowScale;   // ôÅËÕİÉÊ ÍÁÓÛÔÁÂ ÏÔÏÂÒÁÖÅÎÉÑ ÜÌÅËÔÒÏÎÎÏÊ ËÁÒÔÙ
}
  POLYDATA;

typedef struct _DLLCLASS POLYDATAEX
{
  POLYDATAEX() { memset(this, 0, sizeof(POLYDATAEX)); }

  DRAWPOINT * Points;  // áÄÒÅÓ ÍÁÓÓÉ×Á ÏÂßÅËÔÏ× ÔÉĞÁ POINT
                       // Ó ËÏÏÒÄÉÎÁÔÁÍÉ ÔÏŞÅË
  int * PolyCounts;   // áÄÒÅÓ ÍÁÓÓÉ×Á ËÏÌÉŞÅÓÔ×Á ÔÏŞÅË                 // 26/03/12
  int        Count;   // şÉÓÌÏ ÌÏÍÁÎÙÈ (ÍÎÏÇÏÕÇÏÌØÎÉËÏ×, ÔÅËÓÔÏ×)
  char **      Text;   // õËÁÚÁÔÅÌØ ÎÁ ÍÁÓÓÉ× ÁÄÒÅÓÏ× ÔÅËÓÔÏ×
                       // ĞÏÄĞÉÓÅÊ (ÓÁÍÉ ÔÅËÓÔÙ ÌÅÖÁÔ
                       // × ĞÅÒ×ÏÎÁŞÁÌØÎÏÊ ÍÅÔÒÉËÅ ÏÂßÅËÔÁ)
  short   AlignCode;   // ëÏÄ ×ÙÒÁ×ÎÉ×ÁÎÉÑ ÄÌÑ ÏÔÏÂÒÁÖÅÎÉÑ ÔÅËÓÔÁ
  short       Flags;   // æÌÁÇÉ ÏÂÒÁÂÏÔËÉ ÍÅÔÒÉËÉ - ÒÁ×ÎÏ 0            // 05/06/07
  char *   Semantic;   // õËÁÚÁÔÅÌØ ÎÁ ÓÅÍÁÎÔÉËÕ ÏÂßÅËÔÁ (SEMANTIC *)
                       // åÓÌÉ ÓÅÍÁÎÔÉËÁ ÎÅ ÎÕÖÎÁ × ÉÚÏÂÒÁÖÅÎÉÉ - ÒÁ×ÎÏ 0
  BOX        Border;   // ğÒÑÍÏÕÇÏÌØÎÉË ÇÁÂÁÒÉÔÏ× ÏÂßÅËÔÁ × ĞÉËÓÅÌÁÈ
                       // ÏÔÎÏÓÉÔÅÌØÎÏ ÏÂÌÁÓÔÉ ÒÉÓÏ×ÁÎÉÑ
  double  ShowScale;   // ôÅËÕİÉÊ ÍÁÓÛÔÁÂ ÏÔÏÂÒÁÖÅÎÉÑ ÜÌÅËÔÒÏÎÎÏÊ ËÁÒÔÙ
  HRSC       MapRsc;   // ëÌÁÓÓÉÆÉËÁÔÏÒ ËÁÒÔÙ, ÓÏÄÅÒÖÁİÅÊ ÏÔÏÂÒÁÖÁÅÍÙÊ ÏÂßÅËÔ
  float      Height;   // ÷ÙÓÏÔÁ ĞÅÒ×ÏÊ ÔÏŞËÉ ÏÂßÅËÔÁ (ÅÓÌÉ 3D-ËÏÏÒÄÉÎÁÔÙ) ÉÌÉ 0  // 04/07/06
  float      DX;       // ğÒÉÒÁİÅÎÉÅ ÏÔ ĞÅÒ×ÏÊ ÔÏŞËÉ ÄÏ ×ÔÏÒÏÊ ÎÁ ËÁÒÔÅ           // 29/08/07
  float      DY;       // × ÅÄÉÎÉÃÁÈ ËÁÒÔÙ - ÄÌÑ ÏÒÉÅÎÔÉÒÏ×ÁÎÉÑ ×ÅËÔÏÒÎÙÈ ÏÂßÅËÔÏ×
}
  POLYDATAEX;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// íÁËÓÉÍÁÌØÎÙÅ ÚÎÁŞÅÎÉÑ ÈÁÒÁËÔÅÒÉÓÔÉË ÍÅÔÒÉËÉ
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#if defined(COMPACTGIS) || defined(MINIDATA)
#define GD_POINTCOUNT  32000L  // îÁÉÂÏÌØÛÅÅ ×ÏÚÍÏÖÎÏÅ ËÏÌÉŞÅÓÔ×Ï ÔÏŞÅË
                               // ÍÅÔÒÉËÉ ÏÂßÅËÔÁ
#define GD_POLYCOUNT   16000L  // îÁÉÂÏÌØÛÅÅ ×ÏÚÍÏÖÎÏÅ ËÏÌÉŞÅÓÔ×Ï
                               // ĞÏÄÏÂßÅËÔÏ× ÍÅÔÒÉËÉ
#define GD_TEXTCOUNT   16000L  // îÁÉÂÏÌØÛÅÅ ×ÏÚÍÏÖÎÏÅ ËÏÌÉŞÅÓÔ×Ï
                               // ÔÅËÓÔÏ× × ÍÅÔÒÉËÅ ĞÏÄĞÉÓÉ

#define MAXDATALENGTH (1024*1024L) // íÁËÓÉÍÁÌØÎÁÑ ÄÌÉÎÁ ÍÅÔÒÉËÉ

#else

#define GD_POINTCOUNT 128000L  // îÁÉÂÏÌØÛÅÅ ×ÏÚÍÏÖÎÏÅ ËÏÌÉŞÅÓÔ×Ï ÔÏŞÅË
                               // ÍÅÔÒÉËÉ ÏÂßÅËÔÁ
#define GD_POLYCOUNT   64000L  // îÁÉÂÏÌØÛÅÅ ×ÏÚÍÏÖÎÏÅ ËÏÌÉŞÅÓÔ×Ï
                               // ĞÏÄÏÂßÅËÔÏ× ÍÅÔÒÉËÉ
#define GD_TEXTCOUNT   32000L  // îÁÉÂÏÌØÛÅÅ ×ÏÚÍÏÖÎÏÅ ËÏÌÉŞÅÓÔ×Ï
                               // ÔÅËÓÔÏ× × ÍÅÔÒÉËÅ ĞÏÄĞÉÓÉ

#define MAXDATALENGTH (16*1024*1024L) // íÁËÓÉÍÁÌØÎÁÑ ÄÌÉÎÁ ÍÅÔÒÉËÉ

#endif

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++ óÔÒÕËÔÕÒÙ ÆÏÒÍÁÔÏ× ĞÒÅÄÓÔÁ×ÌÅÎÉÑ ÍÅÔÒÉËÉ ÏÂßÅËÔÏ×     +++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct TEXTDATA      // ôÅËÓÔ ĞÏÄĞÉÓÉ × ÍÅÔÒÉËÅ
{                            // ïÂİÁÑ ÄÌÉÎÁ = Length + 2
  unsigned char Length;      // şÉÓÌÏ ÓÉÍ×ÏÌÏ×
           char Text[256];   // ôÅËÓÔ ĞÅÒÅÍÅÎÎÏÊ ÄÌÉÎÙ
  unsigned char Zero;        // úÁÍÙËÁÀİÉÊ ÎÏÌØ
}
  TEXTDATA;


// ÷éäù æïòíáôï÷ ïôäåìøîïê ôïşëé íåôòéëé
typedef struct
{
  unsigned short int X;
  unsigned short int Y;
}
  XYSHORT;

typedef struct
{
  unsigned short int X;
  unsigned short int Y;
           float     H;
}
  XYHSHORT;

typedef struct
{
  int X;                             // 26/03/12
  int Y;
}
  XYLONG;

typedef struct
{
  int X;
  int Y;
  float    H;
}
  XYHLONG;

typedef struct
{
  float X;
  float Y;
}
  XYFLOAT;

typedef DOUBLEPOINT XYDOUBLE;          // 12/02/10

typedef struct
{
  float X;
  float Y;
  float H;
}
  XYHFLOAT;

typedef struct
{
  double X;
  double Y;
  double H;
}
  XYHDOUBLE;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++ óÔÒÕËÔÕÒÙ ÉÎÔÅÒÆÅÊÓÁ MAPAPI +++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// éÄÅÎÔÉÆÉËÁÔÏÒÙ, ×ÏÚ×ÒÁİÁÅÍÙÅ ÆÕÎËÃÉÅÊ mapCheckFile.

enum  MAPFILES                // éäåîôéæéëáôïòù æáêìï÷ (Intel)
{
    FILE_SXF  = 0x00465853,   // ä÷ïéşîùê SXF æáêì
    FILE_TXT  = 0x4658532E,   // ôåëóôï÷ùê SXF æáêì (TXF Ó ÍÅÔËÏÊ .SXF - MAP)
    FILE_TXFMAP = 0x4658532E, // ôåëóôï÷ùê SXF æáêì (TXF Ó ÍÅÔËÏÊ .SXF - MAP)
    FILE_DIR  = 0x524944,     // ôåëóôï÷ùê DIR æáêì
    FILE_PCX  = 0x10,         // æáêì PCX (ïğòåäåìñåôóñ îå şåôëï)
    FILE_BMP  = 0x4D42,       // æáêì BMP
    FILE_TIFF = 0x4949,       // æáêì TIFF
    FILE_JPEG = 0xD8FF,       // æáêì JPEG
    FILE_MRSID= 0x6469736D,   // æáêì MrSid (SID,JPEG2000,NITF)  // 26/09/08
    FILE_MAP  = 0x00505350,   // ğáóğïòô òáêïîá òáâïô MAP
    FILE_MAPSIT = 0x00544953, // ğáóğïòô òáêïîá òáâïô SIT   // 27/10/08
    FILE_RST  = 0x00545352,   // æáêì RST
    FILE_RSW  = 0x00575352,   // æáêì RSW
    FILE_RSWTIFF = 0x54575352,//(RSWT)RSW+TIFF  // 24/05/11
    FILE_MTR  = 0x0052544D,   // æáêì MTR
    FILE_MTW  = 0x0057544D,   // æáêì MTW
    FILE_MTL  = 0x004C544D,   // æáêì MTL
    FILE_MTD  = 0x0044544D,   // æáêì MTD  28/11/07
    FILE_SIT  = 0x5449532E,   // ôåëóôï÷ùê SXF æáêì (TXF Ó ÍÅÔËÏÊ .SIT - SIT)
    FILE_TXFSIT = 0x5449532E, // ôåëóôï÷ùê SXF æáêì (TXF Ó ÍÅÔËÏÊ .SIT - SIT)
    FILE_DXF  = 0x00465844,   // æáêì DXF
    FILE_MIF  = 0x0046494D,   // æáêì MAPINFO
    FILE_S57  = 0x00003000,   // æáêì S57(ëáôáìïç)
    FILE_DGN  = 0x004E4744,   // æáêì Macrostation(DGN)   // 23/03/04
    FILE_MPT  = 0x0054504D,   // æáêì MPT(ğòïåëô)
    FILE_RSC  = 0x00435352,   // æáêì RSC
    FILE_MTQ  = 0x0051544D,   // æáêì MTQ
    FILE_PLN  = 0x004E4C50,   // æáêì PLN (Talka)    // 15/12/02
    FILE_SHP  = 0x00504853,   // æáêì SHP (ArcView)  // 23/07/03
    FILE_PLS  = 0x00534C50,   // æáêì PLS (óĞÉÓÏË ÒÁÓÔÒÏ×)          // 05/07/04
    FILE_TEXT = 0x00545854,   // æÁÊÌ TXT(ÇÅÏÄÅÚÉŞÅÓËÉÅ ĞÒÉÂÏÒÙ)    // 23/11/04
    FILE_GPS  = 0x47504724,   // æÁÊÌ GPS/NMEA ($GPG)               // 07/12/04
    FILE_GRD  = 0x00445247,   // æáêì GRD (ÍÁÔÒÉÃÙ ÆÏÒÍÁÔÁ FOTOMOD) // 10/12/04
    FILE_DBF  = 0x00464244,   // æáêì DBF (âÁÚÁ ÄÁÎÎÙÈ)             // 16/12/04
    FILE_TIN  = 0x004E4954,   // æáêì TIN                           // 31/03/05
    FILE_XLS  = 0x0000CFD0,   // æáêì EXCEL                         // 22/07/09
    FILE_WMS  = 0x00534D57,   // URL ÄÌÑ ĞÏÄËÌÀŞÅÎÉÑ Ë WMS-ÓÅÒ×ÉÓÕ  // 16/07/11


                              // éäåîôéæéëáôïòù æáêìï÷ (Sparc, Mips)

    FILE_MAP_TURN = 0x50535000, // ğáóğïòô òáêïîá òáâïô
    FILE_MTW_TURN = 0x4D545700, // æáêì MTW
    FILE_SXF_TURN = 0x53584600, // ä÷ïéşîùê SXF æáêì    //03/11/03
    FILE_DIR_TURN = 0x44495200, // ôåëóôï÷ùê DIR æáêì   //05/12/03
    FILE_RSW_TURN = 0x52535700, // æáêì RSW  // 20/01/04
    FILE_RSC_TURN = 0x52534300, // æáêì RSC
    FILE_SIT_TURN = 0x2E534954, // ôåëóôï÷ùê SXF(.SIT) æáêì // 30/06/08
    FILE_MTR_TURN = 0x4D545200, // æáêì MTR
    FILE_MTQ_TURN = 0x4D545100, // æáêì MTQ
    FILE_RST_TURN = 0x52535400, // æáêì RST
};

enum                            // éäåîôéæéëáôïòù æáêìï÷ ìéóôá ëáòôù
{
    LABEL_HDR      = 0x00524448L,  // HDR0
    LABEL_DAT      = 0x00544144L,  // DAT0
    LABEL_SEM      = 0x004D4553L,  // SEM0
    LABEL_DRW      = 0x00575244L,  // DRW0
    LABEL_VEC      = 0x00434556L,  // VEC0

    LABEL_HDR_TURN = 0x48445200L,  // 0RDH
    LABEL_DAT_TURN = 0x44415400L,  // 0TAD
    LABEL_SEM_TURN = 0x53454D00L,  // 0MES
    LABEL_DRW_TURN = 0x44525700L,  // 0WRD
    LABEL_VEC_TURN = 0x56454300L,  // 0CEV
};

// ğÒÅÆÉËÓ Ë ÉÍÅÎÉ ËÁÒÔÙ ÄÌÑ WMS
#define MAPWMS "WMS#"
#define WMSSIZE 4

// ğÒÅÆÉËÓ Ë ÉÍÅÎÉ ËÁÒÔÙ ÄÌÑ WMTS         // 07/02/12
#define MAPWMTS "WMTS#"
#define WMTSSIZE 5

typedef struct FRAME MAPFRAME;

typedef struct DFRAME MAPDFRAME;

typedef struct MAPADJACENTSECTION  // ïğéóáîéå óíåöîïçï õşáóôëá
{
  int number;                 // ÎÏÍÅÒ ÕŞÁÓÔËÁ                          // 26/03/12
  int first;                  // ĞÅÒ×ÁÑ ÔÏŞËÁ ÕŞÁÓÔËÁ
  int last;                   // ĞÏÓÌÅÄÎÑÑ ÔÏŞËÁ ÕŞÁÓÔËÁ
}
  MAPADJACENTSECTION;

typedef struct MAPADJACENTLISTEX
{
  char      ListName[32];           // ÉÍÑ ÌÉÓÔÁ
  int  List;                   // ÎÏÍÅÒ ÌÉÓÔÁ × ÒÁÊÏÎÅ                 // 26/03/12
  int  Key;                    // ÎÏÍÅÒ ÏÂßÅËÔÁ
  int  Object;                 // ĞÏÓÌÅÄÏ×ÁÔÅÌØÎÙÊ ÎÏÍÅÒ ÏÂßÅËÔÁ ÎÁ ÌÉÓÔÅ
  int  Excode;                 // ËÌÁÓÓÉÆÉËÁÃÉÏÎÎÙÊ ËÏÄ ÏÂßÅËÔÁ
  int  First;                  // ĞÅÒ×ÁÑ ÔÏŞËÁ ÕŞÁÓÔËÁ
  int  Last;                   // ĞÏÓÌÅÄÎÑÑ ÔÏŞËÁ ÕŞÁÓÔËÁ
}
  MAPADJACENTLISTEX;

typedef enum how       // ëïäù õóìï÷éê ğïéóëá ğï óåíáîôéëå
{
    CMBAD      = 0,    // ïûéâëá ÷ äáîîùè
    CMPASS     = 0,    // ïôóõôóô÷éå ëïäá óåíáîôéëé  //11/12/03
      LESS     = 1,    // íåîøûå
    CMLESS     = 1,    // íåîøûå
    CMLESSEQ   = 3,    // íåîøûå éìé òá÷îï
      EQUAL    = 2,    // òá÷îï
    CMEQUAL    = 2,    // òá÷îï
    CMNOTEQ    = 5,    // îå òá÷îï
      MORE     = 4,    // âïìøûå
    CMMORE     = 4,    // âïìøûå
    CMMOREEQ   = 6,    // âïìøûå éìé òá÷îï
    CMANY      = 7,    // ìàâïå úîáşåîéå

    // ëïäù ïâïâıáàıéè õóìï÷éê
    CMOR       = 16,   // "éìé" - èïôñ âù ïäîï ÷ùğïìîñåôóñ
    CMAND      = 32,   // "é"   - ÷óå äïìöîù ÷ùğïìîéôøóñ
}
    HOW;

// æÌÁÖËÉ, ÏĞÒÅÄÅÌÑÀİÉÅ ĞÏÒÑÄÏË ĞÏÉÓËÁ ÏÂßÅËÔÏ×
// åÓÌÉ ÕËÁÚÁÎÏ WO_INMAP - ÎÏÍÅÒ ËÁÒÔÙ ÏĞÒÅÄÅÌÑÅÔÓÑ
// ÉÚ HSELECT !

enum SEEKTYPE        // ğïòñäïë ğïéóëá ïâ'åëôï÷
{
   WO_FIRST  = 0,         // ğÅÒ×ÙÊ × ÃÅĞÏŞËÅ
   WO_LAST   = 2,         // ğÏÓÌÅÄÎÉÊ × ÃÅĞÏŞËÅ
   WO_NEXT   = 4,         // óÌÅÄÕÀİÉÊ ÚÁ ÎÁÊÄÅÎÎÙÍ ÒÁÎÅÅ
   WO_BACK   = 8,         // ğÒÅÄÙÄÕİÉÊ ÏÔ ÒÁÎÅÅ ÎÁÊÄÅÎÎÏÇÏ
   WO_CANCEL = 16,        // ÷ËÌÀŞÁÑ ÕÄÁÌÅÎÎÙÅ ÏÂßÅËÔÙ
   WO_INMAP  = 32,        // ôÏÌØËÏ ĞÏ ÏÄÎÏÊ ËÁÒÔÅ (ÓÏÏÔ×ÅÔÓÔ×ÕÀİÅÊ HSELECT)
   WO_VISUAL = 64,        // ğÏÉÓË ÔÏÌØËÏ ÓÒÅÄÉ ×ÉÄÉÍÙÈ ÏÂßÅËÔÏ×
   WO_VISUALIGNORE = 128, // ğÏÉÓË ÓÒÅÄÉ ×ÓÅÈ ÏÂßÅËÔÏ× ÂÅÚ ÕŞÅÔÁ ×ÉÄÉÍÏÓÔÉ
};

enum SEEKINAREA                // 26/04/11
{
   SO_SEEKBYDISTANCE     = 0,  // ğÏÉÓË ĞÏ ÒÁÓÓÔÏÑÎÉÀ
   SO_SEEKINSIDEANDCROSS = 1,  // ğÏÉÓË ×ÎÕÔÒÉ ÏÂÌÁÓÔÉ, ×ËÌÀŞÁÑ ĞÅÒÅÓÅŞÅÎÉÅ ÇÒÁÎÉÃÙ ÏÂÌÁÓÔÉ
   SO_SEEKINSIDEONLY     = 2,  // ğÏÉÓË ×ÎÕÔÒÉ ÏÂÌÁÓÔÉ, ÉÓËÌÀŞÁÑ ĞÅÒÅÓÅŞÅÎÉÅ ÇÒÁÎÉÃÙ
   SO_SEEKOUTSIDEONLY    = 4,  // ğÏÉÓË ×ÎÅ ÏÂÌÁÓÔÉ, ÉÓËÌÀŞÁÑ ĞÅÒÅÓÅŞÅÎÉÅ ÇÒÁÎÉÃÙ
};

enum SELECTTYPEFLAG  // óğïóïâ ÷ùäåìåîéñ ïâÿåëôï÷
{
   STF_CONTOUR = 0,  // ÷ÙÄÅÌÅÎÉÅ ËÏÎÔÕÒÏ×
   STF_OBJECT  = 1,  // ÷ÙÄÅÌÅÎÉÅ ×ÓÅÇÏ ÉÚÏÂÒÁÖÅÎÉÑ ÏÂßÅËÔÁ
};

enum SELECTLISTCODE           // ğòá÷éìï æïòíéòï÷áîéñ óğéóëá õóìï÷éê ğïéóëá
{
   SELECTLIST_EXCLUSIVE = 0,  // äÏÂÁ×ÌÑÅÍÏÅ ÕÓÌÏ×ÉÅ ÅÄÉÎÓÔ×ÅÎÎÏÅ × ÓĞÉÓËÅ
   SELECTLIST_UNION     = 1,  // õÓÌÏ×ÉÅ ÌÏÇÉŞÅÓËÉ ÓËÌÁÄÙ×ÁÅÔÓÑ Ó ÏÓÔÁÌØÎÙÍÉ
   SELECTLIST_CROSS     = 2,  // õÓÌÏ×ÉÅ ÌÏÇÉŞÅÓËÉ ÕÍÎÏÖÁÅÔÓÑ Ó ÏÓÔÁÌØÎÙÍÉ
};

enum SELECTMEASURE            // ôéğ éúíåòåîéê ïâ"åëôï÷ äìñ ğïéóëá  25/04/02
{
   MEASURE_LENGTH      = 1,   // äÌÉÎÁ (Í)
   MEASURE_SQUARE      = 2,   // ğÌÏİÁÄØ (Ë×.Í)
   MEASURE_PERIMETER   = 3,   // ğÅÒÉÍÅÔÒ (Í)
   MEASURE_HEIGHT      = 10,  // ÷ÙÓÏÔÁ (Í)
};

enum PPLACE            // ğòéíåîñåíáñ óéóôåíá ëïïòäéîáô
{
   PP_MAP      = 1,    // ëïïòäéîáôù ôïşåë ÷ óéóôåíå ëáòôù ÷ äéóëòåôáè
   PP_PICTURE  = 2,    // ëïïòäéîáôù ôïşåë ÷ óéóôåíå éúïâòáöåîéñ ÷ ğéëóåìáè
   PP_PLANE    = 3,    // ëïïòäéîáôù ôïşåë ÷ ğìïóëïê ğòñíïõçïìøîïê óéóôåíå
                       // îá íåóôîïóôé ÷ íåôòáè
   PP_GEO      = 4,    // ëïïòäéîáôù ôïşåë ÷ çåïäåúéşåóëéè ëïïòäéîáôáè
                       // ÷ òáäéáîáè
   PP_GEOWGS84 = 8,    // ëïïòäéîáôù ôïşåë ÷ çåïäåúéşåóëéè ëïïòäéîáôáè
                       // ÷ òáäéáîáè ÷ óéóôåíå WGS-84
};

enum CURRENTPOINTFORMAT  // æïòíáô ïôïâòáöåîéñ ôïşëé  // 09/06/10
{
   PLANEPOINT      = 1,  // ÷ ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ × ÔÅËÕİÉÈ ĞÁÒÁÍÅÔÒÁÈ ĞÒÏÅËÃÉÉ ("DocProjection")
                         // ÜÌÌÉĞÓÏÉÄ ëÒÁÓÏ×ÓËÏÇÏ 1942Ç. óë-42 ÉÌÉ óë-95,
                         // ÅÓÌÉ ÔÅËÕİÁÑ ËÁÒÔÁ × óë-95 
   MAPPOINT        = 2,  // ÷ ÕÓÌÏ×ÎÙÈ ÅÄÉÎÉÃÁÈ ËÁÒÔÙ (ÄÉÓËÒÅÔÁÈ)
   PICTUREPOINT    = 3,  // ÷ ĞÉËÓÅÌÁÈ ÔÅËÕİÅÇÏ ĞÏÌÎÏÇÏ ÉÚÏÂÒÁÖÅÎÉÑ

   GEORAD          = 4,  // ÷ ÒÁÄÉÁÎÁÈ
   GEOGRAD         = 5,  // ÷ ÇÒÁÄÕÓÁÈ
   GEOGRADMIN      = 6,  // ÷ ÇÒÁÄÕÓÁÈ, ÍÉÎÕÔÁÈ, ÓÅËÕÎÄÁÈ

                         // ÏÂİÅÚÅÍÎÏÊ ÜÌÌÉĞÓÏÉÄ WGS84
   GEORADWGS84     = 7,  // ÷ ÒÁÄÉÁÎÁÈ
   GEOGRADWGS84    = 8,  // ÷ ÇÒÁÄÕÓÁÈ
   GEOGRADMINWGS84 = 9,  // ÷ ÇÒÁÄÕÓÁÈ, ÍÉÎÕÔÁÈ, ÓÅËÕÎÄÁÈ

   PLANE42POINT    = 10, // ÷ ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ ĞÏ ÂÌÉÖÁÊÛÅÊ ÚÏÎÅ × óë-42

                         // ÏÂİÅÚÅÍÎÏÊ ÜÌÌÉĞÓÏÉÄ ğú-90.02 (SGS-85)
   GEORADPZ90      = 11, // ÷ ÒÁÄÉÁÎÁÈ
   GEOGRADPZ90     = 12, // ÷ ÇÒÁÄÕÓÁÈ
   GEOGRADMINPZ90  = 13, // ÷ ÇÒÁÄÕÓÁÈ, ÍÉÎÕÔÁÈ, ÓÅËÕÎÄÁÈ

   PLANEWORKSYS      = 14, // ÷ ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ × ÍÅÓÔÎÏÊ ÓÉÓÔÅÍÅ × ÓÏÏÔ×ÅÔÓÔ×ÉÉ Ó ĞÁÒÁÍÅÔÒÁÍÉ ("WorkSystem")
   GEORADWORKSYS     = 15, // ÷ ÒÁÄÉÁÎÁÈ × ÍÅÓÔÎÏÊ ÓÉÓÔÅÍÅ
   GEOGRADWORKSYS    = 16, // ÷ ÇÒÁÄÕÓÁÈ × ÍÅÓÔÎÏÊ ÓÉÓÔÅÍÅ
   GEOGRADMINWORKSYS = 17, // ÷ ÇÒÁÄÕÓÁÈ ÍÉÎÕÔÁÈ, ÓÅËÕÎÄÁÈ × ÍÅÓÔÎÏÊ ÓÉÓÔÅÍÅ

   PLANE95POINT      = 18, // ÷ ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ ĞÏ ÂÌÉÖÁÊÛÅÊ ÚÏÎÅ × óë-95          // 15/11/10

   LASTPOINTFORMAT   = 18, // ğòåäåìøîïå úîáşåîéå
};

enum VTYPE               // ôéğ ïôïâòáöåîéñ ëáòôù     // 13/09/00
{
   // üëòáîîùê ÷ù÷ïä
   VT_SCREEN          = 1, // üëòáîîùê (şåòåú DIB)
   VT_SCREENCONTOUR   = 2, // üëòáîîùê ëïîôõòîùê

   // ğòéîôåòîùê ÷åëôïòîùê ÷ù÷ïä
   VT_PRINT           = 3, // ğòéîôåòîùê ÷åëôïòîùê (şåòåú WIN API)
   VT_PRINTGLASS      = 4, // ğòéîôåòîùê âåú úáìé÷ëé ğïìéçïîï÷
   VT_PRINTCONTOUR    = 5, // ğòéîôåòîùê ëïîôõòîùê, âåú õóìï÷îùè úîáëï÷

   // ğòéîôåòîùê òáóôòéúï÷áîîùê ÷ù÷ïä
   VT_PRINTRST        = 6, // ğòéîôåòîùê òáóôòéúï÷áîîùê (şåòåú WIN API)
   VT_PRINTGLASSRST   = 7, // ğòéîôåòîùê âåú úáìé÷ëé ğïìéçïîï÷
   VT_PRINTCONTOURRST = 8, // ğòéîôåòîùê ëïîôõòîùê, âåú õóìï÷îùè úîáëï÷

   // ğòéîôåòîùê òáóôòéúï÷áîîùê (óğåãéáìøîùê) ÷ù÷ïä        // 13/02/03
   VT_PRINTRSTSQUARE  = 9, // ğòéîôåòîùê (úáìé÷ëé ğìïıáäîùè, ğïäğéóé ó æïîïí,
                           //             òáóôòù, íáôòéãù)
   VT_PRINTRSTLINE    =10, // ğòéîôåòîùê (ìéîéé, ôïşåşîùå, ÷åëôïòîùå,
                           //             ğïäğéóé ó æïîïí, ğïìøúï÷áôåìøóëéå)
   VT_PRINTRSTTEXT    =11, // ğòéîôåòîùê (ğïäğéóé, ûáâìïîù)

   // ğòéîôåòîùê ÷åëôïòîùê (óğåãéáìøîùê) ÷ù÷ïä. éóğïìøúõåôóñ äìñ üëóğïòôá
   // çòáæéëé (POSTSCRIPT, WMF, EMF)                       // 16/12/04
   VT_PRINTEX         =15, // ğòéîôåòîùê ÷åëôïòîùê (şåòåú WIN API)
};

enum OUTPUTAREA            // òåöéíù ÷ùâïòá ïâìáóôé ÷ù÷ïäá
{
  AREA_ALL            = 0, // ïÔËÒÙÔÉÅ : ÏÂÌÁÓÔØ ×Ù×ÏÄÁ - ×ÅÓØ ÒÁÊÏÎ
                           // úÁËÒÙÔÉÅ : ÏÂÌÁÓÔØ ×Ù×ÏÄÁ ÎÅ ÓÏÈÒÁÎÑÔØ

  AREA_FRAME          = 1, // ïÔËÒÙÔÉÅ : ÏÂÌÁÓÔØ ×Ù×ÏÄÁ - ÉÚ RectMetr
                           // úÁËÒÙÔÉÅ : ÏÂÌÁÓÔØ ×Ù×ÏÄÁ -> × RectMetr

  AREA_SELECT_FRAME   = 2, // ïÔËÒÙÔÉÅ : ÏÂÌÁÓÔØ ×Ù×ÏÄÁ - ÉÚ RectMetr
                           // úÁËÒÙÔÉÅ : ÄÌÑ ×ÙÂÏÒÁ ĞÒÑÍÏÕÇÏÌØÎÏÇÏ ÆÒÁÇÍÅÎÔÁ

  AREA_CHANGE_FRAME   = 3, // ïÔËÒÙÔÉÅ : ÏÂÌÁÓÔØ ×Ù×ÏÄÁ - ÉÚ RectMetr
                           // úÁËÒÙÔÉÅ : ÄÌÑ ÉÚÍÅÎÅÎÉÑ ÆÒÁÇÍÅÎÔÁ

  AREA_MOVE_FRAME     = 4, // ïÔËÒÙÔÉÅ : ÏÂÌÁÓÔØ ×Ù×ÏÄÁ - ÉÚ RectMetr
                           // úÁËÒÙÔÉÅ : ÄÌÑ ĞÅÒÅÍÅİÅÎÉÑ ÆÒÁÇÍÅÎÔÁ

  AREA_SELECT_OBJECT  = 5, // ïÔËÒÙÔÉÅ : ÏÂÌÁÓÔØ ×Ù×ÏÄÁ - ÉÚ RectMetr
                           // úÁËÒÙÔÉÅ : ÄÌÑ ×ÙÂÏÒÁ ÏÂÌÁÓÔÉ ×Ù×ÏÄÁ ĞÏ ÏÂßÅËÔÕ

  AREA_SELECT_CONTOUR = 6, // ïÔËÒÙÔÉÅ : ÏÂÌÁÓÔØ ×Ù×ÏÄÁ - ÉÚ RectMetr
                           // úÁËÒÙÔÉÅ :  ÄÌÑ ×ÙÂÏÒÁ ÏÂÌÁÓÔÉ ×Ù×ÏÄÁ ĞÏ ËÏÎÔÕÒÕ

  AREA_SELECT_TURN_FRAME = 10, // æÌÁÇ ×ÙÂÏÒÁ ĞÏ×ÅÒÎÕÔÏÇÏ ÆÒÁÇÍÅÎÔÁ
};

enum CHARCODE         // ïğéóáîéå ëïäéòï÷ëé ôåëóôï÷
{
  CC_ASCIIZ  = 0  ,   // Côòïëá óéí÷ïìï÷ (ASCIIZ), ïçòáîéşåîîáñ îõìåí
  CC_KOI8    = 125,   // Côòïëá (KOI8), ïçòáîéşåîîáñ îõìåí
  CC_ANSI    = 126,   // Côòïëá (ANSI, WINDOWS), ïçòáîéşåîîáñ îõìåí
  CC_UNICODE = 127,   // Côòïëá óéí÷ïìï÷ (UNICODE), ïçòáîéşåîîáñ îõìåí
};

enum SPLINETYPE           // ôéğù óğìáêîï÷
{
  SPLINETYPE_NONE   = 0,  // ìÏÍÁÎÁÑ ÌÉÎÉÑ
  SPLINETYPE_SMOOTH = 2,  // óÇÌÁÖÉ×ÁÀİÉÊ ÓĞÌÁÊÎ (ÓÒÅÚÁÅÔ ÕÇÌÙ)
  SPLINETYPE_POINTS = 4,  // ïÇÉÂÁÀİÉÊ ÓĞÌÁÊÎ (ĞÒÏÈÏÄÉÔ ŞÅÒÅÚ ÔÏŞËÉ)
};

enum POINTPOSITION        // òáúíåıåîéå ôïşëé ïôîïóéôåìøîï ïôòåúëá
{
  PS_FIRST   = 1,         // óÏ×ĞÁÄÁÅÔ Ó ĞÅÒ×ÏÊ ÔÏŞËÏÊ ÏÔÒÅÚËÁ
  PS_SECOND  = 2,         // óÏ×ĞÁÄÁÅÔ ÓÏ ×ÔÏÒÏÊ ÔÏŞËÏÊ ÏÔÒÅÚËÁ
  PS_BEHIND  = 3,         // ìÅÖÉÔ ĞÏÚÁÄÉ ĞÅÒ×ÏÊ ÔÏŞËÉ ÏÔÒÅÚËÁ
  PS_BEYOND  = 4,         // ìÅÖÉÔ ×ĞÅÒÅÄÉ ×ÔÏÒÏÊ ÔÏŞËÉ ÏÔÒÅÚËÁ
  PS_BETWEEN = 5,         // ìÅÖÉÔ ÎÁ ÏÔÒÅÚËÅ (ÍÅÖÄÕ ÔÏŞËÁÍÉ)
  PS_LEFT    = 6,         // óÌÅ×Á
  PS_RIGHT   = 7          // óĞÒÁ×Á
};


typedef struct GEODEGREE   // ëïïòäéîáôù ôïşëé ÷ çòáäõóáè
{
  int Degree;         // çÒÁÄÕÓÙ                                      // 26/03/12
  int Minute;         // íÉÎÕÔÙ
  float    Second;         // óÅËÕÎÄÙ
}
  GEODEGREE;

typedef struct SIGNDEGREE  // ëïïòäéîáôù ôïşëé ÷ çòáäõóáè
{
  int Degree;         // çÒÁÄÕÓÙ                                      // 26/03/12
  int Minute;         // íÉÎÕÔÙ
  float    Second;         // óÅËÕÎÄÙ
  int Sign;           // úÎÁË ŞÉÓÌÁ (+1 ÉÌÉ -1)
}
  SIGNDEGREE;



typedef struct MTRDESCRIBE   // ïğéóáîéå ïôëòùôïê íáôòéãù
{
  char   Name[256];      // éÍÑ ÆÁÊÌÁ
  double MinValue;       // íÉÎÉÍÁÌØÎÏÅ ÚÎÁŞÅÎÉÅ ÜÌÅÍÅÎÔÁ × ÍÁÔÒÉÃÅ
  double MaxValue;       // íÁËÓÉÍÁÌØÎÏÅ ÚÎÁŞÅÎÉÅ ÜÌÅÍÅÎÔÁ × ÍÁÔÒÉÃÅ
  double ElementInPlane; // òÁÚÍÅÒ ÜÌÅÍÅÎÔÁ × ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ
  DFRAME FrameMeters;    // çÁÂÁÒÉÔÙ ÍÁÔÒÉÃÙ (ÍÅÔÒÙ)
  int ReliefType;   // ôÉĞ ÍÁÔÒÉÃÙ (0 - ÁÂÓÏÌÀÔÎÙÅ ×ÙÓÏÔÙ,
                         //  1 - ÁÂÓÏÌÀÔÎÙÅ + ÏÔÎÏÓÉÔÅÌØÎÙÅ)
  int   UserType;       // ôÉĞ ĞÏÌØÚÏ×ÁÔÅÌØÓËÉÈ ÄÁÎÎÙÈ
  int   View;           // ğÒÉÚÎÁË ÏÔÏÂÒÁÖÁÅÍÏÓÔÉ
}
  MTRDESCRIBE;

typedef struct MTRCOLORDESCEX  // ïğéóáîéå äéáğáúïîá ÷ùóïô
                               // íáôòéãù
{
  double MinHeight;            // íÉÎÉÍÁÌØÎÁÑ ×ÙÓÏÔÁ ÄÉĞÁÚÏÎÁ
  double MaxHeight;            // íÁËÓÉÍÁÌØÎÁÑ ×ÙÓÏÔÁ ÄÉĞÁÚÏÎÁ
  COLORREF Color;              // ã×ÅÔ,ÓÏÏÔ×ÅÔÓÔ×ÕÀİÉÊ ÄÉÁĞÁÚÏÎÕ ×ÙÓÏÔ
}
  MTRCOLORDESCEX;

typedef struct MTR3DVIEW     // ğáòáíåôòù 3D-ïôïâòáöåîéñ íáôòéãù ÷ùóïô
{
  double AreaCenterX;        // ãÅÎÔÒ ÏÔÏÂÒÁÖÁÅÍÏÊ ÏÂÌÁÓÔÉ X,Y
  double AreaCenterY;        //   (× ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ)
  double ViewPointX;         // ôÏŞËÁ ÎÁÂÌÀÄÅÎÉÑ X,Y,H
  double ViewPointY;         //   (× ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ)
  double ViewPointH;         //
  unsigned int  ShowScale;   // úÎÁÍÅÎÁÔÅÌØ ÍÁÓÛÔÁÂÁ
  unsigned char Style;       // CÔÉÌØ (0 - ÓÅÒÙÊ, 1 - Ã×ÅÔÎÏÊ)
  unsigned char ShowGrid;    // îÁÌÉŞÉÅ ÓÅÔËÉ (0 - ÎÅÔ, 1 - ÅÓÔØ)
  unsigned char GridStep;    // ûÁÇ ÓÅÔËÉ × ĞÉËÓÅÌÁÈ (2 - 255)
  unsigned char ModelHeight; // ÷ÙÓÏÔÁ ÍÏÄÅÌÉ × ĞÉËÓÅÌÁÈ (2 - 127)
}
  MTR3DVIEW;

enum CUTSHAPE                // æÏÒÍÁ ÒÁÚÒÅÚÁ
{
  CS_NONE          =   0,    // ïÔÓÕÔÓÔ×ÕÅÔ
  CS_VERTICALANGLE =   1,    // ÷ÅÒÔÉËÁÌØÎÙÊ ÕÇÌÏ×ÏÊ ÒÁÚÒÅÚ
                             //   Ó ×ÅÒÛÉÎÏÊ × ÔÏŞËÅ CutX,CutY
  CS_VOLUMETRICAL  =  16,    // ïÂßÅÍÎÙÊ ×ÙÒÅÚ
                             //   Ó ×ÅÒÛÉÎÏÊ × ÔÏŞËÅ CutX,CutY,CutZ
  CS_HORIZONTAL    = 128,    // çÏÒÉÚÏÎÔÁÌØÎÙÊ ÓÒÅÚ ĞÏ ×ÙÓÏÔÅ CutH
};

enum SCALETYPE               // ôÉĞ ÛËÁÌÙ
{
  ST_NONE          =   0,    // ïÔÓÕÔÓÔ×ÕÅÔ
  ST_ABSOLUTE      =   1,    // áÂÓÏÌÀÔÎÁÑ
  ST_FROMRELIEF    =   2,    // ïÔÎÏÓÉÔÅÌØÎÁÑ ÏÔ ÒÅÌØÅÆÁ
  ST_WITHOUTRELIEF =   3,    // ïÔÎÏÓÉÔÅÌØÎÁÑ ÂÅÚ ÕŞÅÔÁ ÒÅÌØÅÆÁ
};

#define MTL3D_MAXMODEL 0x01FF  // íÁËÓÉÍÁÌØÎÁÑ ×ÙÓÏÔÁ ÍÏÄÅÌÉ ÍÁÔÒÉÃÙ ÓÌÏÅ×
                               // (Ñ×ÌÑÅÔÓÑ ÍÁÓËÏÊ ×ÙÄÅÌÅÎÉÑ ×ÙÓÏÔÙ)

typedef struct MTR3DVIEWEX   // ğáòáíåôòù 3D-ïôïâòáöåîéñ íáôòéã (MTW É MTL)
{
  double AreaCenterX;        // ãÅÎÔÒ ÏÔÏÂÒÁÖÁÅÍÏÊ ÏÂÌÁÓÔÉ X,Y
  double AreaCenterY;        //   (× ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ)
  double CutX;               // ëÏÏÒÄÉÎÁÔÙ ×ÅÒÛÉÎÙ ÒÁÚÒÅÚÁ/×ÙÒÅÚÁ X,Y,Z
  double CutY;               //   (× ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ)      - ÄÌÑ MTL
  double CutZ;
  double CutH;               // ÷ÙÓÏÔÁ ÇÏÒÉÚÏÎÔÁÌØÎÏÇÏ ÓÒÅÚÁ (× ÍÅÔÒÁÈ)

    long ShowScale;          // úÎÁÍÅÎÁÔÅÌØ ÍÁÓÛÔÁÂÁ ÏÔÏÂÒÁÖÅÎÉÑ ÍÅÓÔÎÏÓÔÉ
    long ModelHeight;        // ÷ÙÓÏÔÁ ÍÏÄÅÌÉ × ĞÉËÓÅÌÁÈ (2 - MTL3D_MAXMODEL)
    long GridStep;           // ûÁÇ ÓÅÔËÉ × ĞÉËÓÅÌÁÈ (2 - 100)
    long CutShape;           // æÏÒÍÁ ÒÁÚÒÅÚÁ (ÓÍ. CUTSHAPE)   - ÄÌÑ MTL

   short ViewAngle;          // õÇÏÌ ÎÁÂÌÀÄÅÎÉÑ/ÎÁËÌÏÎÁ (× ÇÒÁÄÕÓÁÈ)
   short RotationAngle;      // õÇÏÌ ĞÏ×ÏÒÏÔÁ ÏÔÎÏÓÉÔÅÌØÎÏ ÃÅÎÔÒÁ AreaCenter
                             //   (× ÇÒÁÄÕÓÁÈ)
    char Style;              // CÔÉÌØ (0 - ÓÅÒÙÊ, 1 - Ã×ÅÔÎÏÊ)
    char ShowGrid;           // îÁÌÉŞÉÅ ÓÅÔËÉ (0 - ÎÅÔ, 1 - ÅÓÔØ)
    char Shadow;             // îÁÌÉŞÉÅ ÔÅÎÉ (0 - ÎÅÔ, 1 - ÅÓÔØ)
    char ScaleType;          // ôÉĞ ÛËÁÌÙ (ÓÍ. SCALETYPE)      - ÄÌÑ MTL

    char CoverMatrix;        // îÁÌÉŞÉÅ ÍÁÔÒÉÃÙ ×ÙÓÏÔ   (0 - ÎÅÔ, 1 - ÅÓÔØ)
    char CoverMap;           // îÁÌÉŞÉÅ ËÁÒÔÙ           (0 - ÎÅÔ, 1 - ÅÓÔØ)
    char CoverRaster;        // îÁÌÉŞÉÅ ÒÁÓÔÒÁ          (0 - ÎÅÔ, 1 - ÅÓÔØ)
    char AccordScale;        // óÏÇÌÁÓÏ×ÁÎÉÅ ÍÁÓÛÔÁÂÏ×  (0 - ÎÅÔ, 1 - ÅÓÔØ)
    char CoverMtq;           // îÁÌÉŞÉÅ ÍÁÔÒÉÃÙ ËÁŞÅÓÔ×Á(0 - ÎÅÔ, 1 - ÅÓÔØ)  // 06/10/04
    char IsUpdate ;          // ğÅÒÅÒÉÓÏ×ËÁ ÉÚÏÂÒÁÖÅÎÉÑ (0 - ÎÅÔ, 1 - ÄÁ)    // 21/10/05

    char Reserve[26];

  double CursorX;            // ëÏÏÒÄÉÎÁÔÙ ÕËÁÚÁÔÅÌÑ X,Y
  double CursorY;            //   (× ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ)

    long Width;              // ûÉÒÉÎÁ ÉÚÏÂÒÁÖÅÎÉÑ
    long Height;             // ÷ÙÓÏÔÁ ÉÚÏÂÒÁÖÅÎÉÑ

    char Name[256];          // éÍÑ ÆÁÊÌÁ ÏÔÏÂÒÁÖÁÅÍÏÊ ÍÁÔÒÉÃÙ
                             //   (0 - ×ÓÅ ÍÁÔÒÉÃÙ ÓÌÏÅ×)    - ÄÌÑ MTL
}
  MTR3DVIEWEX;

                             // ğáòáíåôòù 3D-ïôïâòáöåîéñ íáôòéã óìïå÷ (MTL)
typedef struct MTR3DVIEWEX MTL3DVIEW;                   // 16/10/03


typedef struct METAFILEBUILDPARM  // ğáòáíåôòù óïúäáîéñ íåôáæáêìá
{
  long CenterX;     // ëÏÏÒÄÉÎÁÔÙ ÃÅÎÔÒÁ ×Ù×ÏÄÉÍÏÊ ÏÂÌÁÓÔÉ
  long CenterY;     // (× ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ)
  long Width;       // ûÉÒÉÎÁ ÆÒÁÇÍÅÎÔÁ (× ÍÉÌÌÉÍÅÔÒÁÈ)
  long Height;      // ÷ÙÓÏÔÁ ÆÒÁÇÍÅÎÔÁ (× ÍÉÌÌÉÍÅÔÒÁÈ)
  long Scale;       // íÁÓÛÔÁÂ ÉÚÏÂÒÁÖÅÎÉÑ
  long VisualType;  // ôÉĞ ×ÉÚÕÁÌÉÚÁÃÉÉ
   // üëòáîîùê ÷ù÷ïä
   //   VT_SCREEN          = 1, // üëòáîîùê (şåòåú DIB)
   //   VT_SCREENCONTOUR   = 2, // üëòáîîùê ëïîôõòîùê

   // ğòéîôåòîùê ÷åëôïòîùê ÷ù÷ïä
   //   VT_PRINT           = 3, // ğòéîôåòîùê ÷åëôïòîùê (şåòåú WIN API)
   //   VT_PRINTGLASS      = 4, // ğòéîôåòîùê âåú úáìé÷ëé ğïìéçïîï÷
   //   VT_PRINTCONTOUR    = 5, // ğòéîôåòîùê ëïîôõòîùê, âåú õóìï÷îùè úîáëï÷

   // ğòéîôåòîùê òáóôòéúï÷áîîùê ÷ù÷ïä
   //   VT_PRINTRST        = 6, // ğòéîôåòîùê òáóôòéúï÷áîîùê (şåòåú WIN API)
   //   VT_PRINTGLASSRST   = 7, // ğòéîôåòîùê âåú úáìé÷ëé ğïìéçïîï÷
   //   VT_PRINTCONTOURRST = 8, // ğòéîôåòîùê ëïîôõòîùê, âåú õóìï÷îùè úîáëï÷
}
  METAFILEBUILDPARM;


typedef struct METAFILEBUILDPARMEX  // ğáòáíåôòù óïúäáîéñ EMF-æáêìá
{
  DFRAME Frame;     // çÁÂÁÒÉÔÙ (ÍÅÔÒÙ)
  long Scale;       // íÁÓÛÔÁÂ ÉÚÏÂÒÁÖÅÎÉÑ
  char VisualType;  // ôÉĞ ×ÉÚÕÁÌÉÚÁÃÉÉ
                    //  1 - ÜËÒÁÎÎÙÊ (BITMAP)
                    //  2 - ÓÈÅÍÁÔÉŞÎÙÊ (BITMAP)
                    //  3 - ĞÒÉÎÔÅÒÎÙÊ
                    //  4 - ĞÒÏÚÒÁŞÎÙÊ ĞÒÉÎÔÅÒÎÙÊ
                    //  5 - ËÏÎÔÕÒÎÙÊ ĞÒÉÎÔÅÒÎÙÊ
  char Border;      // æÌÁÇ ÒÉÓÏ×ÁÎÉÑ ÒÁÍËÉ
  char Intensity;   // éÎÔÅÎÓÉ×ÎÏÓÔØ ÚÁÌÉ×ËÉ % (0-100)   // 15/02/00
  char Black;       // æÌÁÇ ŞÅÒÎÏ-ÂÅÌÏÇÏ ÉÚÏÂÒÁÖÅÎÉÑ(1 - ÅÓÔØ, 0 - ÎÅÔ)

  char DontClip;    // îÅ ÏÂÒÅÚÁÔØ ×ÙÂÒÁÎÎÙÊ ÆÒÁÇÍÅÎÔ ĞÏ ÒÁÍËÅ (!= 0)
                    // (ÎÁĞÒÉÍÅÒ, Corel9 ÎÅ ĞÏÎÉÍÁÅÔ ::SelectClipRgn() )
  char Reserve[7];  // òÅÚÅÒ× (ÄÏÌÖÅÎ ÂÙÔØ ÏÂÎÕÌÅÎ)
}
  METAFILEBUILDPARMEX;


typedef struct XIMAGEDESC   // ïĞÉÓÁÔÅÌØ ÂÉÔÏ×ÏÊ ÏÂÌÁÓÔÉ XImage
{                           // (ÄÌÑ ĞÒÉÍÅÎÅÎÉÑ Ó XWindow)    // 25/09/00
  char *    Point;          // áÄÒÅÓ ÎÁŞÁÌÁ ÏÂÌÁÓÔÉ ĞÉËÓÅÌÏ×
  long int  Width;          // ûÉÒÉÎÁ ÓÔÒÏËÉ × ĞÉËÓÅÌÁÈ
  long int  Height;         // şÉÓÌÏ ÓÔÒÏË
  long int  Depth;          // òÁÚÍÅÒ ÜÌÅÍÅÎÔÁ × ÂÉÔÁÈ (8,15,16,24,32)
  long int  CellSize;       // òÁÚÍÅÒ ÜÌÅÍÅÎÔÁ(ĞÉËÓÅÌÁ) × ÂÁÊÔÁÈ
  long int  RowSize;        // ûÉÒÉÎÁ ÓÔÒÏËÉ × ÂÁÊÔÁÈ
}
  XIMAGEDESC;


enum GRIDTYPE                // ôéğ óåôëé
{
  GRT_NONE  =   0,           // ïÔÓÕÔÓÔ×ÕÅÔ
  GRT_LINE  =   1,           // óÅÔËÁ ÌÉÎÉÊ
  GRT_NODE  =   2,           // óÅÔËÁ ÔÏŞÅË
  GRT_CROSS =   3,           // óÅÔËÁ ËÒÅÓÔÏ×
};

typedef struct _DLLCLASS GRIDPARM     // óôòõëôõòá ğáòáíåôòï÷ ğòñíïõçïìøîïê óåôëé
{
  GRIDPARM()  { Step = 1000; Type = GRT_LINE;
                Image.Color = 0x040404; Image.Thick = 250; 
                Size = 10*250; Shadow = 0; Under = 0; }

  double    Step;           // ûÁÇ ÓÅÔËÉ × ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ
  long int  Type;           // ôÉĞ ÜÌÅÍÅÎÔÁ (ÓÅÔËÁ, ÔÏŞËÉ, ËÒÅÓÔÙ)
  struct
  {
   long int Color;
   long int Thick;
  }
            Image;          // ã×ÅÔ É ÔÏÌİÉÎÁ ÌÉÎÉÊ (RGB, ÍËÍ)
  long int  Size;           // òÁÚÍÅÒ ÜÌÅÍÅÎÔÁ ÔÉĞÁ "ËÒÅÓÔ" × ÍËÍ (1:250)
  long int  Shadow;         // ğÒÉÚÎÁË ĞÏÌÕĞÒÏÚÒÁŞÎÏÇÏ ÏÔÏÂÒÁÖÅÎÉÑ
  long int  Under;          // ğÒÉÚÎÁË ÏÔÏÂÒÁÖÅÎÉÑ ĞÏÄ ËÁÒÔÏÊ
}
  GRIDPARM;

// ğáòáíåôòù ğïóôòïåîéñ úïîù ÷éäéíïóôé
typedef struct TBUILDZONEVISIBILITY                    // 19/05/11
{
  DOUBLEPOINT PointCenter;      // éÓÈÏÄÎÁÑ ÔÏŞËÁ 
  double      RadiusMeter;      // òÁÓÓÔÏÑÎÉÅ (× ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ)
  double      Azimuth;          // îÁĞÒÁ×ÌÅÎÉÅ (× ÒÁÄÉÁÎÁÈ)
  double      Angle;            // õÇÏÌ ÏÂÚÏÒÁ (× ÒÁÄÉÁÎÁÈ)
                                // ğÒÉ Azimuth = 0, Angle = 2*M_PI (360 ÇÒÁÄÕÓÏ×) 
                                // ÓÔÒÏÉÔÓÑ ËÒÕÇÏ×ÁÑ ÚÏÎÁ
  double      DeltaHight;       // ÷ÙÓÏÔÁ ÎÁÂÌÀÄÅÎÉÑ (× ÍÅÔÒÁÈ)
  double      DeltaObservation; // ğÒÉÒÁİÅÎÉÅ ÎÁÂÌÀÄÁÅÍÏÊ ÔÏŞËÉ (× ÍÅÔÒÁÈ)
  long int    VisionRst;        // ÷ÉÄÉÍÏÓÔØ ÚÏÎ ĞÅÒÅÓÅŞÅÎÉÑ
                                // 0-ÓÏ ×ÓÅÈ ÔÏŞÅË, 1-ÈÏÔÑ ÂÙ Ó ÏÄÎÏÊ
  long int    StyleRst;         // óÔÅĞÅÎØ ×ÉÄÉÍÏÓÔÉ ÒÁÓÔÒÁ
                                // 0-ĞÒÏÚÒÁŞÎÙÊ, 1-ĞÏÌÕĞÒÏÚÒÁŞÎÙÊ
                                // 2-ÚÁĞÏÌÎÅÎÎÙÊ
  long int    ColorRst;         // ã×ÅÔ ÒÁÓÔÒÁ
  long int    Inversion;        // éÎ×ÅÒÓÉÑ ×ÉÄÉÍÏÓÔÉ

}
  TBUILDZONEVISIBILITY;

enum PRECISIONFLAG              // ôïşîïóôø èòáîåîéñ ëïïòäéîáô îá ëáòôå
{
  PF_FLOAT  = 0,                // îÏÒÍÁÌØÎÁÑ ÔÏŞÎÏÓÔØ × ÄÉÓËÒÅÔÁÈ 
  PF_DOUBLE = 1,                // ğÏ×ÙÛÅÎÎÁÑ ÔÏŞÎÏÓÔØ × ÄÉÓËÒÅÔÁÈ
  PF_METRE  = 2,                // ğÏ×ÙÛÅÎÎÁÑ ÔÏŞÎÏÓÔØ × ÍÅÔÒÁÈ
  PF_GEO    = 4                 // ğÏ×ÙÛÅÎÎÁÑ ÔÏŞÎÏÓÔØ × ÒÁÄÉÁÎÁÈ     // 17/03/10
};


enum TMCMODE               // òåöéíù äïóôõğá ë äáîîùí                 // 10/05/11  
{
  TMM_READ         = 1,    // òÁÚÒÅÛÅÎÏ ŞÔÅÎÉÅ ÄÁÎÎÙÈ
  TMM_WRITE        = 2,    // òÁÚÒÅÛÅÎÏ ÒÅÄÁËÔÉÒÏ×ÁÎÉÅ ÄÁÎÎÙÈ
  TMM_COPY         = 4,    // òÁÚÒÅÛÅÎÏ ËÏĞÉÒÏ×ÁÎÉÅ ÄÁÎÎÙÈ ÎÁ ËÌÉÅÎÔÅ
  TMM_TEMP         = 64,   // ğÒÉÚÎÁË ×ÒÅÍÅÎÎÏÊ ËÁÒÔÙ (ÕÄÁÌÉÔØ ĞÒÉ ÚÁËÒÙÔÉÉ)
};

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++ óôòõëôõòù äìñ óïúäáîéñ ğìáîï÷, ëáòô é ++++++++++++++++++
//++++++++ ğïìøúï÷áôåìøóëéè ëáòô                 ++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct APPENDPLANELIST
{
int  Length;              // äÌÉÎÁ ÚÁĞÉÓÉ ÓÔÒÕËÔÕÒÙ APPENDLIST        // 26/03/12

char Nomenclature[32];    // îÏÍÅÎËÌÁÔÕÒÁ ÌÉÓÔÁ
char ListName[32];        // õÓÌÏ×ÎÏÅ ÎÁÚ×ÁÎÉÅ ÌÉÓÔÁ
char FileName[256];       // éÍÑ ÆÁÊÌÁ ĞÏ ËÏÔÏÒÏÍÕ × ÒÁÊÏÎÅ ÂÕÄÅÔ
                          // ÓÏÚÄÁÎ ÌÉÓÔ Ó ÄÁÎÎÙÍ ÉÍÅÎÅÍ É ÒÁÓÛÉÒÅÎÉÑÍÉ
                          // HDR,DAT,SEM ...

int  Reserv;              // òÅÚÅÒ× ÄÌÑ ×ÙÒÁ×ÎÉ×ÁÎÉÑ, ÄÏÌÖÅÎ ÂÙÔØ 0
                          // 17/10/01

// ğÒÑÍÏÕÇÏÌØÎÙÅ ËÏÏÒÄÉÎÁÔÙ ÌÉÓÔÁ × ÍÅÔÒÁÈ
// (ÄÌÑ ĞÏÌØÚÏ×ÁÔÅÌØÓËÏÊ ËÁÒÔÙ (SITE) ÄÏÌÖÎÙ ÂÙÔØ 0)

double XSouthWest   ;  // X À-Ú
double YSouthWest   ;  // Y À-Ú
double XNorthWest   ;  // X Ó-Ú
double YNorthWest   ;  // Y Ó-Ú
double XNorthEast   ;  // X Ó-×
double YNorthEast   ;  // Y Ó-×
double XSouthEast   ;  // X À-×
double YSouthEast   ;  // Y À-×
}
  APPENDPLANELIST;


typedef struct CREATEPLANE
{
int Length;              // äÌÉÎÁ ÚÁĞÉÓÉ ÓÔÒÕËÔÕÒÙ CREATEPLANE   // 26/03/12

char MapName[32];         // éÍÑ ÒÁÊÏÎÁ
long Scale;               // úÎÁÍÅÎÁÔÅÌØ ÍÁÓÛÔÁÂÁ ËÁÒÔÙ

APPENDPLANELIST List;     // ïĞÉÓÁÎÉÅ ÌÉÓÔÁ ĞÌÁÎÁ
}
  CREATEPLANE;


typedef struct CREATESITE
{
 long     Length;             // äÌÉÎÁ ÚÁĞÉÓÉ ÓÔÒÕËÔÕÒÙ CREATESITE (80)
 char     MapName[32];        // éÍÑ ÒÁÊÏÎÁ
 int MapType;                 // ïÂÏÂİÅÎÎÙÊ ÔÉĞ ËÁÒÔÙ
 int MaterialProjection;      // ğÒÏÅËÃÉÑ ÉÓÈ. ÍÁÔÅÒÉÁÌÁ
 int      Scale;              // úÎÁÍÅÎÁÔÅÌØ ÍÁÓÛÔÁÂÁ ËÁÒÔÙ

                              // ÷ ÒÁÄÉÁÎÁÈ
 double FirstMainParallel;    // ğÅÒ×ÁÑ ÇÌÁ×ÎÁÑ ĞÁÒÁÌÌÅÌØ
 double SecondMainParallel;   // ÷ÔÏÒÁÑ ÇÌÁ×ÎÁÑ ĞÁÒÁÌÌÅÌØ
 double AxisMeridian;         // ïÓÅ×ÏÊ ÍÅÒÉÄÉÁÎ
 double MainPointParallel;    // ğÁÒÁÌÌÅÌØ ÇÌÁ×ÎÏÊ ÔÏŞËÉ
}
  CREATESITE;

typedef struct CREATESITEEX   // 11/05/07
{
 long     Length;             // äÌÉÎÁ ÚÁĞÉÓÉ ÓÔÒÕËÔÕÒÙ CREATESITE (328)
 char     MapName[256];       // éÍÑ ÒÁÊÏÎÁ × ËÏÄÉÒÏ×ËÅ ANSI (UNICODE - ÄÌÑ ÆÕÎËÃÉÊ "Un")
 long int MapType;            // ïÂÏÂİÅÎÎÙÊ ÔÉĞ ËÁÒÔÙ
 long int MaterialProjection; // ğÒÏÅËÃÉÑ ÉÓÈ. ÍÁÔÅÒÉÁÌÁ
 long int EllipsoideKind;     // ôÉĞ ÜÌÌÉĞÓÏÉÄÁ (1 - ëÒÁÓÏ×ÓËÏÇÏ, 9 - WGS84,...)
 long     Scale;              // úÎÁÍÅÎÁÔÅÌØ ÍÁÓÛÔÁÂÁ ËÁÒÔÙ
 long     Reserve;            // òÅÚÅÒ× (ÄÏÌÖÅÎ ÂÙÔØ 0)

                              // ÷ ÒÁÄÉÁÎÁÈ
 double FirstMainParallel;    // ğÅÒ×ÁÑ ÇÌÁ×ÎÁÑ ĞÁÒÁÌÌÅÌØ
 double SecondMainParallel;   // ÷ÔÏÒÁÑ ÇÌÁ×ÎÁÑ ĞÁÒÁÌÌÅÌØ
 double AxisMeridian;         // ïÓÅ×ÏÊ ÍÅÒÉÄÉÁÎ
 double MainPointParallel;    // ğÁÒÁÌÌÅÌØ ÇÌÁ×ÎÏÊ ÔÏŞËÉ
 double PoleLatitude;         // ûÉÒÏÔÁ ĞÏÌÀÓÁ ĞÒÏÅËÃÉÉ
 double PoleLongitude;        // äÏÌÇÏÔÁ ĞÏÌÀÓÁ ĞÒÏÅËÃÉÉ
}
  CREATESITEEX;

typedef struct CREATESITEUN   // 11/05/07
{
 long     Length;             // äÌÉÎÁ ÚÁĞÉÓÉ ÓÔÒÕËÔÕÒÙ CREATESITE
 WCHAR    MapName[128];       // éÍÑ ÒÁÊÏÎÁ × ËÏÄÉÒÏ×ËÅ UNICODE (ÄÌÑ ÆÕÎËÃÉÊ "Un")
 long int MapType;            // ïÂÏÂİÅÎÎÙÊ ÔÉĞ ËÁÒÔÙ
 long int MaterialProjection; // ğÒÏÅËÃÉÑ ÉÓÈ. ÍÁÔÅÒÉÁÌÁ
 long int EllipsoideKind;     // ôÉĞ ÜÌÌÉĞÓÏÉÄÁ (1 - ëÒÁÓÏ×ÓËÏÇÏ, 9 - WGS84,...)
 long     Scale;              // úÎÁÍÅÎÁÔÅÌØ ÍÁÓÛÔÁÂÁ ËÁÒÔÙ
 long     Reserve;            // òÅÚÅÒ× (ÄÏÌÖÅÎ ÂÙÔØ 0)

                              // ÷ ÒÁÄÉÁÎÁÈ
 double FirstMainParallel;    // ğÅÒ×ÁÑ ÇÌÁ×ÎÁÑ ĞÁÒÁÌÌÅÌØ
 double SecondMainParallel;   // ÷ÔÏÒÁÑ ÇÌÁ×ÎÁÑ ĞÁÒÁÌÌÅÌØ
 double AxisMeridian;         // ïÓÅ×ÏÊ ÍÅÒÉÄÉÁÎ
 double MainPointParallel;    // ğÁÒÁÌÌÅÌØ ÇÌÁ×ÎÏÊ ÔÏŞËÉ
 double PoleLatitude;         // ûÉÒÏÔÁ ĞÏÌÀÓÁ ĞÒÏÅËÃÉÉ
 double PoleLongitude;        // äÏÌÇÏÔÁ ĞÏÌÀÓÁ ĞÒÏÅËÃÉÉ
}
  CREATESITEUN;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++ óôòõëôõòá òáúäåìåîéñ 4 âáêôï÷ îá óïóôá÷ìñàıéå ++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef union
{
  struct
  {
    unsigned char b1;
    unsigned char b2;
    unsigned char b3;
    unsigned char b4;
  }
    Byte;              // ğÒÅÄÓÔÁ×ÌÅÎÉÅ × ×ÉÄÅ 8-ÂÉÔÏ×ÙÈ ĞÏÌÅÊ

  struct
  {
    unsigned short w1;
    unsigned short w2;
  }
    Word;              // ğÒÅÄÓÔÁ×ÌÅÎÉÅ × ×ÉÄÅ 16-ÂÉÔÏ×ÙÈ ĞÏÌÅÊ

  unsigned int Long;  // ğÒÅÄÓÔÁ×ÌÅÎÉÅ × ×ÉÄÅ 32-ÂÉÔÏ×ÏÇÏ ĞÏÌÑ   // 26/03/12

  int Value() { return (int) Long; }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (long)
  int GetLong(int & value)
  {
    return (int)(Long = (unsigned int)value);
  }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (long)
  int GetLong(unsigned int & value)
  {
    return (int)(Long = value);
  }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (long) ĞÏ ÁÄÒÅÓÕ address (4 ÂÁÊÔÁ)
  long GetLong(const char* address)
  {
#ifdef RISCCPU
    Byte.b1 = address[0];
    Byte.b2 = address[1];
    Byte.b3 = address[2];
    Byte.b4 = address[3];
#else
    Long = *((unsigned int *)address);
#endif
    return (int)Long;
  }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (long) ĞÏ ÁÄÒÅÓÕ address (4 ÂÁÊÔÁ)
  // × ÏÂÒÁÔÎÏÊ ĞÏÓÌÅÄÏ×ÁÔÅÌØÎÏÓÔÉ ÂÁÊÔ
  int GetTurnLong(int & value)
  {
    return GetTurnLong((char *)&value);
  }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (long) ĞÏ ÁÄÒÅÓÕ address (4 ÂÁÊÔÁ)
  // × ÏÂÒÁÔÎÏÊ ĞÏÓÌÅÄÏ×ÁÔÅÌØÎÏÓÔÉ ÂÁÊÔ
  int GetTurnLong(unsigned int & value)
  {
    return GetTurnLong((char *)&value);
  }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (long) ĞÏ ÁÄÒÅÓÕ address (4 ÂÁÊÔÁ)
  // × ÏÂÒÁÔÎÏÊ ĞÏÓÌÅÄÏ×ÁÔÅÌØÎÏÓÔÉ ÂÁÊÔ
  int GetTurnLong(char* address)
  {
    Byte.b4 = address[0];
    Byte.b3 = address[1];
    Byte.b2 = address[2];
    Byte.b1 = address[3];
    return (int)Long;
  }

  // õÓÔÁÎÏ×ÉÔØ ÚÎÁŞÅÎÉÅ (long) ĞÏ ÁÄÒÅÓÕ address (4 ÂÁÊÔÁ)
  int PutLong(int & value)
  {
    return (value = (int)Long);
  }

  // õÓÔÁÎÏ×ÉÔØ ÚÎÁŞÅÎÉÅ (long) ĞÏ ÁÄÒÅÓÕ address (4 ÂÁÊÔÁ)
  int PutLong(unsigned int & value)
  {
    return (int)(value = (unsigned int)Long);
  }

  // õÓÔÁÎÏ×ÉÔØ ÚÎÁŞÅÎÉÅ (long) ĞÏ ÁÄÒÅÓÕ address (4 ÂÁÊÔÁ)
  int PutLong(char* address)
  {
#ifdef RISCCPU
    address[0] = Byte.b1;
    address[1] = Byte.b2;
    address[2] = Byte.b3;
    address[3] = Byte.b4;
#else
    *((unsigned int *)address) = Long;
#endif
    return (int)Long;
  }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (short int)
  int GetShort(short int & value)
  {
    return GetShort((char *)&value);
  }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (short int)
  int GetShort(unsigned short int & value)
  {
    return GetShort((char *)&value);
  }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (int) ĞÏ ÁÄÒÅÓÕ address (2 ÂÁÊÔÁ)
  int GetShort(char* address)
  {
    Long = 0;
#ifdef RISCCPU
#ifdef NUMBERTURN              // 04/03/00
    Byte.b3 = address[0];
    Byte.b4 = address[1];
#else
    Byte.b1 = address[0];
    Byte.b2 = address[1];
#endif
#else
    Word.w1 = *((unsigned short *)address);
#endif
    return (int)Long;
  }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (int) ĞÏ ÁÄÒÅÓÕ address (2 ÂÁÊÔÁ)
  // × ÏÂÒÁÔÎÏÊ ĞÏÓÌÅÄÏ×ÁÔÅÌØÎÏÓÔÉ ÂÁÊÔ
  int GetTurnShort(short int & value)
  {
    return GetTurnShort((char *)&value);
  }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (int) ĞÏ ÁÄÒÅÓÕ address (2 ÂÁÊÔÁ)
  // × ÏÂÒÁÔÎÏÊ ĞÏÓÌÅÄÏ×ÁÔÅÌØÎÏÓÔÉ ÂÁÊÔ
  int GetTurnShort(unsigned short int & value)
  {
    return GetTurnShort((char *)&value);
  }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (int) ĞÏ ÁÄÒÅÓÕ address (2 ÂÁÊÔÁ)
  // × ÏÂÒÁÔÎÏÊ ĞÏÓÌÅÄÏ×ÁÔÅÌØÎÏÓÔÉ ÂÁÊÔ
  int GetTurnShort(char* address)
  {
    Long = 0;
#ifdef NUMBERTURN
    Byte.b4 = address[0];
    Byte.b3 = address[1];
#else
    Byte.b2 = address[0];
    Byte.b1 = address[1];
#endif
    return (int)Long;
  }

  // õÓÔÁÎÏ×ÉÔØ ÚÎÁŞÅÎÉÅ (short int)
  int PutShort(short int & value)
  {
    return PutShort((char *)&value);
  }

  // õÓÔÁÎÏ×ÉÔØ ÚÎÁŞÅÎÉÅ (short int)
  int PutShort(unsigned short int & value)
  {
    return PutShort((char *)&value);
  }

  // õÓÔÁÎÏ×ÉÔØ ÚÎÁŞÅÎÉÅ (int) ĞÏ ÁÄÒÅÓÕ address (2 ÂÁÊÔÁ)
  int PutShort(char* address)
  {
#ifdef RISCCPU
#ifdef NUMBERTURN              // 04/03/00
    address[0] = Byte.b3;
    address[1] = Byte.b4;
#else
    address[0] = Byte.b1;
    address[1] = Byte.b2;
#endif
#else
    *((unsigned short *)address) = Word.w1;
#endif
    return (int)Long;
  }
}
  REGISTER;

// ïĞÒÅÄÅÌÅÎÉÑ ÄÌÑ ó (REGISTER , char*) :

#if defined(__BORLANDC__) // äÌÑ Borland C++

#define LongToRegister(register, point) register.Long = ((long *)point)[0];

#else

#define LongToRegister(register, point) { register.Byte.b1 = ((char *)point)[0]; \
                                          register.Byte.b2 = ((char *)point)[1]; \
                                          register.Byte.b3 = ((char *)point)[2]; \
                                          register.Byte.b4 = ((char *)point)[3]; }
#endif

#define TurnLongToRegister(register, point) { register.Byte.b4 = ((char *)point)[0]; \
                                              register.Byte.b3 = ((char *)point)[1]; \
                                              register.Byte.b2 = ((char *)point)[2]; \
                                              register.Byte.b1 = ((char *)point)[3]; }

#define RegisterToLong(register, point) { ((char *)point)[0] = register.Byte.b1; \
                                          ((char *)point)[1] = register.Byte.b2; \
                                          ((char *)point)[2] = register.Byte.b3; \
                                          ((char *)point)[3] = register.Byte.b4; }

#define TurnRegisterToLong(register, point) { ((char *)point)[0] = register.Byte.b4; \
                                              ((char *)point)[1] = register.Byte.b3; \
                                              ((char *)point)[2] = register.Byte.b2; \
                                              ((char *)point)[3] = register.Byte.b1; }

#ifdef NUMBERTURN
#define ShortToRegister(register, point) {register.Long    = 0;        \
                                          register.Byte.b3 = ((char *)point)[0]; \
                                          register.Byte.b4 = ((char *)point)[1]; }

#define RegisterToShort(register, point) {((char *)point)[0] = register.Byte.b3; \
                                          ((char *)point)[1] = register.Byte.b4; }

#else
#define ShortToRegister(register, point) {register.Long    = 0;        \
                                          register.Byte.b1 = ((char *)point)[0]; \
                                          register.Byte.b2 = ((char *)point)[1]; }

#define RegisterToShort(register, point) {((char *)point)[0] = register.Byte.b1; \
                                          ((char *)point)[1] = register.Byte.b2; }
#endif

#ifdef NUMBERTURN
#define TurnShortToRegister(register, point) {register.Long    = 0;    \
                                          register.Byte.b4 = ((char *)point)[0]; \
                                          register.Byte.b3 = ((char *)point)[1]; }
#else
#define TurnShortToRegister(register, point) {register.Long    = 0;    \
                                          register.Byte.b2 = ((char *)point)[0]; \
                                          register.Byte.b1 = ((char *)point)[1]; }
#endif

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++ óôòõëôõòá òáúäåìåîéñ 8 âáêôï÷ îá óïóôá÷ìñàıéå ++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef union
{
  struct
  {
    unsigned char b1;
    unsigned char b2;
    unsigned char b3;
    unsigned char b4;
    unsigned char b5;
    unsigned char b6;
    unsigned char b7;
    unsigned char b8;
  }
    Byte;              // ğÒÅÄÓÔÁ×ÌÅÎÉÅ × ×ÉÄÅ 8-ÂÉÔÏ×ÙÈ ĞÏÌÅÊ

  double Double;  //  ğÒÅÄÓÔÁ×ÌÅÎÉÅ × ×ÉÄÅ 64-ÂÉÔÏ×ÏÇÏ ĞÏÌÑ

  double Value() { return Double; }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (double) ĞÏ ÁÄÒÅÓÕ address (8 ÂÁÊÔ)
  double GetDouble(double & value)
  {
    return GetDouble((char *)&value);
  }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (double) ĞÏ ÁÄÒÅÓÕ address (8 ÂÁÊÔ)
  double GetDouble(const char* address)
  {
#ifdef RISCCPU
    Byte.b1 = address[0];
    Byte.b2 = address[1];
    Byte.b3 = address[2];
    Byte.b4 = address[3];
    Byte.b5 = address[4];
    Byte.b6 = address[5];
    Byte.b7 = address[6];
    Byte.b8 = address[7];
#else
    Double = *((double *)address);
#endif
    return (double)Double;
  }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (double) ĞÏ ÁÄÒÅÓÕ address (8 ÂÁÊÔ)
  // × ÏÂÒÁÔÎÏÊ ĞÏÓÌÅÄÏ×ÁÔÅÌØÎÏÓÔÉ ÂÁÊÔ
  double GetTurnDouble(double & value)
  {
    return GetTurnDouble((char *)&value);
  }

  // úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (double) ĞÏ ÁÄÒÅÓÕ address (8 ÂÁÊÔ)
  // × ÏÂÒÁÔÎÏÊ ĞÏÓÌÅÄÏ×ÁÔÅÌØÎÏÓÔÉ ÂÁÊÔ
  double GetTurnDouble(const char* address)
  {
    Byte.b8 = address[0];
    Byte.b7 = address[1];
    Byte.b6 = address[2];
    Byte.b5 = address[3];
    Byte.b4 = address[4];
    Byte.b3 = address[5];
    Byte.b2 = address[6];
    Byte.b1 = address[7];
    return (double)Double;
  }

  // õÓÔÁÎÏ×ÉÔØ ÚÎÁŞÅÎÉÅ (double) ĞÏ ÁÄÒÅÓÕ address (8 ÂÁÊÔ)
  double PutDouble(double & value)
  {
    return PutDouble((char *)&value);
  }

  // õÓÔÁÎÏ×ÉÔØ ÚÎÁŞÅÎÉÅ (double) ĞÏ ÁÄÒÅÓÕ address (8 ÂÁÊÔ)
  double PutDouble(char* address)
  {
#ifdef RISCCPU
    address[0] = Byte.b1;
    address[1] = Byte.b2;
    address[2] = Byte.b3;
    address[3] = Byte.b4;
    address[4] = Byte.b5;
    address[5] = Byte.b6;
    address[6] = Byte.b7;
    address[7] = Byte.b8;
#else
    *((double *)address) = Double;
#endif
    return (double)Double;
  }
}
  DOUBLEREGISTER;

// ïĞÒÅÄÅÌÅÎÉÑ ÄÌÑ ó (DOUBLEREGISTER , char*) :

#define DoubleToRegister(register, point) { register.Byte.b1 = ((char *)point)[0]; \
                                          register.Byte.b2 = ((char *)point)[1]; \
                                          register.Byte.b3 = ((char *)point)[2]; \
                                          register.Byte.b4 = ((char *)point)[3]; \
                                          register.Byte.b5 = ((char *)point)[4]; \
                                          register.Byte.b6 = ((char *)point)[5]; \
                                          register.Byte.b7 = ((char *)point)[6]; \
                                          register.Byte.b8 = ((char *)point)[7]; }

#define TurnDoubleToRegister(register, point) { register.Byte.b8 = ((char *)point)[0]; \
                                              register.Byte.b7 = ((char *)point)[1]; \
                                              register.Byte.b6 = ((char *)point)[2]; \
                                              register.Byte.b5 = ((char *)point)[3]; \
                                              register.Byte.b4 = ((char *)point)[4]; \
                                              register.Byte.b3 = ((char *)point)[5]; \
                                              register.Byte.b2 = ((char *)point)[6]; \
                                              register.Byte.b1 = ((char *)point)[7]; }

#define RegisterToDouble(register, point) { ((char *)point)[0] = register.Byte.b1; \
                                          ((char *)point)[1] = register.Byte.b2; \
                                          ((char *)point)[2] = register.Byte.b3; \
                                          ((char *)point)[3] = register.Byte.b4; \
                                          ((char *)point)[4] = register.Byte.b5; \
                                          ((char *)point)[5] = register.Byte.b6; \
                                          ((char *)point)[6] = register.Byte.b7; \
                                          ((char *)point)[7] = register.Byte.b8; }

// úÁĞÒÏÓÉÔØ ÚÎÁŞÅÎÉÅ (short int)

#if !defined(WINCE) && !defined(NUMBERTURN)    // 07/06/02
  #define GetWordValue(value) ((int)((unsigned short) value))
#else
  inline int GetWordValue(long int value) // 25/04/01
   {
     REGISTER Register;
     return Register.GetShort((char *)&value);
   }
#endif


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++   Côòõëôõòá ïğéóáîéñ óôáîäáòôîïê ğáìéôòù   ++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct PALETTE256
{
  WORD         palVersion;
  WORD         palNumEntries;
  PALETTEENTRY palPalEntry[256];
}
  PALETTE256;

typedef unsigned int   CELL4;              // 28/07/06  // 26/03/12
typedef unsigned short CELL2;
typedef unsigned char  CELL1;

// æïòíáô úáğïìîñåíïçï üìåíåîôá DIB
#ifdef  WIN32API
 #ifndef WINCE
  typedef CELL4  CELL;
  #define CELLSIZE 4
 #else
  typedef CELL2  CELL;
  #define CELLSIZE 2
 #endif
#else

#ifndef LINUXSERVER           // 07/06/08
 #ifdef NUMBERTURN
  typedef CELL4  CELL;
  #define CELLSIZE 4
 #else
  #if defined(MINIDATA) || defined(TYNIDATA)     // 13/08/07
    typedef CELL1  CELL;
    #define CELLSIZE 1
  #else
    typedef CELL4  CELL;  // 14/12/09 äÌÑ Linux ĞÏ ÕÍÏÌŞÁÎÉÀ 4 ÂÁÊÔÁ
    #define CELLSIZE 4
  #endif
 #endif  // NUMBERTURN
#else
  typedef CELL1  CELL;
  #define CELLSIZE 1
#endif // !LINUXSERVER       // 19/06/08

#endif // !WIN32API


// ----------------------------------------------------------------
// CÔÒÕËÔÕÒÁ ÒÁÚÍÅÒÏ× É Ó×ÏÊÓÔ× ÉÚÏÂÒÁÖÅÎÉÑ ÏÂßÅËÔÏ×
// ×ÓÅ ÒÁÚÍÅÒÙ ÄÁÎÙ × ÍËÍ. (ÓÍ. MAPGDI.H)
// äÌÑ ÛÒÉÆÔÏ× É ÛÁÂÌÏÎÏ× - ÒÁÚÍÅÒÙ ÏÄÎÏÊ ÂÕË×Ù
// åÓÌÉ ÏÂßÅËÔ "×ÅËÔÏÒÎÙÊ" - TwoPoint = 1, ÉÎÁŞÅ - 0;
// äÌÑ "ÎÅÏÇÒÁÎÉŞÅÎÎÏÇÏ" ÏÂßÅËÔÁ - ÒÁÚÍÅÒÙ 0;
// ----------------------------------------------------------------

typedef struct IMAGESIZE
{           // 11/10/02
   unsigned int Number;          // ÎÏÍÅÒ ÆÕÎËÃÉÉ ÏÔÏÂÒÁÖÅÎÉÑ               // 26/03/12
   unsigned int Base  ;          // ÒÁÚÍÅÒ ÂÁÚÙ ÏÂßÅËÔÁ
            int DeltaH;          // ÒÁÓÓÔÏÑÎÉÅ ÏÔ ÌÅ×ÏÇÏ ×ÅÒÈÎÅÇÏ
            int DeltaV;          // ÕÇÌÁ ÇÁÂÁÒÉÔÏ× ÄÏ ÂÁÚÙ(ÔÏŞËÉ
                                  // ÏÔÓŞÅÔÁ) ÏÂßÅËÔÁ
   unsigned int HorizontalSize;  // ÒÁÚÍÅÒÙ ĞÏ ÇÏÒÉÚÏÎÔÁÌÉ
   unsigned int VerticalSize  ;  // ÒÁÚÍÅÒÙ ĞÏ ×ÅÒÔÉËÁÌÉ

   unsigned int Horizontal : 1;  // ÒÁÓĞÏÌÏÖÅÎ ÇÏÒÉÚÏÎÔÁÌØÎÏ
   unsigned int Vertical   : 1;  // ÒÁÓĞÏÌÏÖÅÎ ×ÅÒÔÉËÁÌØÎÏ
   unsigned int TwoPoint   : 1;  // ÍÅÔÒÉËÁ ÉÚ 2 ÔÏŞÅË
   unsigned int AlignV     : 2;  // ×ÙÒÁ×ÎÉ×ÁÎÉÅ ĞÏ ×ÅÒÔÉËÁÌÉ
   unsigned int AlignH     : 2;  // ×ÙÒÁ×ÎÉ×ÁÎÉÅ ĞÏ ÇÏÒÉÚÏÎÔÁÌÉ
   unsigned int Wide       : 2;  // ÛÉÒÉÎÁ ÛÒÉÆÔÁ
   unsigned int Type       : 8;  // ÔÉĞ ÛÒÉÆÔÁ (0-4)
   unsigned int Italic     : 1;  // ÎÁËÌÏÎ ÓÉÍ×ÏÌÏ×    // 13/06/06
   unsigned int Rezerv     :14;  // ÒÅÚÅÒ×
}
  IMAGESIZE;

// ----------------------------------------------------------------
// CÔÒÕËÔÕÒÁ ÏĞÉÓÙ×ÁÀİÁÑ ÇÁÂÁÒÉÔÎÕÀ ÒÁÍËÕ ÉÚÏÂÒÁÖÅÎÉÑ ÏÂßÅËÔÁ
// × ×ÉÄÅ ÒÁÚ×ÅÒÎÕÔÏÇÏ ĞÒÑÍÏÕÇÏÌØÎÉËÁ. ÷ÓÅ ÒÁÚÍÅÒÙ ÄÁÎÙ × ÍËÍ
// ÎÁ ÉÚÏÂÒÁÖÅÎÉÉ ËÁÒÔÙ × ÂÁÚÏ×ÏÍ ÍÁÓÛÔÁÂÅ ÏÔÎÏÓÉÔÅÌØÎÏ ĞÅÒ×ÏÊ
// ÔÏŞËÉ ÍÅÔÒÉËÉ ÏÂßÅËÔÁ. îÁĞÒÁ×ÌÅÎÉÅ ÏÓÅÊ ËÁÒÔÏÇÒÁÆÉŞÅÓËÏÅ (X ××ÅÒÈ,
// Y ×ĞÒÁ×Ï).
// ----------------------------------------------------------------

typedef struct IMAGEFRAME
{
   DOUBLEPOINT LeftTop;          // ëÏÏÒÄÉÎÁÔÙ ĞÅÒ×ÏÊ ÔÏŞËÉ × ÍËÍ
   DOUBLEPOINT RightTop;         // ëÏÏÒÄÉÎÁÔÙ ×ÔÏÒÏÊ ÔÏŞËÉ × ÍËÍ
   DOUBLEPOINT RightBottom;      // ëÏÏÒÄÉÎÁÔÙ ÔÒÅÔØÅÊ ÔÏŞËÉ × ÍËÍ
   DOUBLEPOINT LeftBottom;       // ëÏÏÒÄÉÎÁÔÙ ŞÅÔ×ÅÒÔÏÊ ÔÏŞËÉ × ÍËÍ
}
  IMAGEFRAME;

// ----------------------------------------------------------------
// æÕÎËÃÉÉ ÏÂÒÁÔÎÏÇÏ ×ÙÚÏ×Á
// ----------------------------------------------------------------
#ifdef WIN32API
typedef long int (WINAPI * BREAKCALL)(void * parm);      // 20/07/09 
typedef long int (WINAPI * BEFOREPAINT)
                 (void * parm, HDC hdc, RECT * rect);
typedef long int (WINAPI * MASKCALL)(void *  parm);
typedef long int (WINAPI * EVENTCALL)(void * parm, HPARAM value1,     // 27/08/09
                                      HPARAM value2, HPARAM value3);
#else
typedef long int (*BREAKCALL)(void * parm);
typedef long int (*BEFOREPAINT)
                 (void * parm, HDC hdc, RECT * rect);
typedef long int (* MASKCALL)(void * parm);
typedef long int (* EVENTCALL)(void * parm, HPARAM value1,
                               HPARAM value2, HPARAM value3);
#endif

#ifdef LINUXAPI
// ----------------------------------------------------------------
// ïÂÒÁÂÏÔŞÉË ÓÏÏÂİÅÎÉÊ
// ----------------------------------------------------------------
typedef long int (* MSGHANDLER)
    (long int hwnd, long int code, long int p1, long int p2, long int typemsg);

// ------------------------------------------------------------------
//  æÕÎËÃÉÑ MessageBox ÄÌÑ LINUX
// ------------------------------------------------------------------
typedef int (* MESSAGEBOX)(HWND hwnd, const TCHAR * message,
                           const TCHAR * title, int flag);
#endif

// ----------------------------------------------------------------
//  ëïäù ñúùëï÷ óïïâıåîéê é ğõîëôï÷ íåîà
// ----------------------------------------------------------------

enum MAPAPILANGUAGE
{
  ML_ENGLISH  = 1,  // áîçìéêóëéê
  ML_RUSSIAN  = 2,  // òõóóëéê
};

// ----------------------------------------------------------------
//  éäåîôéæéëáôïòù ëïíáîä (WM_COMMAND)
// ----------------------------------------------------------------

#define WM_ERRORCOORD   0x583    // éÎÆÏÒÍÁÃÉÑ Ï ÏÛÉÂËÁÈ ĞÁÓĞÏÒÔÁ
#define WM_INFOLIST     0x584    // éÎÆÏÒÍÁÃÉÑ Ï ÌÉÓÔÅ
#define WM_OBJECT       0x585    // óÍÅÎÁ ÏÂßÅËÔÁ
#define WM_LIST         0x586    // óÍÅÎÁ ÌÉÓÔÁ
#define WM_ERROR        0x587    // éÎÆÏÒÍÁÃÉÑ ÏÂ ÏÛÉÂËÁÈ
#define WM_MAP          0x588    // óÍÅÎÁ ÔÅËÕİÅÊ ËÁÒÔÙ
#define WM_ERRORSXF     0x589    // éÎÆÏÒÍÁÃÉÑ ÏÂ ÏÛÉÂËÁÈ ÏÂÒÁÂÏÔËÉ SXF

#define WM_PROGRESSBAR  0x590    // óÏÏÂİÅÎÉÅ Ï ÓÏcÔÏÑÎÉÉ ĞÒÏÃÅÓÓÁ
#define WM_MAPEVENT     0x591    // óÏÏÂİÅÎÉÅ Ï ÓÏÂÙÔÉÑÈ ËÁÒÔÙ
#define WM_PROGRESSICON  0x592   // óÏÏÂİÅÎÉÅ Ï ÓÏcÔÏÑÎÉÉ ĞÒÏÃÅÓÓÁ
                                 // ÄÌÑ ÏÔÏÂÒÁÖÅÎÉÑ × ÉËÏÎËÅ ĞÒÏÇÒÁÍÍÙ
                                 // ĞÒÉ Ó×ÅÒÎÕÔÏÍ ÇÌÁ×ÎÏÍ ÏËÎÅ

// ----------------------------------------------------------------
//  éäåîôéæéëáôïòù óïïâıåîéê (MESSAGE)
// ----------------------------------------------------------------

#define WM_LEFTTOPPOINT 0x600    // CÏÏÂİÅÎÉÅ ÏËÎÕ ËÁÒÔÙ ÉÚ ÚÁÄÁŞÉ
                                 // úÁĞÒÏÓ ËÏÏÒÄÉÎÁÔ ×ÅÒÈÎÅÇÏ ÌÅ×ÏÇÏ
                                 // ÕÇÌÁ ÏËÎÁ ËÁÒÔÙ × ĞÉËÓÅÌÁÈ ÉÚÏÂÒÁÖÅÎÉÑ
                                 // wparam : (POINT * point)         //28/11/02
                                 // lparam : 0
                                 // result : 0x600

#define WM_MOVEDOC      0x601    // CÏÏÂİÅÎÉÅ ÏËÎÕ ËÁÒÔÙ ÉÚ ÚÁÄÁŞÉ
                                 // õËÁÚÁÎÉÅ ÎÁ ÎÅÏÂÈÏÄÉÍÏÓÔØ
                                 // ĞÅÒÅÍÅÓÔÉÔØ ÉÚÏÂÒÁÖÅÎÉÅ ËÁÒÔÙ × ÚÁÄÁÎÎÕÀ
                                 // ÔÏŞËÕ, ËÏÏÒÄÉÎÁÔÙ ×ÅÒÈÎÅÇÏ ÌÅ×ÏÇÏ ÕÇÌÁ ÏËÎÁ
                                 // ËÁÒÔÙ × ĞÉËÓÅÌÁÈ ÉÚÏÂÒÁÖÅÎÉÑ
                                 // wparam : (POINT * point)         //28/11/02
                                 // lparam : 0 ÉÌÉ (POINT * marker)  //28/11/02
                                 // ËÏÏÒÄÉÎÁÔÙ ÍÁÒËÅÒÁ,ÏÂÒÁÂÁÔÙ×ÁÔØ ÎÅ ÏÂÑÚÁÔÅÌØÎÏ
                                 // result : 0x601

#define WM_OPENDOC      0x602    // CÏÏÂİÅÎÉÅ ÏËÎÕ ĞÒÉÌÏÖÅÎÉÑ ÉÌÉ ËÁÒÔÙ ÉÚ ÚÁÄÁŞÉ
                                 // õËÁÚÁÎÉÅ ÎÁ ÎÅÏÂÈÏÄÉÍÏÓÔØ
                                 // ÏÔËÒÙÔØ ËÁÒÔÕ ĞÏ ÉÍÅÎÉ ÆÁÊÌÁ (MAP,MTW,RSW,...)
                                 // wparam : (const char * name)
                                 // lparam : 0 ÉÌÉ (DOUBLEPOINT * point),
                                 // ËÏÏÒÄÉÎÁÔÙ × ÍÅÔÒÁÈ ÔÏŞËÉ, ËÏÔÏÒÕÀ ÎÕÖÎÏ
                                 // ĞÏËÁÚÁÔØ × ÃÅÎÔÒÅ ÏËÎÁ ËÁÒÔÙ
                                 // result : 0x602

#define AW_CLOSEDIALOGNOTIFY 0x610 // CÏÏÂİÅÎÉÅ ÇÌÁ×ÎÏÍÕ ÏËÎÕ Ï ÚÁËÒÙÔÉÉ ÄÉÁÌÏÇÁ
                                   // õËÁÚÁÎÉÅ ÎÁ ÎÅÏÂÈÏÄÉÍÏÓÔØ ×ÙÚ×ÁÔØ ÆÕÎËÃÉÀ
                                   // ÚÁËÒÙÔÉÑ ÄÉÁÌÏÇÁ ĞÏ ÕËÁÚÁÔÅÌÀ
                                   // wparam : 0                        //21/04/10
                                   // lparam : ÕËÁÚÁÔÅÌØ ÄÉÁÌÏÇÁ
                                   // result : 0x610   

// --------------------------------------------------------------
//  úÁÇÒÕÚÉÔØ ÂÉÂÌÉÏÔÅËÕ DLL
//  ğÒÉ ĞÏÉÓËÅ DLL ĞÒÏ×ÅÒÑÅÔÓÑ É ÄÉÒÅËÔÏÒÉÑ ĞÒÉÌÏÖÅÎÉÑ
//  ğÒÉ ÏÛÉÂËÅ ×ÏÚ×ÒÁİÁÅÔ ÎÏÌØ É ×ÙÄÁÅÔ ÓÏÏÂİÅÎÉÅ ÎÁ ÜËÒÁÎ
// --------------------------------------------------------------

FARPROC LoadMapLibrary(const char * dllname,
                       HINSTANCE&   libinst,
                       const char * funcname,
                       int message = 1);

// --------------------------------------------------------------
//  óÔÒÕËÔÕÒÙ ÄÌÑ ×ÙÚÏ×Á ĞÒÉËÌÁÄÎÙÈ ÚÁÄÁŞ
// --------------------------------------------------------------

typedef struct TASKPARM        // ğáòáíåôòù ğòéëìáäîïê úáäáşé
{
  long int    Language;        // ëÏÄ ÑÚÙËÁ ÄÉÁÌÏÇÏ× (1 - ENGLISH,
                               // 2 - RUSSIAN, ...)
  HINSTANCE   Resource;        // íÏÄÕÌØ ÒÅÓÕÒÓÏ× ĞÒÉÌÏÖÅÎÉÑ
  const char* HelpName;        // ğÏÌÎÏÅ ÉÍÑ ÆÁÊÌÁ ".hlp"
  const char* IniName;         // ğÏÌÎÏÅ ÉÍÑ ÆÁÊÌÁ ".ini" ĞÒÉÌÏÖÅÎÉÑ
  const char* PathShell;       // ëÁÔÁÌÏÇ ĞÒÉÌÏÖÅÎÉÑ (exe,dll,...)
  const char* ApplicationName; // éÍÑ ĞÒÉÌÏÖÅÎÉÑ
#ifdef WIN32API
  HWND        Handle;          // éÄÅÎÔÉÆÉËÁÔÏÒ ÇÌÁ×ÎÏÇÏ ÏËÎÁ ĞÒÉÌÏÖÅÎÉÑ
#else
  MSGHANDLER  Handle;          // éÄÅÎÔÉÆÉËÁÔÏÒ ÏÂÒÁÂÏÔŞÉËÁ ËÏÍÁÎÄ ÇÌÁ×ÎÏÇÏ ÏËÎÁ ĞÒÉÌÏÖÅÎÉÑ
#endif
}
  TASKPARM;

typedef struct TASKPARMEX      // ğáòáíåôòù ğòéëìáäîïê úáäáşé
{
  long int    Language;        // ëÏÄ ÑÚÙËÁ ÄÉÁÌÏÇÏ× (1 - ENGLISH,
                               // 2 - RUSSIAN, ...)
  HINSTANCE   Resource;        // íÏÄÕÌØ ÒÅÓÕÒÓÏ× ĞÒÉÌÏÖÅÎÉÑ
  const char* HelpName;        // ğÏÌÎÏÅ ÉÍÑ ÆÁÊÌÁ ".hlp"
  const char* IniName;         // ğÏÌÎÏÅ ÉÍÑ ÆÁÊÌÁ ".ini" ĞÒÉÌÏÖÅÎÉÑ
  const char* PathShell;       // ëÁÔÁÌÏÇ ĞÒÉÌÏÖÅÎÉÑ (exe,dll,...)
  const char* ApplicationName; // éÍÑ ĞÒÉÌÏÖÅÎÉÑ
#ifdef WIN32API
  HWND        Handle;          // éÄÅÎÔÉÆÉËÁÔÏÒ ÇÌÁ×ÎÏÇÏ ÏËÎÁ ĞÒÉÌÏÖÅÎÉÑ
#else
  MSGHANDLER  Handle;          // éÄÅÎÔÉÆÉËÁÔÏÒ ÏÂÒÁÂÏÔŞÉËÁ ËÏÍÁÎÄ ÇÌÁ×ÎÏÇÏ ÏËÎÁ ĞÒÉÌÏÖÅÎÉÑ
#endif
  HWND        DocHandle;       // éÄÅÎÔÉÆÉËÁÔÏÒ ÏËÎÁ ËÁÒÔÙ (ÄÏËÕÍÅÎÔÁ)
  long int    StayOnTop;       // ğÒÉÚÎÁË ×ÙÓÔÁ×ÌÅÎÉÑ ÆÏÒÍÅ Ó×ÏÊÓÔ×Á StayOnTop  
}
  TASKPARMEX;

// --------------------------------------------------------------
//  óÔÒÕËÔÕÒÙ ÄÌÑ ×ÚÁÉÍÏÄÅÊÓÔ×ÉÑ Ó çéó-ÓÅÒ×ÅÒÏÍ
// --------------------------------------------------------------

#define HOSTALIAS "HOST#"
#define HOSTSIZE 5

#define MAPALIAS "ALIAS#"
#define ALIASSIZE 6

typedef struct TMCUSERPARM  // ğáòáíåôòù ğïìøúï÷áôåìñ
{
  char Name[32];            // éÍÑ (ëÏÄÉÒÏ×ËÁ ANSI)
  char Password[64];        // ğÁÒÏÌØ
}
  TMCUSERPARM;

typedef struct TMCMAPLISTITEM
{
  unsigned int Level;      // õÒÏ×ÅÎØ ×ÌÏÖÅÎÎÏÓÔÉ ÜÌÅÍÅÎÔÁ Ó 1 ÄÏ MaxLevel    // 26/03/12
  unsigned int Flags;      // æÌÁÇ ÒÅÄÁËÔÉÒÏ×ÁÎÉÑ 0 - ÎÅÔ ĞÒÁ× ÒÅÄÁËÔÉÒÏ×ÁÔØ
  unsigned int Type;       // ôÉĞ ÆÁÊÌÁ MAPFILES ÉÌÉ 0 ÄÌÑ ĞÒÏÍÅÖÕÔÏŞÎÏÇÏ ÕÒÏ×ÎÑ
  unsigned int Reserve;    // òÅÚÅÒ×
  char Name[256];           // éÍÑ ÜÌÅÍÅÎÔÁ (áÌÉÁÓ)
}
  TMCMAPLISTITEM;

typedef struct TMCMAPLIST   // óğéóïë äïóôõğîùè ëáòô
{
  TMCMAPLIST() { Init(); }

  void Init() {  Ident = 0x7F7F7F7F; Length = sizeof(TMCMAPLIST);
                 Count = 0; MaxLevel = 1; }

  int Ident;           // éÄÅÎÔÉÆÉËÁÔÏÒÁ ÚÁĞÉÓÉ 0x7F7F7F7F                         // 26/03/12
  int Length;          // ïÂİÁÑ ÄÌÉÎÁ ÚÁĞÉÓÉ
  int Count;           // şÉÓÌÏ ÜÌÅÍÅÎÔÏ× × ÓĞÉÓËÅ
  int MaxLevel;        // íÁËÓÉÍÁÌØÎÙÊ ÕÒÏ×ÅÎØ ×ÌÏÖÅÎÎÏÓÔÉ ÜÌÅÍÅÎÔÏ× (ÄÅÒÅ×Ï)
  TMCMAPLISTITEM Item[1];   // íÁÓÓÉ× ÜÌÅÍÅÎÔÏ× ÓĞÉÓËÁ ÄÏÓÔÕĞÎÙÈ ËÁÒÔ (× ËÏÌÉŞÅÓÔ×Å Count)
}
  TMCMAPLIST;

// --------------------------------------------------------------
// ÷ÙÄÁÔØ ÓÏÏÂİÅÎÉÅ ÏÂ ÏÛÉÂËÅ
// code - ËÏÄ ÏÛÉÂËÉ (ÓÍ. MAPERR.RH)
// --------------------------------------------------------------
extern "C"
{
  void _MAPAPI ErrorMessage(int code,const char * filename);
}

enum MESSAGETYPE
{
  MT_INFO     = 0,    // éÎÆÏÒÍÁÃÉÏÎÎÏÅ ÓÏÏÂİÅÎÉÅ
  MT_ERROR    = 1,    // óÏÏÂİÅÎÉÅ ÏÂ ÏÛÉÂËÅ
  MT_WARNING  = 2,    // éÎÆÏÒÍÁÃÉÏÎÎÏÅ ÓÏÏÂİÅÎÉÅ
  MT_CONTINUE = 4,    // ğÒÏÄÏÌÖÅÎÉÅ ĞÒÅÄÙÄÕİÅÇÏ ÓÏÏÂİÅÎÉÑ
                      // (ÎÁ ÔÏÊ ÖÅ ÓÔÒÏËÅ)
};

// --------------------------------------------------------------
// ïĞÉÓÁÎÉÅ ÓÔÒÕËÔÕÒ ÄÌÑ ÒÁÂÏÔÙ Ó ÍÅÎÀ
// --------------------------------------------------------------

#define MENUEXTENDIDENT   0x7FFF7FFF

typedef struct MENUEXTEND         // ïğéóáîéå òáúäåìá íåîà
{
  long int Ident;                 // íÅÔËÁ ÎÁŞÁÌÁ ÚÁĞÉÓÉ 0x7FFF7FFF
  long int Count;                 // şÉÓÌÏ ĞÕÎËÔÏ× ÍÅÎÀ
  struct
  {
   long int Command;              // éÄÅÎÔÉÆÉËÁÔÏÒ ËÏÍÁÎÄÙ (-1 ÄÌÑ ÒÁÚÄÅÌÉÔÅÌÑ)
   long int Check;                // ğÒÉÚÎÁË ×ÙÄÅÌÅÎÉÑ ĞÕÎËÔÁ ÇÁÌÏŞËÏÊ (0/1)
   char     Text[32];             // ôÅËÓÔ ÓÔÒÏËÉ ÍÅÎÀ
  }
   Item[32];
}
  MENUEXTEND;

typedef struct COMMANDENABLER     // úáğòïó óïóôïñîéñ ğõîëôá íåîà éìé ëîïğëé
{
  long int     Command;           // éÄÅÎÔÉÆÉËÁÔÏÒ ËÏÍÁÎÄÙ (-1 ÄÌÑ ÒÁÚÄÅÌÉÔÅÌÑ)
  long int     Enable;            // ğÒÉÚÎÁË ÁËÔÉ×ÎÏÓÔÉ
  long int     Check;             // ğÒÉÚÎÁË ×ÙÓÔÁ×ÌÅÎÉÑ "ÇÁÌÏŞËÉ" - 1, ÓÎÑÔÉÑ - 0
  MENUEXTEND * Menu;              // òÁÚÄÅÌ ÍÅÎÀ, ËÏÔÏÒÙÊ ÄÏÂÁ×ÌÑÅÔÓÑ ÚÁ ÔÅËÕİÉÍ
  char         Text[256];         // îÏ×ÙÊ ÔÅËÓÔ ĞÕÎËÔÁ ÍÅÎÀ
}
  COMMANDENABLER;

typedef struct VIEWHELPEX         // úáğòïó îá ïôïâòáöåîéå HELP (AW_VIEWHELPEX)
{
  const char * HelpName;          // éÍÑ ÆÁÊÌÁ HELP
  long int     Topic;             // îÏÍÅÒ ÒÁÚÄÅÌÁ
}
  VIEWHELPEX;


typedef struct CONTROLMENU        // äïâá÷éôø/õäáìéôø/ïôïâòáúéôø/úáğòïóéôø... ğõîëô çìá÷îïçï íåîà (AW_MENUCONTROL)
{                                 // WPARAM=MC_APEENDMENU,MC_DELETEMENU...,LPARAM=CONTROLMENU*  // 12/01/05
  char Name[32];                  // éÍÑ ĞÕÎËÔÁ ÍÅÎÀ (ÉÄÅÎÔÉÆÉËÁÔÏÒ)
  char Caption[64];               // îÁÚ×ÁÎÉÅ ĞÕÎËÔÁ ÍÅÎÀ (ÏÔÏÂÒÁÖÁÅÔÓÑ ÎÁ ĞÁÎÅÌÉ)      // 23/03/05
  char After[32];                 // éÍÑ ĞÕÎËÔÁ ÍÅÎÀ, ÚÁ ËÏÔÏÒÙÍ ×ÓÔÁ×ÌÑÅÔÓÑ ÄÁÎÎÙÊ ĞÕÎËÔ ("MenuFile","MenuView"...)
}                                 // åÓÌÉ ÒÁ×ÎÏ 0, ÔÏ × ËÏÎÅÃ, ÅÓÌÉ ÓÉÍ×ÏÌ #, ÔÏ ÚÁ ÎÉÍ ĞÏÒÑÄËÏ×ÙÊ ÎÏÍÅÒ Ó 1,
  CONTROLMENU;                    // ËÏÔÏÒÙÍ ÂÕÄÅÔ ÒÁÚÍÅİÅÎ ÄÁÎÎÙÊ ĞÕÎËÔ

typedef struct CONTROLITEM        // äïâá÷éôø/õäáìéôø... ğïäğõîëô çìá÷îïçï íåîà (AW_MENUCONTROL)
{                                 // WPARAM=MC_APPENDMENUITEM..,LPARAM=CONTROLITEM*
  char Name[32];                  // éÍÑ ĞÕÎËÔÁ ÍÅÎÀ (ÉÄÅÎÔÉÆÉËÁÔÏÒ) ("MenuFile","MenuView"...,"MenuTask"...)
  char Caption[64];               // îÁÚ×ÁÎÉÅ ĞÏÄĞÕÎËÔÁ ÍÅÎÀ (ÏÔÏÂÒÁÖÁÅÔÓÑ ÎÁ ĞÁÎÅÌÉ)    // 23/03/05
  long int Item;                  // şÉÓÌÏ×ÏÊ ÉÄÅÎÔÉÆÉËÁÔÏÒ ËÏÍÁÎÄÙ (ĞÏÓÙÌÁÅÔÓÑ ÚÁÄÁŞÅ ĞÒÉ ×ÙÂÏÒÅ ĞÕÎËÔÁ ÍÅÎÀ)
  long int SubItem;               // şÉÓÌÏ×ÏÊ ÉÄÅÎÔÉÆÉËÁÔÏÒ ËÏÍÁÎÄÙ (ĞÏÓÙÌÁÅÔÓÑ ÚÁÄÁŞÅ ĞÒÉ ×ÙÂÏÒÅ ĞÏÄĞÕÎËÔÁ ÍÅÎÀ)
  long int After;                 // éÄÅÎÔÉÆÉËÁÔÏÒ ĞÕÎËÔÁ/ĞÏÄĞÕÎËÔÁ ÚÁ ËÏÔÏÒÙÍ ÄÏÂÁ×ÌÑÅÔÓÑ ĞÕÎËÔ ÍÅÎÀ,
}                                 // 0 - × ËÏÎÃÅ, -1 - × ÎÁŞÁÌÅ, -2 - ×ÔÏÒÙÍ É Ô.Ä.
  CONTROLITEM; 



//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++  ïĞÉÓÁÎÉÅ ÓÔÒÕËÔÕÒ ËÌÁÓÓÉÆÉËÁÔÏÒÁ (RSC)                   +++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ìïëáìéúáãéñ ïâ'åëôá (ôéğ)
enum OBJECT_LOCAL { LOCAL_LINE = 0,  LOCAL_SQUARE = 1, LOCAL_POINT = 2,
                    LOCAL_TITLE = 3, LOCAL_VECTOR = 4, LOCAL_MIXED = 5 };

// îáğòá÷ìåîéå ãéæòï÷áîéñ ïâ'åëôá
enum OBJECT_DIRECT
{
   OD_UNDEFINED = 1,     // ÷ÄÏÌØ ËÏÎÔÕÒÁ ÉÌÉ ĞÒÏÉÚ×ÏÌØÎÏ
   OD_RIGHT     = 2,     // ïÂßÅËÔ ÓĞÒÁ×Á ÏÔ ËÏÎÔÕÒÁ 
   OD_LEFT      = 4,     // ïÂßÅËÔ ÓÌÅ×Á ÏÔ ËÏÎÔÕÒÁ
   OD_CLOCKWISE = 5,     // ÷ÓÅ ŞÁÓÔÉ ËÏÎÔÕÒÁ ÏÂßÅËÔÁ ÃÉÆÒÕÀÔÓÑ ĞÏ ŞÁÓÏ×ÏÊ ÓÔÒÅÌËÅ  //23/01/12
   OD_ANTICLOCKWISE = 6, // ÷ÓÅ ŞÁÓÔÉ ËÏÎÔÕÒÁ ÏÂßÅËÔÁ ÃÉÆÒÕÀÔÓÑ ĞÒÏÔÉ× ŞÁÓÏ×ÏÊ ÓÔÒÅÌËÉ  
};

// òåöéíù úáíùëáîéñ ïâ'åëôá      //01/03/01

enum { ABR_APPEND   = 0,  // äÏÂÁ×ÉÔØ ÔÏŞËÕ × ËÏÎÃÅ ÏÂßÅËÔÁ
                            // ÎÅ ÄÏÂÁ×ÌÑÅÔ, ÅÓÌÉ ÏÂßÅËÔ ÚÁÍËÎÕÔ
       ABR_LAST     = 1,  // ïÂÎÏ×ÉÔØ ĞÏÓÌÅÄÎÀÀ ÔÏŞËÕ
       ABR_FIRST    = 2,  // ïÂÎÏ×ÉÔØ ĞÅÒ×ÕÀ ÔÏŞËÕ
       ABR_ADDLAST  = 3,  // äÏÂÁ×ÉÔØ ÔÏŞËÕ × ËÏÎÃÅ ÏÂßÅËÔÁ
       ABR_ADDFIRST = 4   // äÏÂÁ×ÉÔØ ĞÅÒ×ÕÀ ÔÏŞËÕ
     };

#define  OTHERSCALERSC  10000L
#define  MAXSCALERSC  40000000L

// óôòõëôõòá äìñ óïúäáîéñ ëìáóóéæéëáôïòá
typedef struct RSCCREATE
{
  char Name[32]; // îÁÚ×ÁÎÉÅ ËÌÁÓÓÉÆÉËÁÔÏÒÁ
  char Type[32]; // ôÉĞ ËÌÁÓÓÉÆÉËÁÔÏÒÁ
  char Code[8];  // ëÏÄ ËÌÁÓÓÉÆÉËÁÔÏÒÁ
  long Scale;    // úÎÁÍÅÎÁÔÅÌØ ÍÁÓÛÔÁÂÁ
  long Language; // ñÚÙË (MAPAPILANGUAGE)
}
  RSCCREATE;

typedef struct RSCCREATEUN
{
  WCHAR Name[32]; // îÁÚ×ÁÎÉÅ ËÌÁÓÓÉÆÉËÁÔÏÒÁ × UNICODE
  WCHAR Type[32]; // ôÉĞ ËÌÁÓÓÉÆÉËÁÔÏÒÁ × UNICODE
  WCHAR Code[8];  // ëÏÄ ËÌÁÓÓÉÆÉËÁÔÏÒÁ × UNICODE
  long Scale;     // úÎÁÍÅÎÁÔÅÌØ ÍÁÓÛÔÁÂÁ
  long Language;  // ñÚÙË (MAPAPILANGUAGE)
}
  RSCCREATEUN;

// ïğéóáîéå ïâ'åëôï÷
typedef struct RSCOBJECT
{
   unsigned long Length   ; // òáúíåò óôòõëôõòù
   unsigned long Code     ; // ëìáóóéæéëáãéïîîùê ëïä
   unsigned long Local    ; // èáòáëôåò ìïëáìéúáãéé  (OBJECT_LOCAL)
   unsigned long Segment  ; // î0íåò óìïñ ( îå âïìåå 255)
   unsigned long Scale    ; // 1 - ïâ'åëô íáóûôáâéòõåôóñ
                            // 0 - ïâ'åëô îå íáóûôáâéòõåôóñ
   unsigned long Direct   ; // îáğòá÷ìåîéå ãéæòï÷áîéñ ïâ'åëôá (OBJECT_DIRECT)
   unsigned long Bot      ; // îéöîññ çòáîéãá ÷éäéíïóôé (úîáíåîáôåìø íáóûôáâá)
   unsigned long Top      ; // ÷åòèîññ çòáîéãá ÷éäéíïóôé (úîáíåîáôåìø íáóûôáâá)
   unsigned char Name[32] ; // îáú÷áîéå ( îå âïìåå 30)
}
   RSCOBJECT;

typedef struct RSCOBJECTEX                              // 02/04/03
{
   unsigned long Length   ; // òáúíåò óôòõëôõòù
   unsigned long Code     ; // ëìáóóéæéëáãéïîîùê ëïä
   unsigned long Local    ; // èáòáëôåò ìïëáìéúáãéé  (OBJECT_LOCAL)
   unsigned long Segment  ; // î0íåò óìïñ ( îå âïìåå 255)
   unsigned long Scale    ; // 1 - ïâ'åëô íáóûôáâéòõåôóñ
                            // 0 - ïâ'åëô îå íáóûôáâéòõåôóñ
   unsigned long Direct   ; // îáğòá÷ìåîéå ãéæòï÷áîéñ ïâ'åëôá (OBJECT_DIRECT)
   unsigned long Bot      ; // îéöîññ çòáîéãá ÷éäéíïóôé (úîáíåîáôåìø íáóûôáâá)
   unsigned long Top      ; // ÷åòèîññ çòáîéãá ÷éäéíïóôé (úîáíåîáôåìø íáóûôáâá)
   unsigned char Name[32] ; // îáú÷áîéå
   unsigned char Key [32] ; // õîéëáìøîùê óéí÷ïìøîùê ëìàş ïâÿåëôá
}
   RSCOBJECTEX;


// ïğéóáîéå óìïå÷
typedef struct RSCSEGMENT
{
   unsigned long Order;     // ğïòñäïë ÷ù÷ïäá óìïñ îá ğåşáôø
   unsigned char Name[32];  // îáú÷áîéå ( îå âïìåå 30)
}
   RSCSEGMENT;

// ïğéóáîéå óåíáîôéëé
typedef struct RSCSEMANTICEX  // òáóûéòåîîïå ïğéóáîéå óåíáîôéşåóëïê
                              // èáòáëôåòéóôéëé ïâ'åëôá
{
  long int Code;         // ×ÎÅÛÎÉÊ ËÏÄ
  long int Type;         // ÔÉĞ ÚÎÁŞÅÎÉÑ
  long int Reply;        // ÒÁÚÒÅÛÁÅÔÓÑ ĞÏ×ÔÏÒÅÎÉÅ (1)
  long int Enable;       // ÄÏĞÕÓÔÉÍÁÑ(1),ÏÂÑÚÁÔÅÌØÎÁÑ(2)
                         // (ĞÒÉ ÓÏÚÄÁÎÉÉ ÓÅÍÁÎÔÉËÉ ĞÏÌÅ ÎÅ ÕŞÉÔÙ×ÁÅÔÓÑ)
  long int Service;      // ÓÌÕÖÅÂÎÁÑ,ÄÏĞÕÓÔÉÍÁ ÄÌÑ ×ÓÅÈ ÏÂßÅËÔÏ× (1)
  long int Reserv;       // ÒÅÚÅÒ× (ÄÏÌÖÅÎ ÂÙÔØ ÒÁ×ÅÎ 0)
  char     Name[32];     // ÎÁÚ×ÁÎÉÅ ÈÁÒÁËÔÅÒÉÓÔÉËÉ
  char     Unit[8];      // ÅÄÉÎÉÃÁ ÉÚÍÅÒÅÎÉÑ
  double   Minimum;      // ÍÉÎÉÍÁÌØÎÏÅ ÚÎÁŞÅÎÉÅ
  double   Default;      // ÕÍÁÌŞÉ×ÁÅÍÏÅ ÚÎÁŞÅÎÉÅ
  double   Maximum;      // ÍÁËÓÉÍÁÌØÎÏÅ ÚÎÁŞÅÎÉÅ
  long int Size;         // ÏÂİÉÊ ÒÁÚÍÅÒ ĞÏÌÑ ÚÎÁŞÅÎÉÑ ÓÅÍÁÎÔÉËÉ
  long int Decimal;      // ÔÏŞÎÏÓÔØ ĞÏÌÑ ÚÎÁŞÅÎÉÑ ÓÅÍÁÎÔÉËÉ
  char     ShortName[16];// ËÏÒÏÔËÏÅ ÉÍÑ ÓÅÍÁÎÔÉËÉ (Ó×ÑÚØ Ó ĞÏÌÅÍ âä)
}
  RSCSEMANTICEX;

enum FRAMEINCODE                   // 06/04/06
{
   FIRSTSERVEXCODE  = 1000000000l, // îÁŞÁÌÏ ×ÎÅÛÎÉÈ ËÏÄÏ× ÓÌÕÖÅÂÎÙÈ
   LINESERVEXCODE   = 1000000001l, // ÷ÎÅÛÎÉÊ ËÏÄ ÓÌÕÖÅÂÎÏÇÏ ÌÉÎÅÊÎÏÇÏ
   LINESERVINCODE   = 1          , // ÷ÎÕÔÒÅÎÎÉÊ ËÏÄ ÓÌÕÖÅÂÎÏÇÏ ÌÉÎÅÊÎÏÇÏ
   SQUARESERVEXCODE = 1000000002l, // ÷ÎÅÛÎÉÊ ËÏÄ ÓÌÕÖÅÂÎÏÇÏ ĞÌÏİÁÄÎÏÇÏ
   SQUARESERVINCODE = 2          , // ÷ÎÕÔÒÅÎÎÉÊ ËÏÄ ÓÌÕÖÅÂÎÏÇÏ ĞÌÏİÁÄÎÏÇÏ
   POINTSERVEXCODE  = 1000000003l, // ÷ÎÅÛÎÉÊ ËÏÄ ÓÌÕÖÅÂÎÏÇÏ  ÔÏŞÅŞÎÏÇÏ
   POINTSERVINCODE  = 3          , // ÷ÎÕÔÒÅÎÎÉÊ ËÏÄ ÓÌÕÖÅÂÎÏÇÏ ÔÏŞÅŞÎÏÇÏ
   TEXTSERVEXCODE   = 1000000004l, // ÷ÎÅÛÎÉÊ ËÏÄ ÓÌÕÖÅÂÎÏÇÏ ÔÅËÓÔÁ
   TEXTSERVINCODE   = 4          , // ÷ÎÕÔÒÅÎÎÉÊ ËÏÄ ÓÌÕÖÅÂÎÏÇÏ ÔÅËÓÔÁ
   VECTSERVEXCODE   = 1000000005l, // ÷ÎÅÛÎÉÊ ËÏÄ ÓÌÕÖÅÂÎÏÇÏ ×ÅËÔÏÒÎÏÇÏ
   VECTSERVINCODE   = 5          , // ÷ÎÕÔÒÅÎÎÉÊ ËÏÄ ÓÌÕÖÅÂÎÏÇÏ ×ÅËÔÏÒÎÏÇÏ
   COMSERVEXCODE    = 1000000006l, // ÷ÎÅÛÎÉÊ ËÏÄ ÓÌÕÖÅÂÎÏÇÏ ÛÁÂÌÏÎÁ
   COMSERVINCODE    = 6          , // ÷ÎÕÔÒÅÎÎÉÊ ËÏÄ ÓÌÕÖÅÂÎÏÇÏ ÛÁÂÌÏÎÁ
   SERVOBJECT       = 15         , // ëÏÌÉŞÅÓÔ×Ï ÓÌÕÖÅÂÎÙÈ ÏÂßÅËÔÏ×
};

enum SEMTYPE           // ôéğù úîáşåîéñ óåíáîôéëé
{
   TUNDEFINED = -1,    // úÎÁŞÅÎÉÅ ÎÅ ÕÓÔÁÎÏ×ÌÅÎÏ
   TSTRING    = 0,     // óÉÍ×ÏÌØÎÁÑ ÓÔÒÏËÁ
   TNUMBER    = 1,     // şÉÓÌÏ×ÏÅ ÚÎÁŞÅÎÉÅ
   TANYFILE   = 9,     // éÍÑ ÆÁÊÌÁ ÚÁÒÅÇÉÓÔÒÉÒÏ×ÁÎÎÏÇÏ ÔÉĞÁ
   TBMPFILE   = 10,    // éÍÑ ÆÁÊÌÁ BMP
   TOLEFILE   = 11,    // éÍÑ ÆÁÊÌÁ,ÏÂÒÁÂÁÔÙ×ÁÅÍÏÇÏ OLE-ÓÅÒ×ÅÒÏÍ
   TREFER     = 12,    // óÓÙÌËÁ ÎÁ ĞÒÏÉÚ×ÏÌØÎÙÊ ÏÂßÅËÔ ËÁÒÔÙ
                       // (ÕÎÉËÁÌØÎÙÊ ÎÏÍÅÒ ÏÂßÅËÔÁ)
   TMAPFILE   = 13,    // éÍÑ ÆÁÊÌÁ-ĞÁÓĞÏÒÔÁ ÒÁÊÏÎÁ
   TTXTFILE   = 14,    // éÍÑ ÔÅËÓÔÏ×ÏÇÏ ÆÁÊÌÁ
   TPCXFILE   = 15,    // éÍÑ ÆÁÊÌÁ PCX
   TCODE      = 16,    // úÎÁŞÅÎÉÅ × ×ÉÄÅ ŞÉÓÌÏ×ÏÇÏ ËÏÄÁ
                       // ÉÚ ËÌÁÓÓÉÆÉËÁÔÏÒÁ ÚÎÁŞÅÎÉÊ
   TDATE      = 17,    // úÎÁŞÅÎÉÅ ÄÁÔÙ × ŞÉÓÌÏ×ÏÍ ×ÉÄÅ (ççççííää)
   TANGLE     = 18,    // õÇÌÏ×ÁÑ ×ÅÌÉŞÉÎÁ × ÒÁÄÉÁÎÁÈ
   TTIME      = 19,    // úÎÁŞÅÎÉÅ ×ÒÅÍÅÎÉ × ŞÉÓÌÏ×ÏÍ ×ÉÄÅ (şşííóó)
   TFONT      = 20,    // éÍÑ ÛÒÉÆÔÁ ("Arial", "Courier"...)
   TCOLOR     = 21,    // şÉÓÌÏ×ÏÅ ÚÎÁŞÅÎÉÅ Ã×ÅÔÁ × RGB
   TLAST      = 21     // ÷åòèîññ çòáîéãá óğéóëá ëïäï÷
};

// úáòåúåò÷éòï÷áîîùå ëïäù óåíáîôéşåóëéè èáòáëôåòéóôéë,
// ÷ìéñàıéå îá ÷éä úîáëá                                     // 22/03/04
// ---------------------------------------------------
#define EXTSEMANTIC        31001  // îáşáìï äéáğáúïîá óåò÷éóîùè óåíáîôéë
#define SEMIMAGESCALE      31001  // íáóûôáâ ïôïâòáöåîéñ úîáëá ÷ ğòïãåîôáè
#define SEMIMAGECOLOR      31002  // ã÷åô ïôïâòáöåîéñ úîáëá RGB
#define SEMIMAGEHIGHT      31003  // ÷ùóïôá ûòéæôá          // 24/09/04
#define SEMIMAGEFONT       31004  // îáú÷áîéå ûòéæôá        // 11/05/05
#define SEMIMAGETHICK      31005  // ôïìıéîá ìéîéé ÷ íí            // 05/05/06
#define SEMIMAGETHICK2     31006  // ôïìıéîá ïëïîşáîéñ ìéîéé ÷ íí  // 05/05/06
#define SEMCOLORWEIGHT     31007  // ÷åó ã÷åôá ïâÿåëôá ÷ ğòïãåîôáè // 25/12/08
#define EXTSEMANTICEND     31007  // ëïîåã äéáğáúïîá

// úáòåúåò÷éòï÷áîîùå ëïäù óåíáîôéşåóëéè èáòáëôåòéóôéë,
// äìñ áäòåóá                                                 // 14/02/08
// ---------------------------------------------------
#define ADRSEMANTIC        31201  // îáşáìï äéáğáúïîá áäòåóîùè óåíáîôéë
#define SEMADRSTREET       31201  // îáú÷áîéå õìéãù
#define SEMADRHOUSE        31202  // îïíåò äïíá
#define SEMADRTRUNK        31203  // îïíåò ëïòğõóá
#define SEMADRBUILD        31204  // îïíåò óôòïåîéñ
#define SEMADRESTATE       31205  // îïíåò ÷ìáäåîéñ
#define SEMADRSTREETCODE   31206  // ëïä õìéãù
#define SEMADRTOWN         31207  // îáú÷áîéå çïòïäá (îáóåìåîîïçï ğõîëôá)
#define SEMADRTOWNCODE     31208  // ëïä çïòïäá (îáóåìåîîïçï ğõîëôá) ğï ïëáôï
#define SEMADRPOSTCODE     31209  // ğïşôï÷ùê éîäåëó          // 12/03/09
#define ADRSEMANTICEND     31209  // ëïîåã äéáğáúïîá

// úáòåúåò÷éòï÷áîîùå ëïäù óåíáîôéşåóëéè èáòáëôåòéóôéë
// ---------------------------------------------------
#define OBJEXCODEINSEMANTIC 32800  // ëìáóóéæéëáãéïîîùê ëïä ïâ'åëôá
#define SEMOBJEXCODE        32800  // ëìáóóéæéëáãéïîîùê ëïä ïâ'åëôá

#define GROUPLEADER         32801  // ğòéúîáë ïâ'åëôá, éíåàıåçï óóùìëõ
#define SEMGROUPLEADER      32801  // îá ğïäşéîåîîùê ïâ'åëô

#define GROUPSLAVE          32802  // ğòéúîáë ïâ'åëôá, îá ëïôïòùê
#define SEMGROUPSLAVE       32802  // éíååôóñ óóùìëá ïô çìá÷îïçï ïâ'åëôá;

#define GROUPPARTNER        32803  // ğòéúîáë ïâ'åëôá, ÷èïäñıåçï
#define SEMGROUPPARTNER     32803  // ÷ çòõğğõ òá÷îïğòá÷îùè ïâ'åëôï÷

#define SEMOBJECTTOTEXT     32804  // óóùìëá îá ğïäğéóø ïô ïâ'åëôá
                                   // (îïíåò ïóîï÷îïçï ïâÿåëôá)
#define SEMOBJECTFROMTEXT   32805  // óóùìëá îá ïâ'åëô ïô ğïäğéóé
                                   // (îïíåò ïâÿåëôá-ğïäğéóø)

#define SEMRSCNAME          32809  // éíñ æáêìá ëìáóóéæéëáôïòá RSC   // 16/02/10
#define SEMLAYERSHORTNAME   32810  // ëïòïôëïå éíñ óìïñ ïâ'åëôá
#define SEMOBJECTSHORTNAME  32811  // ëïòïôëïå éíñ ïâ'åëôá (ëìàş)
#define SEMOBJECTIDENT      32812  // éäåîôéæéëáôïò ïâÿåëôá     // 13/01/12


// óìõöåâîùå óåíáîôéëé îå òåäáëôéòõàôóñ !
#define SEMHIDEFIRST        32800  // îáşáìï äéáğáúïîá óìõöåâîùè óåíáîôéë
#define SEMHIDELAST         32800  // ëïîåã  äéáğáúïîá óìõöåâîùè óåíáîôéë  // 02/08/11

#define SEMLONWGS84         32201  // çåïäåúéşåóëáñ ëïïòäéîáôá ğï äïìçïôå ÷ çòáäõóáè îá WGS-84
#define SEMLATWGS84         32202  // çåïäåúéşåóëáñ ëïïòäéîáôá ğï ûéòïôå ÷ çòáäõóáè îá WGS-84

#define SEMOBJECTDATE       32850  // äáôá óïúäáîéñ ïâ'åëôá
#define SEMOBJECTTIME       32851  // ÷òåíñ óïúäáîéñ ïâ'åëôá
#define SEMOBJECTAUTHOR     32852  // éíñ ïğåòáôïòá
#define SEMOBJECTREDATE     32853  // äáôá ïâîï÷ìåîéñ ïâ'åëôá        // 17/09/09
#define SEMOBJECTRETIME     32854  // ÷òåíñ ïâîï÷ìåîéñ ïâ'åëôá
#define SEMOBJECTREAUTHOR   32855  // éíñ ïğåòáôïòá ïâîï÷ìåîéñ

// DATUM PARAMETERS
#define SEMDATUMDX          32871  // óä÷éç ğï X
#define SEMDATUMDY          32872  // óä÷éç ğï Y
#define SEMDATUMDZ          32873  // óä÷éç ğï Z
#define SEMDATUMRX          32874  // ğï÷ïòïô ğï X
#define SEMDATUMRY          32875  // ğï÷ïòïô ğï Y
#define SEMDATUMRZ          32876  // ğï÷ïòïô ğï Z
#define SEMDATUMM           32877  // íáóûôáâîùê üìåíåîô
#define SEMDATUMTYPE        32878  // ôéğ ğòåïâòáúï÷áîéñ (0, 3, 7, 14)

// USER ELLIPSOID PARAMETERS
#define SEMUSELLAXIS        32880  // SEMIMAJORAXIS
#define SEMUSELLINFL        32881  // INVERSEFLATTENING

// úáòåúåò÷éòï÷áîîùå ëïäù óåíáîôéşåóëéè èáòáëôåòéóôéë,
// äìñ çòáæï÷                                                 // 23/04/08
// ---------------------------------------------------

#define SEMNETRIB           32812  // îÏÍÅÒ ÏÂßÅËÔÁ-ÒÅÂÒÁ (ÄÌÑ ÕÚÌÁ)
#define SEMNETKNOTFIRST     32813  // îÏÍÅÒ ÏÂßÅËÔÁ-ÕÚÌÁ ĞÅÒ×ÏÊ ÔÏŞËÉ (ÄÌÑ ÒÅÂÒÁ)
#define SEMNETKNOTLAST      32814  // îÏÍÅÒ ÏÂßÅËÔÁ-ÕÚÌÁ ĞÏÓÌÅÄÎÅÊ ÔÏŞËÉ (ÄÌÑ ÒÅÂÒÁ)
#define SEMNETNUMBER        32815  // îÏÍÅÒ ÓÅÔÉ
#define SEMNETTOOBJECT      32816  // óÓÙÌËÁ ÎÁ ÏÂßÅËÔ ÌÉÓÔÁ
#define SEMNETVDIRECT       32817  // óËÏÒÏÓÔØ ĞÒÑÍÁÑ (ÄÌÑ ÒÅÂÒÁ)
#define SEMNETVUNDIRECT     32818  // óËÏÒÏÓÔØ ÏÂÒÁÔÎÁÑ (ÄÌÑ ÒÅÂÒÁ)
#define SEMNETCOSTRIB       32819  // óÔÏÉÍÏÓÔØ ÒÅÂÒÁ
#define SEMNETRANKRIB       32820  // òÁÎÇ ÒÅÂÒÁ
#define SEMNETBAN           32821  // îÏÍÅÒ ÒÅÂÒÁ, ÎÁ ËÏÔÏÒÙÊ ÚÁĞÒÅİÅÎ ĞÅÒÅÈÏÄ (ÅÓÌÉ ÒÅÂÒÁ ÓÏÅÄÉÎÅÎÙ × ÏÄÎÏÍ ÕÚÌÅ)
#define SEMNETTURN          32822  // ğÒÉÚÎÁË ÚÁĞÒÅÔÁ ÒÁÚ×ÏÒÏÔÁ (1-× ÎÁŞÁÌÅ ÒÅÂÒÁ,2-× ËÏÎÃÅ,3-× ÎÁŞÁÌÅ É × ËÏÎÃÅ)
#define SEMSELFID           32823  // óÏÂÓÔ×ÅÎÎÙÊ ÉÄÅÎÔÉÆÉËÁÔÏÒ ÏßÅËÔÁ GDF
#define SEMNETCOSTRIBBACK   32824  // óÔÏÉÍÏÓÔØ ÒÅÂÒÁ ÏÂÒÁÔÎÁÑ
#define SEMNETRANKRIBBACK   32825  // òÁÎÇ ÒÅÂÒÁ ÏÂÒÁÔÎÙÊ

// úÁĞÒÅÔ ĞÅÒÅÈÏÄÁ ÄÌÑ ÓÌÕŞÁÑ ËÏÇÄÁ, ÒÅÂÒÁ ÓÏÅÄÉÎÑÀÔÓÑ × Ä×ÕÈ ÕÚÌÁÈ - × ÎÁŞÁÌÅ É × ËÏÎÃÅ         // 18/10/10
#define SEMNETBANBEGIN      32826  // îÏÍÅÒ ÒÅÂÒÁ, ÎÁ ËÏÔÏÒÙÊ ÚÁĞÒÅİÅÎ ĞÅÒÅÈÏÄ ÉÚ ÎÁŞÁÌÁ ÒÅÂÒÁ
#define SEMNETBANEND        32827  // îÏÍÅÒ ÒÅÂÒÁ, ÎÁ ËÏÔÏÒÙÊ ÚÁĞÒÅİÅÎ ĞÅÒÅÈÏÄ ÉÚ ËÏÎÃÁ ÒÅÂÒÁ


#define SEMSERVICEFIRST     32800  // îáşáìï äéáğáúïîá óğåãéáìøîùè óåíáîôéë
#define SEMSERVICELAST      33000  // ëïîåã  äéáğáúïîá óğåãéáìøîùè óåíáîôéë

#define SHEETFRAMEINCODE    15l       // ÷îõôòåîîéê ëïä òáíëé ìéóôá  05/02/02
#define SHEETFRAMEEXCODE    91000000l // ÷îåûîéê ëïä òáíëé ìéóôá

enum SEMANTIC_FOR_OBJECT   // éÓĞÏÌØÚÏ×ÁÎÉÅ ÓÅÍÁÎÔÉËÉ ÄÌÑ ÏÂßÅËÔÏ×
{
  NONE_SEMANTIC     = 0,   // ÎÅ ÉÓĞÏÌØÚÕÅÔÓÑ
  POSSIBLE_SEMANTIC = 1,   // ×ÏÚÍÏÖÎÁÑ
  MUST_SEMANTIC     = 2,   // ÏÂÑÚÁÔÅÌØÎÁÑ
  IMAGE_SEMANTIC    = 3,   // ×ÌÉÑÅÔ ÎÁ ×ÉÄ ÏÔÏÂÒÁÖÅÎÉÑ
  ALL_SEMANTIC      = 4    // ×ÓÅ ÓÅÍÁÎÔÉËÉ
};


// ïğéóáîéå éóğïìøúï÷áîéñ óåíáîôéëé äìñ ïâ'åëôï÷
typedef struct APPLYSEMANTIC
{                           // ëïìéşåóô÷ï ïâ'åëôï÷,éóğïìøúõàıéè óåíáîôéëõ
  long Possible;            // ëáë ïâñúáôåìøîõà
  long Must;                // ëáë ÷ïúíïöîõà
  long Image;               // óåíáîôéëá éóğïìøúõåôóñ äìñ éúíåîåîéñ ÷éäá
}
  APPLYSEMANTIC;

// ïğéóáîéå ûòéæôá
typedef struct RSCFONT
{
  char    Font[32];     // îáú÷áîéå
  char    Name[32];     // õóìï÷îïå îáú÷áîéå
  long    CharSet ;     // ëïäï÷áñ óôòáîéãá
}
  RSCFONT;

// ïğéóáîéå ğïäğéóé ïâ åëôá ğï úîáşåîéà óåíáîôéëé ("íåôëá ïâ'åëôá")
typedef struct RSCRELATION                                 // 01/11/01
{
  unsigned long  ObjectCode   ; // ÷îõôòåîîéê ëïä ğïäğéóé óåíáîôéëé
  unsigned long  SemanticCode ; // ëïä ğïäğéóù÷áåíïê óåíáîôéëé
  char           Prefix[7]    ; // ğïóôïñîîùê ğòåæéëó (ôåëóô) äìñ ğïäğéóé
  char           Decimal      ; // ëïìéşåóô÷ï úîáëï÷ ğïóìå úáğñôïê
}
  RSCRELATION;

// òåöéí ğïéóëá ïâÿåëôï÷ ëìáóóéæéëáôïòá                  // 14/04/06
enum SEEK_RSCOBJECT
{
   SEEK_EXCODE = 1,        // ğïéóë ğï ëïäõ
   SEEK_KEY    = 2,        // ğïéóë ğï ëìàşõ
   SEEK_NAME   = 4,        // ğïéóë ğï éíåîé
};

// ôÉĞÙ Ã×ÅÔÏ×ÏÊ ÍÏÄÅÌÉ ĞÁÌÉÔÒÙ
enum COLORMODEL
{
   MODEL_RGB       = 0,
   MODEL_CMYKINDEX = 1,     // ÏÔÏÂÒÁÖÅÎÉÅ ÉÎÄÅËÓÁÍÉ Ã×ÅÔÏ× CMYK ĞÁÌÉÔÒÙ
   MODEL_CMYKCOLOR = 2,     // ÏÔÏÂÒÁÖÅÎÉÅ Ã×ÅÔÁÍÉ CMYK ĞÁÌÉÔÒÙ
};

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++ ÷óğïíïçáôåìøîùå óôòõëôõòù +++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ïûéâïşîáñ ÷ùóïôá
#define ERRORHEIGHT  -111111.0

// ïûéâïşîáñ íïıîïóôø óìïñ
#define ERRORPOWER   -1111111.0

// ğáòáíåôòù óïúäáîéñ íáôòéãù ÷ùóïô(MTW), íáôòéãù ëáşåóô÷(MTQ), òáóôòá ëáşåóô÷(RSW)
// äÌÑ ÆÕÎËÃÉÊ mapCreateMtw, mapCreateMtq, mapBuildRsw ÄÏÌÖÎÙ ÂÙÔØ ÚÁÄÁÎÙ:
// StructSize, BeginX,BeginY,Width,Height,ElemSizeMeters,ElemSizeBytes,Scale.
// äÌÑ ÆÕÎËÃÉÉ mapCreateMtw ÔÁËÖÅ ÄÏÌÖÎÙ ÂÙÔØ ÚÁÄÁÎÙ: Unit, ReliefType.
typedef struct BUILDMTW
{
  unsigned
  long int StructSize;     // òÁÚÍÅÒ ÄÁÎÎÏÊ ÓÔÒÕËÔÕÒÙ :
                           //  sizeof (BUILDMTW)
  long int Free;           // äÏÌÖÅÎ ÂÙÔØ ÎÏÌØ

  double   BeginX;         // ğÒÑÍÏÕÇÏÌØÎÙÅ ËÏÏÒÄÉÎÁÔÙ ÎÁŞÁÌÁ
  double   BeginY;         // (ÀÇÏ-ÚÁĞÁÄÎÏÇÏ ÕÇÌÁ) ÍÁÔÒÉÃÙ × ÍÅÔÒÁÈ

  double   Width;          // ûÉÒÉÎÁ ÍÁÔÒÉÃÙ × ÍÅÔÒÁÈ
  double   Height;         // ÷ÙÓÏÔÁ ÍÁÔÒÉÃÙ × ÍÅÔÒÁÈ

  double   ElemSizeMeters; // òÁÚÍÅÒ ÓÔÏÒÏÎÙ ÜÌÅÍÅÎÔÁÒÎÏÇÏ ÕŞÁÓÔËÁ
                           // × ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ

  long int ElemSizeBytes;  // PÁÚÍÅÒ ÜÌÅÍÅÎÔÁ ÍÁÔÒÉÃÙ × ÂÁÊÔÁÈ
                           // (ÄÏĞÕÓÔÉÍÙÅ ÚÎÁŞÅÎÉÑ : 1,2,4,8)
                           // ğÒÉ ÓÏÚÄÁÎÉÉ ÍÁÔÒÉÃÙ ×ÙÓÏÔ MTW ĞÏ ×ÅËÔÏÒÎÏÊ ËÁÒÔÅ ÆÕÎËÃÉÅÊ
                           // mapBuildMtw ÚÎÁŞÅÎÉÅ ÄÁÎÎÏÇÏ ĞÏÌÑ ÄÏÌÖÎÏ ÂÙÔØ ÒÁ×ÎÏ 4
                           // úÎÁŞÅÎÉÅ 1 ÓÏÏÔ×ÅÔÓÔ×ÕÅÔ ÔÉĞÕ "unsigned char" (ËÏÄ ÏÔÓÕÔÓÔ×ÉÑ ÄÁÎÎÙÈ = 0)
                           // úÎÁŞÅÎÉÅ 2 ÓÏÏÔ×ÅÔÓÔ×ÕÅÔ ÔÉĞÕ "short int" (ËÏÄ ÏÔÓÕÔÓÔ×ÉÑ ÄÁÎÎÙÈ = -32767)
                           // úÎÁŞÅÎÉÅ 4 ÓÏÏÔ×ÅÔÓÔ×ÕÅÔ ÔÉĞÕ "long int" (ËÏÄ ÏÔÓÕÔÓÔ×ÉÑ ÄÁÎÎÙÈ = -32767000)
                           // úÎÁŞÅÎÉÅ 8 ÓÏÏÔ×ÅÔÓÔ×ÕÅÔ ÔÉĞÕ "double" (ËÏÄ ÏÔÓÕÔÓÔ×ÉÑ ÄÁÎÎÙÈ = -32767000)

  long int Unit;           // EÄÉÎÉÃÁ ÉÚÍÅÒÅÎÉÑ ×ÙÓÏÔÙ ÍÁÔÒÉÃÙ ×ÙÓÏÔ MTW
                           // (0 - ÍÅÔÒÙ, 1 - ÄÅÃÉÍÅÔÒÙ,
                           //  2 - ÓÁÎÔÉÍÅÔÒÙ, 3 - ÍÉÌÌÉÍÅÔÒÙ )

  long int ReliefType;     // ôÉĞ ÍÁÔÒÉÃÙ ×ÙÓÏÔ MTW (0 - ÁÂÓÏÌÀÔÎÙÅ ×ÙÓÏÔÙ,
                           //  1 - ÁÂÓÏÌÀÔÎÙÅ + ÏÔÎÏÓÉÔÅÌØÎÙÅ,
                           //  2 - ÏÔÎÏÓÉÔÅÌØÎÙÅ)

  long int UserType;       // ğÒÏÉÚ×ÏÌØÎÏÅ ŞÉÓÌÏ, Ó×ÑÚÙ×ÁÅÍÏÅ
                           // Ó ÓÏÚÄÁ×ÁÅÍÏÊ ÍÁÔÒÉÃÅÊ

 long int Scale;          // úÎÁÍÅÎÁÔÅÌØ ÍÁÓÛÔÁÂÁ ÓÏÚÄÁ×ÁÅÍÏÊ
                           // ÍÁÔÒÉŞÎÏÊ ËÁÒÔÙ (ĞÒÉ ÓÏÚÄÁÎÉÉ ÍÁÔÒÉÃÙ ×ÙÓÏÔ MTW
                           // ĞÏ ×ÅËÔÏÒÎÏÊ ËÁÒÔÅ ÆÕÎËÃÉÅÊ mapBuildMtw ÚÎÁŞÅÎÉÅ
                           // ÄÁÎÎÏÇÏ ĞÏÌÑ ÂÕÄÅÔ ÚÁÍÅÎÅÎÏ ÎÁ ÚÎÁÍÅÎÁÔÅÌØ
                           // ÍÁÓÛÔÁÂÁ ×ÅËÔÏÒÎÏÊ ËÁÒÔÙ)

  long int HeightSuper;    // æÌÁÇ ÚÁÎÅÓÅÎÉÑ ×ÙÓÏÔÙ × ÜÌÅÍÅÎÔ ĞÒÉ ÓÏÚÄÁÎÉÉ ÍÁÔÒÉÃÙ
                           // ×ÙÓÏÔ MTW ĞÏ ×ÅËÔÏÒÎÏÊ ËÁÒÔÅ ÆÕÎËÃÉÅÊ mapBuildMtw É ĞÒÉ ĞÏĞÁÄÁÎÉÉ
                           // × ÜÌÅÍÅÎÔ ÂÏÌÅÅ ÏÄÎÏÇÏ ÏÂßÅËÔÁ Ó ÁÂÓÏÌÀÔÎÏÊ ×ÙÓÏÔÏÊ :
                           //  0 - ÚÁÎÏÓÉÔØ ÓÒÅÄÎÀÀ ×ÙÓÏÔÕ
                           //  1 - ÚÁÎÏÓÉÔØ ÍÁËÓÉÍÁÌØÎÕÀ ×ÙÓÏÔÕ
                           //  2 - ÚÁÎÏÓÉÔØ ÍÉÎÉÍÁÌØÎÕÀ ×ÙÓÏÔÕ

  long int FastBuilding;   // õóôáòå÷ûåå ğïìå
                           // òÅÖÉÍ ÓÏÚÄÁÎÉÑ ÍÁÔÒÉÃÙ (ĞÒÉ Method = 0) :
                           //  0 - ÓÒÅÄÎÅ×Ú×ÅÛÅÎÎÁÑ ÉÎÔÅÒĞÏÌÑÃÉÑ ĞÏ 16 ÎÁĞÒÁ×ÌÅÎÉÑÍ,
                           //    ÂÅÚ ÆÏÒÍÉÒÏ×ÁÎÉÑ ÌÏËÁÌØÎÙÈ ÜËÓÔÒÅÍÕÍÏ×
                           //  1 - ÓÒÅÄÎÅ×Ú×ÅÛÅÎÎÁÑ ÉÎÔÅÒĞÏÌÑÃÉÑ ĞÏ 8 ÎÁĞÒÁ×ÌÅÎÉÑÍ,
                           //    ÂÅÚ ÆÏÒÍÉÒÏ×ÁÎÉÑ ÌÏËÁÌØÎÙÈ ÜËÓÔÒÅÍÕÍÏ×
                           //  2 - ÓÒÅÄÎÅ×Ú×ÅÛÅÎÎÁÑ ÉÎÔÅÒĞÏÌÑÃÉÑ ĞÏ 16 ÎÁĞÒÁ×ÌÅÎÉÑÍ,
                           //    Ó ÆÏÒÍÉÒÏ×ÁÎÉÅÍ ÌÏËÁÌØÎÙÈ ÜËÓÔÒÅÍÕÍÏ×
                           //  3 - ÓÒÅÄÎÅ×Ú×ÅÛÅÎÎÁÑ ÉÎÔÅÒĞÏÌÑÃÉÑ ĞÏ 8 ÎÁĞÒÁ×ÌÅÎÉÑÍ,
                           //    Ó ÆÏÒÍÉÒÏ×ÁÎÉÅÍ ÌÏËÁÌØÎÙÈ ÜËÓÔÒÅÍÕÍÏ×

 long int Method;    // íÅÔÏÄ ĞÏÓÔÒÏÅÎÉÑ ĞÏ×ÅÒÈÎÏÓÔÉ ĞÒÉ ÓÏÚÄÁÎÉÉ ÍÁÔÒÉÃÙ ×ÙÓÏÔ MTW
                      // ĞÏ ×ÅËÔÏÒÎÏÊ ËÁÒÔÅ ÆÕÎËÃÉÅÊ mapBuildMtw :
                      //  0 - ÍÅÔÏÄ ÏĞÒÅÄÅÌÑÅÔÓÑ ÒÅÖÉÍÏÍ FastBuilding
                      //  1 - ÓÒÅÄÎÅ×Ú×ÅÛÅÎÎÁÑ ÉÎÔÅÒĞÏÌÑÃÉÑ ĞÏ 16 ÎÁĞÒÁ×ÌÅÎÉÑÍ
                      //  2 - ÓÒÅÄÎÅ×Ú×ÅÛÅÎÎÁÑ ÉÎÔÅÒĞÏÌÑÃÉÑ ĞÏ 8 ÎÁĞÒÁ×ÌÅÎÉÑÍ
                      //  3 - ÓÒÅÄÎÅ×Ú×ÅÛÅÎÎÁÑ ÉÎÔÅÒĞÏÌÑÃÉÑ ĞÏ 16 ÎÁĞÒÁ×ÌÅÎÉÑÍ,
                      //      ÓÇÌÁÖÉ×ÁÎÉÅ ĞÏ×ÅÒÈÎÏÓÔÉ
                      //  8 - ÌÉÎÅÊÎÁÑ ÉÎÔÅÒĞÏÌÑÃÉÑ ĞÏ ÓÅÔËÅ ÔÒÅÕÇÏÌØÎÉËÏ×
                      //     (× ÍÅÔÏÄÅ ÉÓĞÏÌØÚÕÀÔÓÑ ÔÏÌØËÏ ÔÏŞÅŞÎÙÅ ÏÂßÅËÔÙ)
                      //  16 - ĞÌÏÓËÁÑ ĞÏ×ÅÒÈÎÏÓÔØ Ó ÎÕÌÅ×ÏÊ ×ÙÓÏÔÏÊ
                      //       ÄÌÑ ReliefType = 2

  long int Extremum;  // æÌÁÇ ÆÏÒÍÉÒÏ×ÁÎÉÑ ÌÏËÁÌØÎÙÈ ÜËÓÔÒÅÍÕÍÏ×
                      //
                      // ÆÕÎËÃÉÅÊ mapBuildMtw (ĞÒÉ Method = 1,2,3) :
                      //  0 - ÌÏËÁÌØÎÙÅ ÜËÓÔÒÅÍÕÍÙ ÎÅ ÆÏÒÍÉÒÕÀÔÓÑ
                      //  1 - ÌÏËÁÌØÎÙÅ ÜËÓÔÒÅÍÕÍÙ ÆÏÒÍÉÒÕÀÔÓÑ

  HOBJ Border;        // éÄÅÎÔÉÆÉËÁÔÏÒ ÚÁÍËÎÕÔÏÇÏ ÏÂßÅËÔÁ ĞÒÉ ÓÏÚÄÁÎÉÉ
                      // ÍÁÔÒÉÃÙ ×ÙÓÏÔ MTW ĞÏ ×ÅËÔÏÒÎÏÊ ËÁÒÔÅ ÆÕÎËÃÉÅÊ mapBuildMtw.
                      // ğÏ ÄÁÎÎÏÍÕ ÏÂßÅËÔÕ ÕÓÔÁÎÁ×ÌÉ×ÁÅÔÓÑ ÒÁÍËÁ ÓÏÚÄÁ×ÁÅÍÏÊ ÍÁÔÒÉÃÙ
                      // (ÅÓÌÉ ÏÂßÅËÔ ÒÁÓĞÏÌÏÖÅÎ ×ÎÅ ÇÁÂÁÒÉÔÏ× ÍÁÔÒÉÃÙ,
                      // ÏĞÒÅÄÅÌÑÅÍÙÈ ÚÎÁŞÅÎÉÑÍÉ ĞÏÌÅÊ BeginX, BeginY, Width, Height
                      // ÄÁÎÎÏÊ ÓÔÒÕËÔÕÒÙ, ÔÏ ÒÁÍËÁ ÎÅ ÕÓÔÁÎÁ×ÌÉ×ÁÅÔÓÑ)

  long int LimitMatrixFrame;
                      // æÌÁÇ ÏÇÒÁÎÉŞÅÎÉÑ ÇÁÂÁÒÉÔÏ× ĞÒÉ ÓÏÚÄÁÎÉÉ ÍÁÔÒÉÃÙ MTW
                      // ĞÏ ×ÅËÔÏÒÎÏÊ ËÁÒÔÅ ÆÕÎËÃÉÅÊ mapBuildMtw ĞÒÉ Method = 1,2,3,8
                      // (ÇÁÂÁÒÉÔÙ ÍÁÔÒÉÃÙ ÏĞÒÅÄÅÌÑÀÔÓÑ ÚÎÁŞÅÎÉÑÍÉ ĞÏÌÅÊ
                      // BeginX, BeginY, Width, Height ÄÁÎÎÏÊ ÓÔÒÕËÔÕÒÙ) :
                      //  0 - ÏÇÒÁÎÉŞÅÎÉÅ ÎÅ ×ÙĞÏÌÎÑÅÔÓÑ
                      //  1 - ÇÁÂÁÒÉÔÙ ÍÁÔÒÉÃÙ ÏÇÒÁÎÉŞÉ×ÁÀÔÓÑ
                      //      ÇÁÂÁÒÉÔÁÍÉ ÒÁÊÏÎÁ
                      //  2 - ÇÁÂÁÒÉÔÙ ÍÁÔÒÉÃÙ ÏÇÒÁÎÉŞÉ×ÁÀÔÓÑ
                      //      ÇÁÂÁÒÉÔÁÍÉ ÏÂÌÁÓÔÉ ÒÁÓĞÏÌÏÖÅÎÉÑ
                      //      ÏÂßÅËÔÏ× Ó ÁÂÓÏÌÀÔÎÏÊ ×ÙÓÏÔÏÊ


  long int NotUse3DMetric;
                      // æÌÁÇ - ÎÅ ÉÓĞÏÌØÚÏ×ÁÔØ ÔÒÅÈÍÅÒÎÕÀ ÍÅÔÒÉËÕ ÏÂßÅËÔÏ×
                      // ĞÒÉ ÓÏÚÄÁÎÉÉ ÍÁÔÒÉÃÙ MTW ĞÏ ×ÅËÔÏÒÎÏÊ ËÁÒÔÅ ÆÕÎËÃÉÅÊ mapBuildMtw:
                      //  0 - ÔÒÅÈÍÅÒÎÁÑ ÍÅÔÒÉËÁ ÉÓĞÏÌØÚÕÅÔÓÑ
                      //  1 - ÔÒÅÈÍÅÒÎÁÑ ÍÅÔÒÉËÁ ÎÅ ÉÓĞÏÌØÚÕÅÔÓÑ

  long int SurfaceSquare3DObject;
                      // æÌÁÇ ĞÒÉ ÓÏÚÄÁÎÉÉ ÍÁÔÒÉÃÙ MTW ĞÏ ×ÅËÔÏÒÎÏÊ ËÁÒÔÅ ÆÕÎËÃÉÅÊ mapBuildMtw -
                      // ÓÔÒÏÉÔØ ĞÏ×ÅÒÈÎÏÓÔØ ×ÎÕÔÒÉ ĞÌÏİÁÄÎÏÇÏ
                      // ÏÂßÅËÔÁ ĞÏ ÅÇÏ ÔÒÅÈÍÅÒÎÏÊ ÍÅÔÒÉËÅ :
                      //  0 - ÎÅ ÓÔÒÏÉÔØ ĞÏ×ÅÒÈÎÏÓÔØ
                      //  1 - ÓÔÒÏÉÔØ ĞÏ×ÅÒÈÎÏÓÔØ
                      // åÓÌÉ ĞÁÒÁÍÅÔÒ NotUse3DMetric ÒÁ×ÅÎ 1,
                      // ÔÏ ĞÏ×ÅÒÈÎÏÓÔØ ÎÅ ÓÔÒÏÉÔÓÑ

  long int AltitudeMarksNet;
                      // æÌÁÇ ÄÏĞÏÌÎÉÔÅÌØÎÏÊ ÏÂÒÁÂÏÔËÉ ×ÙÓÏÔÎÙÈ ÔÏŞÅË ĞÒÉ
                      // ÓÏÚÄÁÎÉÉ ÍÁÔÒÉÃÙ MTW ĞÏ ×ÅËÔÏÒÎÏÊ ËÁÒÔÅ ÆÕÎËÃÉÅÊ mapBuildMtw ÄÌÑ
                      // ÓÒÅÄÎÅ×Ú×ÅÛÅÎÎÏÊ ÉÎÔÅÒĞÏÌÑÃÉÉ (Method = 1,2,3) :
                      //  0 - ÄÌÑ ËÁÖÄÏÊ ×ÙÓÏÔÎÏÊ ÔÏŞËÉ ×ÙĞÏÌÎÑÅÔÓÑ ĞÏÓÔÒÏÅÎÉÅ É
                      //      ÚÁÎÅÓÅÎÉÅ × ÍÁÔÒÉÃÕ ÌÕŞÅÊ ×ÌÉÑÎÉÑ ×ÙÓÏÔÙ (ÌÕŞ ×ÌÉÑÎÉÑ
                      //      ×ÙÓÏÔÙ - 3D-ÏÔÒÅÚÏË,×ÙÈÏÄÑİÉÊ ÉÚ ÔÏŞËÉ ĞÏ ÏÄÎÏÍÕ ÉÚ
                      //      16 ÒÁÄÉÁÌØÎÙÈ ÎÁĞÒÁ×ÌÅÎÉÊ; ×ÙÓÏÔÙ ÜÌÅÍÅÎÔÏ× ÏÔÒÅÚËÁ
                      //      ÏĞÒÅÄÅÌÑÀÔÓÑ ×ÙÓÏÔÏÊ ÔÏŞËÉ É ×ÙÓÏÔÏÊ, ÎÁÊÄÅÎÎÏÊ ĞÒÉ
                      //      ÓËÁÎÉÒÏ×ÁÎÉÉ ÍÁÔÒÉÃÙ ÉÚ ÔÏŞËÉ ĞÏ ÄÁÎÎÏÍÕ ÎÁĞÒÁ×ÌÅÎÉÀ.
                      //      ìÕŞÉ ×ÌÉÑÎÉÑ ×ÙÓÏÔÙ ËÏÍĞÅÎÓÉÒÕÀÔ ĞÒÏÍÁÈÉ ÍÉÍÏ ÔÏŞËÉ
                      //      Ó ÁÂÓÏÌÀÔÎÏÊ ×ÙÓÏÔÏÊ ĞÒÉ ĞÏÉÓËÅ ÚÎÁŞÁİÉÈ ×ÙÓÏÔ × ĞÒÏÃÅÓÓÅ
                      //      ×ÙŞÉÓÌÅÎÉÑ ÎÅÚÁĞÏÌÎÅÎÙÈ ÜÌÅÍÅÎÔÏ× ÍÁÔÒÉÃÙ.
                      //  1 - ĞÏ ÎÁÂÏÒÕ ×ÙÓÏÔÎÙÈ ÔÏŞÅË ÓÏÚÄÁÅÔÓÑ ÔÒÉÁÎÇÕÌÑÃÉÑ,
                      //      ÒÅÂÒÁ ÔÒÉÁÎÇÕÌÑÃÉÉ (ÉÌÉ ŞÁÓÔÉ ÒÅÂÅÒ) ÚÁÎÏÓÑÔÓÑ × ÍÁÔÒÉÃÕ
                      //      × ×ÉÄÅ 3D-ÏÔÒÅÚËÏ× (ÅÓÌÉ ÒÅÂÒÏ ÎÅ ĞÅÒÅÓÅËÁÅÔ ÏÂßÅËÔÙ
                      //      Ó ÁÂÓÏÌÀÔÎÏÊ ×ÙÓÏÔÏÊ, ÔÏ ÏÎÏ ×Ù×ÏÄÉÔÓÑ ÃÅÌÉËÏÍ,
                      //      ÅÓÌÉ ĞÅÒÅÓÅËÁÅÔ, ÔÏ ×Ù×ÏÄÉÔÓÑ ŞÁÓÔØ ÒÅÂÒÁ, ÏÇÒÁÎÉŞÅÎÎÁÑ
                      //      ÅÇÏ ×ÅÒÛÉÎÏÊ É ÔÏŞËÏÊ ĞÅÒÅÓÅŞÅÎÉÑ Ó ÏÂßÅËÔÏÍ);
                      //  2 - ÄÏĞÏÌÎÉÔÅÌØÎÁÑ ÏÂÒÁÂÏÔËÁ ×ÙÓÏÔÎÙÈ ÔÏŞÅË ÎÅ ×ÙĞÏÌÎÑÅÔÓÑ,
                      //      ×ÙÓÏÔÁ ÔÏŞËÉ ÚÁÎÏÓÉÔÓÑ × ÏÄÉÎ ÜÌÅÍÅÎÔ ÍÁÔÒÉÃÙ,
                      //      ÏÂÙŞÎÏ ĞÒÉÍÅÎÑÅÔÓÑ ĞÒÉ ĞÏÓÔÒÏÅÎÉÉ ĞÏ×ÅÒÈÎÏÓÔÉ
                      //      ĞÏ ÎÁÂÏÒÕ ÏÔÍÅÔÏË ×ÙÓÏÔ

  long int LimitMatrixByFramesOfSheets;
                      // æÌÁÇ ÏÇÒÁÎÉŞÅÎÉÑ ÍÁÔÒÉÃÙ ÒÁÍËÁÍÉ ÌÉÓÔÏ× ĞÒÉ ÓÏÚÄÁÎÉÉ
                      // ÍÁÔÒÉÃÙ MTW ĞÏ ×ÅËÔÏÒÎÏÊ ËÁÒÔÅ ÆÕÎËÃÉÅÊ mapBuildMtw (ÄÌÑ Method = 1,2,3,8):
                      //  0 - ÏÇÒÁÎÉŞÅÎÉÅ ÍÁÔÒÉÃÙ ÎÅ ×ÙĞÏÌÎÑÅÔÓÑ,
                      //      ÉÎÆÏÒÍÁÔÉ×ÎÙÅ ÜÌÅÍÅÎÔÙ ÍÏÇÕÔ ÒÁÓĞÏÌÁÇÁÔØÓÑ
                      //      ×ÎÅ ÒÁÍÏË ÌÉÓÔÏ×
                      //  1 - ÏÇÒÁÎÉŞÅÎÉÅ ÍÁÔÒÉÃÙ ×ÙĞÏÌÎÑÅÔÓÑ,
                      //      ÉÎÆÏÒÍÁÔÉ×ÎÙÅ ÜÌÅÍÅÎÔÙ ÒÁÓĞÏÌÁÇÁÀÔÓÑ
                      //      ÔÏÌØËÏ ×ÎÕÔÒÉ ÇÁÂÁÒÉÔÏ× ÒÁÍÏË ÌÉÓÔÏ×

  char Reserve[20];   // äÏÌÖÎÙ ÂÙÔØ ÎÕÌÉ
}
  BUILDMTW;


typedef struct MTRPROJECTIONDATA  //  ğáòáíåôòù óïúäáîéñ íáôòéãù ÷ùóïô
{                                 //   (äáîîùå ï ğòïåëãéé)
  long int  StructSize;         // òÁÚÍÅÒ ÄÁÎÎÏÊ ÓÔÒÕËÔÕÒÙ : 128 ÂÁÊÔ
                                //  sizeof (MTRPROJECTIONDATA)

  long int  Free;               // äÏÌÖÅÎ ÂÙÔØ ÎÏÌØ

  long int  MapType;            // ôÉĞ ËÁÒÔÙ (ÚÁÄÁ×ÁÔØ × ÓÏÏÔ×ÅÔÓÔ×ÉÉ
                                //   Ó MAPTYPE, ÆÁÊÌ MAPCREAT.H)

  long int  ProjectionType;     // ôÉĞ ĞÒÏÅËÃÉÉ (ÚÁÄÁ×ÁÔØ × ÓÏÏÔ×ÅÔÓÔ×ÉÉ
                                //   Ó MAPPROJECTION, ÆÁÊÌ MAPCREAT.H)
                                // long  MaterialProjection; // ğÒÏÅËÃÉÑ ÉÓÈ. ÍÁÔÅÒÉÁÌÁ

                                // ÷ ÒÁÄÉÁÎÁÈ
  double    FirstMainParallel;  // ğÅÒ×ÁÑ ÇÌÁ×ÎÁÑ ĞÁÒÁÌÌÅÌØ
  double    SecondMainParallel; // ÷ÔÏÒÁÑ ÇÌÁ×ÎÁÑ ĞÁÒÁÌÌÅÌØ
  double    AxisMeridian;       // ïÓÅ×ÏÊ ÍÅÒÉÄÉÁÎ
  double    MainPointParallel;  // ğÁÒÁÌÌÅÌØ ÇÌÁ×ÎÏÊ ÔÏŞËÉ
  double    PoleLatitude;       // ûÉÒÏÔÁ ĞÏÌÀÓÁ ĞÒÏÅËÃÉÉ                 // 27/06/05
  double    PoleLongitude;      // äÏÌÇÏÔÁ ĞÏÌÀÓÁ ĞÒÏÅËÃÉÉ                // 27/06/05

  long      EllipsoideKind;     // ÷ÉÄ ÜÌÌÉĞÓÏÉÄÁ                         // 01/07/05
  long      HeightSystem;       // óÉÓÔÅÍÁ ×ÙÓÏÔ                          // 01/07/05
  long      CoordinateSystem;   // óÉÓÔÅÍÁ ËÏÏÒÄÉÎÁÔ                      // 01/07/05
  long      ZoneNumber;         // îÏÍÅÒ ÚÏÎÙ ÔÏĞÏËÁÒÔÙ                   // 28/11/07

  double    FalseEasting;    // óÍÅİÅÎÉÅ ËÏÏÒÄÉÎÁÔ ĞÏ ÏÓÉ Y            // 05/07/10
  double    FalseNorthing;   // óÍÅİÅÎÉÅ ËÏÏÒÄÉÎÁÔ ĞÏ ÏÓÉ X            // 05/07/10
  double    ScaleFactor;     // íÁÓÛÔÁÂÎÙÊ ËÏÜÆÆÉÃÉÅÎÔ                 // 05/07/10
  double    TurnAngle;       // õÇÏÌ ÒÁÚ×ÏÒÏÔÁ ÏÓÅÊ ÄÌÑ ÌÏËÁÌØÎÙÈ ÓÉÓÔÅÍ (íóë)   // 05/07/10
  long      ZoneIdent;       // éÄÅÎÔÉÆÉËÁÔÏÒ ÒÁÊÏÎÁ (ÄÌÑ íóë 63: A-X ÉÌÉ 0)     // 26/04/11

  char      Reserve[12];     // äÏÌÖÎÙ ÂÙÔØ ÎÕÌÉ

}
  MTRPROJECTIONDATA;

// ğáòáíåôòù ğïóôòïåîéñ íáôòéãù ğï÷åòèîïóôé (íáôòéãù ëáşåóô÷ éìé íáôòéãù ÷ùóïô)

typedef struct BUILDSURFACE  // 15/06/11
{
 unsigned
 long int StructSize; // òÁÚÍÅÒ ÄÁÎÎÏÊ ÓÔÒÕËÔÕÒÙ : sizeof (BUILDSURFACE) = 320 ÂÁÊÔ
 long int FileMtw;    // æÌÁÇ ÒÁÓÛÉÒÅÎÉÑ ÓÏÚÄÁ×ÁÅÍÏÇÏ ÆÁÊÌÁ :
                      //   0 - ÓÏÚÄÁÎÉÅ ÆÁÊÌÁ ÍÁÔÒÉÃÙ ËÁŞÅÓÔ× (*.mtq)
                      //   1 - ÓÏÚÄÁÎÉÅ ÆÁÊÌÁ ÍÁÔÒÉÃÙ ×ÙÓÏÔ (*.mtw)

 double BeginX;    // ğÒÑÍÏÕÇÏÌØÎÙÅ ËÏÏÒÄÉÎÁÔÙ ÎÁŞÁÌÁ
 double BeginY;    // (ÀÇÏ-ÚÁĞÁÄÎÏÇÏ ÕÇÌÁ) ÍÁÔÒÉÃÙ × ÍÅÔÒÁÈ

 double Width;     // ûÉÒÉÎÁ ÍÁÔÒÉÃÙ × ÍÅÔÒÁÈ
 double Height;    // ÷ÙÓÏÔÁ ÍÁÔÒÉÃÙ × ÍÅÔÒÁÈ

 double MinValue;  // äÉÁĞÁÚÏÎ ÚÎÁŞÅÎÉÊ ÈÁÒÁËÔÅÒÉÓÔÉËÉ ËÁŞÅÓÔ×Á ÓÏÚÄÁ×ÁÅÍÏÊ ÍÁÔÒÉÃÙ,
 double MaxValue;  // ÅÓÌÉ MinValue >= MaxValue × ÍÁÔÒÉÃÕ ÚÁÎÏÓÉÔÓÑ ÆÁËÔÉŞÅÓËÉÊ ÄÉÁĞÁÚÏÎ ÚÎÁŞÅÎÉÊ

 double ElemSizeMeters;  // òÁÚÍÅÒ ÓÔÏÒÏÎÙ ÜÌÅÍÅÎÔÁÒÎÏÇÏ ÕŞÁÓÔËÁ
                         // × ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ (ÄÉÓËÒÅÔ ÍÁÔÒÉÃÙ)

 long int UserType;      // ğÒÏÉÚ×ÏÌØÎÏÅ ŞÉÓÌÏ, Ó×ÑÚÙ×ÁÅÍÏÅ Ó ÓÏÚÄÁ×ÁÅÍÏÊ ÍÁÔÒÉÃÅÊ
                         //  (ÔÉĞ, ÈÁÒÁËÔÅÒÉÓÔÉËÁ ÍÁÔÒÉÃÙ)

 long int SearchSectorCount; // ëÏÌÉŞÅÓÔ×Ï ÓÅËÔÏÒÏ× ÄÌÑ ĞÏÉÓËÁ ÓÏÓÅÄÎÉÈ ÔÏŞÅË (ÄÌÑ Method = 9,11) // 09/06/11
                             // 1 - ĞÏ ËÒÕÇÕ
                             // 4 - ĞÏ 4 ÓÅËÔÏÒÁÍ
                             // 8 - ĞÏ 8 ÓÅËÔÏÒÁÍ

 char UserName[32];      // õÓÌÏ×ÎÏÅ ÉÍÑ ÍÁÔÒÉÃÙ (ÎÁÚ×ÁÎÉÅ ÈÁÒÁËÔÅÒÉÓÔÉËÉ ËÁŞÅÓÔ×Á)

 HOBJ Border;  // éÄÅÎÔÉÆÉËÁÔÏÒ ÚÁÍËÎÕÔÏÇÏ ÏÂßÅËÔÁ ËÁÒÔÙ, ÏÇÒÁÎÉŞÉ×ÁÀİÅÇÏ ÏÂÌÁÓÔØ
               // ÚÁĞÏÌÎÑÅÍÙÈ ÜÌÅÍÅÎÔÏ× ÍÁÔÒÉÃÙ (ÅÓÌÉ ÒÁ×ÅÎ ÎÕÌÀ, ÔÏ ÎÅ ÉÓĞÏÌØÚÕÅÔÓÑ)
               // åÓÌÉ ÏÂßÅËÔ ÒÁÓĞÏÌÏÖÅÎ ×ÎÅ ÇÁÂÁÒÉÔÏ× ÍÁÔÒÉÃÙ, ÏĞÒÅÄÅÌÑÅÍÙÈ ÚÎÁŞÅÎÉÑÍÉ
               // ĞÏÌÅÊ BeginX, BeginY, Width, Height ÄÁÎÎÏÊ ÓÔÒÕËÔÕÒÙ, ÔÏ ÎÅ ÉÓĞÏÌØÚÕÅÔÓÑ

 HWND Handle;  // éÄÅÎÔÉÆÉËÁÔÏÒ ÏËÎÁ ÄÉÁÌÏÇÁ, ËÏÔÏÒÏÍÕ ĞÏÓÙÌÁÅÔÓÑ
               // ÓÏÏÂİÅÎÉÅ 0x0581 Ï ĞÒÏÃÅÎÔÅ ×ÙĞÏÌÎÅÎÎÙÈ ÒÁÂÏÔ (× WPARAM),
               // ÅÓÌÉ ĞÒÏÃÅÓÓ ÄÏÌÖÅÎ ÂÙÔØ ĞÒÉÎÕÄÉÔÅÌØÎÏ ÚÁ×ÅÒÛÅÎ, × ÏÔ×ÅÔ
               // ÄÏÌÖÎÏ ×ÅÒÎÕÔØÓÑ ÚÎÁŞÅÎÉÅ 0x0581.
               // åÓÌÉ Handle ÒÁ×ÎÏ ÎÕÌÀ - ÓÏÏÂİÅÎÉÑ ÎÅ ĞÏÓÙÌÁÀÔÓÑ.

 COLORREF* Palette;      // áÄÒÅÓ ĞÁÌÉÔÒÙ ÓÏÚÄÁ×ÁÅÍÏÊ ÍÁÔÒÉÃÙ ËÁŞÅÓÔ×(*.mtq),
                         // ÅÓÌÉ ÒÁ×ÅÎ ÎÕÌÀ - ÉÓĞÏÌØÚÕÅÔÓÑ ĞÁÌÉÔÒÁ ĞÏ ÕÍÏÌŞÁÎÉÀ
 long int PaletteCount;  // KÏÌÉŞÅÓÔ×Ï Ã×ÅÔÏ× × ĞÁÌÉÔÒÅ (ÏÔ 1 ÄÏ 256)

 long int Method;        // íÅÔÏÄ ĞÏÓÔÒÏÅÎÉÑ ĞÏ×ÅÒÈÎÏÓÔÉ :
                         //  8 - ìÉÎÅÊÎÁÑ ÉÎÔÅÒĞÏÌÑÃÉÑ ĞÏ ÓÅÔËÅ ÔÒÅÕÇÏÌØÎÉËÏ×
                         //      ( ÉÓĞÏÌØÚÕÀÔÓÑ ÔÏŞËÉ ÍÁÓÓÉ×Á PointArray )
                         //  9 - ìÏÇÁÒÉÆÍÉŞÅÓËÁÑ ÉÎÔÅÒĞÏÌÑÃÉÑ ĞÏ ÌÏËÁÌØÎÏÊ ĞÏ×ÅÒÈÎÏÓÔÉ
                         //       ×ÏËÒÕÇ ÏĞÒÅÄÅÌÑÅÍÏÇÏ ÜÌÅÍÅÎÔÁ
                         //      ( ÉÓĞÏÌØÚÕÀÔÓÑ ÔÏŞËÉ ÍÅÔÒÉËÉ ÏÂßÅËÔÏ× ËÁÒÔÙ )
                         // 11 - ëÒÉÇÉÎÇ

 XYHDOUBLE* PointArray;  // áÄÒÅÓ ÍÁÓÓÉ×Á ÚÎÁŞÅÎÉÊ ÈÁÒÁËÔÅÒÉÓÔÉËÉ ËÁŞÅÓÔ×Á (ÄÌÑ Method = 8)
 long int PointCount;    // şÉÓÌÏ ÔÏŞÅË × ÍÁÓÓÉ×Å PointArray (ÄÌÑ Method = 8)

 long int SemanticCode;  // ëÏÄ ÓÅÍÁÎÔÉËÉ ÍÏÄÅÌÉÒÕÅÍÏÊ ÈÁÒÁËÔÅÒÉÓÔÉËÉ (ÄÌÑ Method = 9)

 long int LocalSurfacePointCount;  // KÏÌÉŞÅÓÔ×Ï ÔÏŞÅË ÄÌÑ ĞÏÓÔÒÏÅÎÉÑ ÌÏËÁÌØÎÏÊ ĞÏ×ÅÒÈÎÏÓÔÉ
                                   // ×ÏËÒÕÇ ÏĞÒÅÄÅÌÑÅÍÏÇÏ ÜÌÅÍÅÎÔÁ (ÄÌÑ Method = 9,11)
                                   // ÅÓÌÉ SearchSectorCount = 4, ÔÏ LocalSurfacePointCount ÄÏÌÖÎÏ ÂÙÔØ ËÒÁÔÎÏ 4
                                   // ÅÓÌÉ SearchSectorCount = 8, ÔÏ LocalSurfacePointCount ÄÏÌÖÎÏ ÂÙÔØ ËÒÁÔÎÏ 8

 long int LocalSurfaceRebuildPointCount;  // KÏÌÉŞÅÓÔ×Ï ÏÂÎÏ×ÌÅÎÎÙÈ ÔÏŞÅË ĞÒÉ ĞÅÒÅÈÏÄÅ
                                          // Ë ÏŞÅÒÅÄÎÏÍÕ ÏĞÒÅÄÅÌÑÅÍÏÍÕ ÜÌÅÍÅÎÔÕ,
                                          // ĞÒÉ ËÏÔÏÒÏÍ ĞÅÒÅÓÔÒÁÉ×ÁÅÔÓÑ ÌÏËÁÌØÎÁÑ
                                          // ĞÏ×ÅÒÈÎÏÓÔØ (ÄÌÑ Method = 9)
 double MaxMetricCutLength;  // ûÁÇ ÄÏÂÁ×ÌÅÎÉÑ ÔÏŞÅË ĞÏ ËÏÎÔÕÒÕ ÌÉÎÅÊÎÙÈ É ĞÌÏİÁÄÎÙÈ ÏÂßÅËÔÏ× (ÄÌÑ Method = 9,11)
                             // éÓĞÏÌØÚÕÅÔÓÑ ÅÓÌÉ IsMetricCutLength = 1

 long int Use3DMetric;       // æÌÁÇ ÉÓĞÏÌØÚÏ×ÁÎÉÑ ×ÙÓÏÔ ÉÚ ÔÒÅÈÍÅÒÎÏÊ ÍÅÔÒÉËÉ ÏÂßÅËÔÏ× :  // 06/11/07
                             //  0 - ×ÙÓÏÔÙ ÉÚ ÔÒÅÈÍÅÒÎÏÊ ÍÅÔÒÉËÉ ÎÅ ÉÓĞÏÌØÚÕÀÔÓÑ
                             //  1 - ×ÙÓÏÔÙ ÉÚ ÔÒÅÈÍÅÒÎÏÊ ÍÅÔÒÉËÉ ÉÓĞÏÌØÚÕÀÔÓÑ

                             // æÌÁÇ ÉÓĞÏÌØÚÏ×ÁÎÉÑ ĞÁÒÁÍÅÔÒÁ Border        24/11/09
                             // åÓÌÉ Border - ÉÄÅÎÔÉÆÉËÁÔÏÒ ĞÌÏİÁÄÎÏÇÏ ÏÂßÅËÔÁ Ó ĞÏÄÏÂßÅËÔÁÍÉ,ÔÏ
                             // ĞÒÉ BuildInsideBorderSubjects = 0 ÏÂÌÁÓÔØ ÚÁĞÏÌÎÑÅÍÙÈ ÜÌÅÍÅÎÔÏ× ÍÁÔÒÉÃÙ
                             // ÏĞÒÅÄÅÌÑÅÔÓÑ ÚÁÄÁÎÎÙÍ ĞÌÏİÁÄÎÙÍ ÏÂßÅËÔÏÍ Border Ó ÕŞ£ÔÏÍ ĞÏÄÏÂßÅËÔÏ×,
                             // ĞÒÉ BuildInsideBorderSubjects = 1 ÏÂÌÁÓÔØ ÚÁĞÏÌÎÑÅÍÙÈ ÜÌÅÍÅÎÔÏ×
                             // ÍÁÔÒÉÃÙ ÏĞÒÅÄÅÌÑÅÔÓÑ ĞÏÄÏÂßÅËÔÁÍÉ ĞÌÏİÁÄÎÏÇÏ ÏÂßÅËÔÁ Border.
                             // åÓÌÉ Border - ÉÄÅÎÔÉÆÉËÁÔÏÒ ÌÉÎÅÊÎÏÇÏ ÏÂßÅËÔÁ ÉÌÉ ĞÌÏİÁÄÎÏÇÏ ÏÂßÅËÔÁ
                             // ÂÅÚ ĞÏÄÏÂßÅËÔÏ×, ÔÏ ÆÌÁÇ BuildInsideBorderSubjects ÕÓÔÁÎÁ×ÌÉ×ÁÅÔÓÑ × ÎÏÌØ.
                             // (äÁÎÎÙÊ ÆÌÁÇ ÚÁÄÁ£Ô ÒÅÖÉÍ "óÔÒÏÉÔØ ÔÏÌØËÏ ×ÎÕÔÒÉ ĞÏÄÏÂßÅËÔÏ×" É ĞÏÚ×ÏÌÑÅÔ
                             //  ĞÏÓÔÒÏÉÔØ ÍÁÔÒÉÃÕ, ÓÏÄÅÒÖÁİÕÀ ÎÅÓËÏÌØËÏ ÏÔÄÅÌØÎÙÈ ÚÁĞÏÌÎÅÎÎÙÈ ÏÂÌÁÓÔÅÊ).
 long int BuildInsideBorderSubjects;

                             // æÌÁÇ ÉÓĞÏÌØÚÏ×ÁÎÉÑ ĞÁÒÁÍÅÔÒÁ Border        24/12/09
                             // åÓÌÉ Border - ÉÄÅÎÔÉÆÉËÁÔÏÒ ĞÌÏİÁÄÎÏÇÏ ÏÂßÅËÔÁ,ÔÏ
                             // ĞÒÉ BuildInsideBorderMainObject = 0 ÏÂÌÁÓÔØ ÚÁĞÏÌÎÑÅÍÙÈ ÜÌÅÍÅÎÔÏ× ÍÁÔÒÉÃÙ
                             // ÏĞÒÅÄÅÌÑÅÔÓÑ ÚÁÄÁÎÎÙÍ ĞÌÏİÁÄÎÙÍ ÏÂßÅËÔÏÍ Border Ó ÕŞ£ÔÏÍ ĞÏÄÏÂßÅËÔÏ×,
                             // ĞÒÉ BuildInsideBorderMainObject = 1 ÏÂÌÁÓÔØ ÚÁĞÏÌÎÑÅÍÙÈ ÜÌÅÍÅÎÔÏ×
                             // ÍÁÔÒÉÃÙ ÏĞÒÅÄÅÌÑÅÔÓÑ ÇÌÁ×ÎÙÍ ÏÂßÅËÔÏÍ ĞÌÏİÁÄÎÏÇÏ ÏÂßÅËÔÁ Border.
                             // åÓÌÉ Border - ÉÄÅÎÔÉÆÉËÁÔÏÒ ÌÉÎÅÊÎÏÇÏ ÏÂßÅËÔÁ, ÔÏ ÆÌÁÇ
                             // BuildInsideBorderMainObject ÕÓÔÁÎÁ×ÌÉ×ÁÅÔÓÑ × ÎÏÌØ.
                             // (äÁÎÎÙÊ ÆÌÁÇ ÚÁÄÁ£Ô ÒÅÖÉÍ "óÔÒÏÉÔØ ×ÎÕÔÒÉ ×ÓÅÇÏ ÇÌÁ×ÎÏÇÏ ËÏÎÔÕÒÁ" É ĞÏÚ×ÏÌÑÅÔ
                             //  ĞÏÓÔÒÏÉÔØ ÍÁÔÒÉÃÕ Ó ĞÒÏÇÎÏÚÉÒÕÅÍÙÍÉ ÚÎÁŞÅÎÉÑÍÉ × ÏÂÌÁÓÔÑÈ ÏÔÓÕÔÓÔ×ÉÑ ÄÁÎÎÙÈ).
 long int BuildInsideBorderMainObject;

 long int IsMetricCutLength; // äÏÂÁ×ÌÑÔØ ÔÏŞËÉ ĞÏ ËÏÎÔÕÒÕ ÌÉÎÅÊÎÙÈ É ĞÌÏİÁÄÎÙÈ ÏÂßÅËÔÏ× (ÄÌÑ Method = 9,11) // 09/06/11
                             // ôÏŞËÉ ÄÏÂÁ×ÌÑÀÔÓÑ Ó ÛÁÇÏÍ MaxMetricCutLength

 long int IsAddPointsInEmptyRegion; // äÏÂÁ×ÌÑÔØ ÔÏŞËÉ × ĞÕÓÔÙÈ ÏÂÌÁÓÔÑÈ (ÄÌÑ Method = 9,11) // 09/06/11

 long int IsLimitHeight; // åÓÌÉ ×ËÌÀŞÅÎÏ, ÔÏ ×ÙÓÏÔÁ ÜÌÅÍÅÎÔÁ ÍÁÔÒÉÃÙ ÎÅ ÍÏÖÅÔ ÂÙÔØ ÂÏÌØÛÅ ÉÌÉ ÍÅÎØÛÅ ×ÙÓÏÔ (ÄÌÑ Method = 9,11) // 09/06/11
                         // ÓÏÓÅÄÎÉÈ ÔÏŞÅË, ĞÏ ËÏÔÏÒÙÍ ÓÔÒÏÉÔÓÑ ĞÏ×ÅÒÈÎÏÓÔØ, ÎÁ LimitOffset

 double   DistBeforePointsInEmptyRegion; // òÁÓÓÔÏÑÎÉÅ ÍÅÖÄÕ ÔÏŞËÁÍÉ × ĞÕÓÔÙÈ ÏÂÌÁÓÔÑÈ (ÄÌÑ Method = 9,11) // 09/06/11
                                         // úÎÁŞÅÎÉÅ ×ÙÓÏÔÙ (ÈÁÒÁËÔÅÒÉÓÔÉËÉ) × ÜÔÉÈ
                                         // ÔÏŞËÁÈ ÏĞÒÅÄÅÌÑÅÔÓÑ ÍÅÔÏÄÏÍ ÉÎÔÅÒĞÏÌÑÃÉÉ ĞÏ 8 ÎÁĞÒÁ×ÌÅÎÉÑÍ.
                                         // üÔÉ ÔÏŞËÉ ÄÏÂÁ×ÌÑÀÔÓÑ ÄÌÑ ÔÏÇÏ, ŞÔÏÂÙ × ĞÕÓÔÙÈ ÏÂÌÁÓÔÑÈ ÉÚÂÁ×ÉÔÓÑ ÏÔ ĞÏÑ×ÌÅÎÉÑ
                                         // ÇÏÒ É ÑÍ × ÓÌÕŞÁÑÈ ËÏÇÄÁ ÎÁ ÇÒÁÎÉÃÅ ĞÕÓÔÙÈ ÏÂÌÁÓÔÅÊ ÅÓÔØ ÚÎÁŞÉÔÅÌØÎÙÅ ÇÒÁÄÉÅÎÔÙ.
 double   LimitOffset; // åÓÌÉ ×ËÌÀŞÅÎÏ IsLimitHeight ÔÏ ÒÁÚÒÅÛÅÎÎÏÅ ÏÔËÌÏÎÅÎÉÅ ×ÙŞÉÓÌÅÎÎÏÇÏ  (ÄÌÑ Method = 9,11) // 09/06/11
                       // ÚÎÁŞÅÎÉÑ ÍÁÔÒÉÃÙ ÏÔ ÍÉÎÉÍÁÌØÎÏÇÏ, ÍÁËÓÉÍÁÌØÎÏÇÏ ÚÎÁŞÅÎÉÑ ÓÒÅÄÉ ÓÏÓÅÄÎÉÈ ÔÏŞÅË

 char Reserve[128];    // äÏÌÖÎÙ ÂÙÔØ ÎÕÌÉ
}
  BUILDSURFACE;


// ğáòáíåôòù ğïóôòïåîéñ ğòïæéìñ    // 10/02/10

typedef struct PROFBUILDPARM
{
  DOUBLEPOINT Point;               // ëÏÏÒÄÉÎÁÔÙ ÔÅËÕİÅÊ ÔÏŞËÉ ÎÁ ÏÂßÅËÔÅ
  HOBJ        Object;              // ïÂßÅËÔ ÄÌÑ ĞÏÓÔÒÏÅÎÉÑ ĞÒÏÆÉÌÑ
  long int    ProfStepVertical;    // ûÁÇ ÛËÁÌÙ ĞÏ ×ÅÒÔÉËÁÌÉ (Í)
  long int    ProfStepHorizontal;  // ûÁÇ ÛËÁÌÙ ĞÏ ÇÏÒÉÚÏÎÔÁÌÉ (Í)

} 
  PROFBUILDPARM;

  
// ğáòáíåôòù ğïóôòïåîéñ ğòïæéìñ    // 23/04/10

typedef struct PROFBUILDPARMEX
{
  DOUBLEPOINT Point;               // ëÏÏÒÄÉÎÁÔÙ ÔÅËÕİÅÊ ÔÏŞËÉ ÎÁ ÏÂßÅËÔÅ
  HOBJ        Object;              // ïÂßÅËÔ ÄÌÑ ĞÏÓÔÒÏÅÎÉÑ ĞÒÏÆÉÌÑ
  long int    ProfStepVertical;    // ûÁÇ ÛËÁÌÙ ĞÏ ×ÅÒÔÉËÁÌÉ (Í)
  long int    ProfStepHorizontal;  // ûÁÇ ÛËÁÌÙ ĞÏ ÇÏÒÉÚÏÎÔÁÌÉ (Í)
  double      DeltaRight;          // ğÒÅ×ÙÛÅÎÉÅ × ËÏÎÅŞÎÏÊ ÔÏŞËÅ
  double      DeltaCurrent;        // ğÒÅ×ÙÛÅÎÉÅ × ÔÅËÕİÅÊ ÔÏŞËÅ
  double      DeltaLeft;           // ğÒÅ×ÙÛÅÎÉÅ × ÎÁŞÁÌØÎÏÊ ÔÏŞËÅ
  long        ColorProf;           // ã×ÅÔ ĞÒÏÆÉÌÑ
  long        ColorLine;           // ã×ÅÔ ÌÉÎÉÉ
  long int    IsCurvatureEarth;    // æÌÁÇ ÕŞÅÔÁ ËÒÉ×ÉÚÎÙ  úÅÍÌÉ  0 - ÎÅ ÕŞÉÔÙ×ÁÔØ,
                                   //                             1 - ÕŞÉÔÙ×ÁÔØ;
  long int    IsMiddleHeight;      // æÌÁÇ ÕŞÅÔÁ ÕÓÒÅÄÎÅÎÉÑ ×ÙÓÏÔ 0 - ÎÅ ÕŞÉÔÙ×ÁÔØ,
                                   //                             1 - ÕŞÉÔÙ×ÁÔØ;
  long int    IsLineFL;            // æÌÁÇ ÏÔÏÂÒÁÖÅÎÉÑ ÌÉÎÉÉ (ĞÅÒ×ÁÑ - ĞÏÓÌÅÄÎÑÑ ÔÏŞËÁ)
                                   // 0 - ÏÔÏÂÒÁÖÁÔØ,   1 - ÎÅ ÏÔÏÂÒÁÖÁÔØ;
  long int    IsLineFCL;           // æÌÁÇ ÏÔÏÂÒÁÖÅÎÉÑ ÌÉÎÉÉ (ĞÅÒ×ÁÑ - ÔÅËÕİÁÑ- ĞÏÓÌÅÄÎÑÑ ÔÏŞËÁ)
                                   // 0 - ÏÔÏÂÒÁÖÁÔØ,   1 - ÎÅ ÏÔÏÂÒÁÖÁÔØ;
  long int    IsLineCross;         // æÌÁÇ ÏÔÏÂÒÁÖÅÎÉÑ ÌÉÎÉÉ (ĞÅÒÅËÒÅÓÔØÅ ÏÔ ÔÅËÕİÅÊ ÔÏŞËÉ)
                                   // 0 - ÏÔÏÂÒÁÖÁÔØ,   1 - ÎÅ ÏÔÏÂÒÁÖÁÔØ;
  long int    IsLineNet;           // æÌÁÇ ÏÔÏÂÒÁÖÅÎÉÑ ÓÅÔËÉ ĞÒÏÆÉÌÑ
                                   // 0 - ÏÔÏÂÒÁÖÁÔØ,   1 - ÎÅ ÏÔÏÂÒÁÖÁÔØ;
  long int    IsLineRelief;        // æÌÁÇ ÏÔÏÂÒÁÖÅÎÉÑ ÒÅÌØÅÆÁ
                                   // 0 - ÚÁÌÉ×ËÁ,   1 - ËÏÎÔÕÒ;
}
  PROFBUILDPARMEX;


// óïëòáıåîîïå ïğéóáîéå îáêäåîîïçï ïâ'åëôá  // 01/02/02

typedef struct
{
   int         ListNumber;        // îïíåò ìéóôá ÷ùâòáîîïçï ïâ'åëôá
   int         ObjectNumber;      // îïíåò ÷ùâòáîîïçï ïâ'åëôá ÷ ìéóôå
   HSITE       Map;               // ïğéóáîéå üìåëôòïîîïê ëáòôù
}
  MAPOBJDESCEX;

typedef struct
{
  DOUBLEPOINT XY;     // ëÏÏÒÄÉÎÁÔÁ ÔÏŞËÉ ĞÅÒÅÓÅŞÅÎÉÑ
  double       H;     // ÷ÙÓÏÔÁ ÔÏŞËÉ ĞÅÒÅÓÅŞÅÎÉÑ
                      // (ÉÚ ÍÅÔÒÉËÉ)
  HOBJ Info1;
  long int Number1;   // úÁ ËÁËÏÊ ÔÏŞËÏÊ ÏÂßÅËÔÁ Info1
                      // ÎÁÈÏÄÉÔÓÑ ÔÏŞËÁ ĞÅÒÅÓÅŞÅÎÉÑ
  long int Subject1;  // îÏÍÅÒ ÏÂßÅËÔÁ/ĞÏÄÏÂßÅËÔÁ ÏÂßÅËÔÁ info2
  HOBJ Info2;
  long int Number2;   // úÁ ËÁËÏÊ ÔÏŞËÏÊ ÏÂßÅËÔÁ Info2
                      // ÎÁÈÏÄÉÔÓÑ ÔÏŞËÁ ĞÅÒÅÓÅŞÅÎÉÑ
  long int Subject2;  // îÏÍÅÒ ÏÂßÅËÔÁ/ĞÏÄÏÂßÅËÔÁ ÏÂßÅËÔÁ info2
}
  CROSSPOINT;


// óôòõëôõòá ïğéóù÷áàıáñ ğáîåìø ğòéëìáäîïê úáäáşé
// õËÁÚÁÔÅÌØ ÎÁ ÎÅÅ ÉÓĞÏÌØÚÕÅÔÓÑ × ËÁŞÅÓÔ×Å ×ÔÏÒÏÇÏ
// ĞÁÒÁÍÅÔÒÁ × ÓÏÏÂİÅÎÉÉ AW_CREATETASKPANEL

typedef struct PANELINFO
{
  HINSTANCE hInst;     // éÄÅÎÔÉÆÉËÁÔÏÒ ÂÉÂÌÉÏÔÅËÉ ÓÏÄÅÒÖÁİÅÊ ËÎÏĞËÉ ĞÁÎÅÌÉ
  long int  Count;     // ëÏÌÉŞÅÓÔ×Ï ĞÅÒÅÄÁ×ÁÅÍÙÈ ÉÄÅÎÔÉÆÉËÁÔÏÒÏ×(ËÎÏĞÏË) ×
                       // ĞÅÒ×ÏÍ ĞÁÒÁÍÅÔÒÅ ÓÏÏÂİÅÎÉÑ AW_CREATETASKPANEL
  char      Name[32];  // óÏÂÓÔ×ÅÎÎÏÅ ÎÁÚ×ÁÎÉÅ ĞÁÎÅÌÉ
}
  PANELINFO;

typedef struct PANELPOS   // ğÁÒÁÍÅÔÒ LPARAM ÓÏÏÂİÅÎÉÑ AW_MOVEPANEL
{
  RECT Rect;              // ëÏÏÒÄÉÎÁÔÙ ÎÏ×ÏÇÏ ĞÏÌÏÖÅÎÉÑ ĞÁÎÅÌÉ
  long int  Position;     // òÁÓĞÏÌÏÖÅÎÉÅ ĞÁÎÅÌÉ × ÏËÎÅ (ÓÍ. LOCAL)
  long int  Layout;       // ğÒÉÚÎÁË ÎÅÍÅÄÌÅÎÎÏÇÏ ÏÂÎÏ×ÌÅÎÉÑ ÏËÎÁ
}
  PANELPOS;

typedef struct BUTTONINFO   // ğÁÒÁÍÅÔÒ LPARAM ÓÏÏÂİÅÎÉÑ AW_INSERTBUTTON
{
  long int Command;         // éÄÅÎÔÉÆÉËÁÔÏÒ ÓÏÚÄÁ×ÁÅÍÏÊ ËÎÏĞËÉ,
                            // ÅÓÌÉ Command = (-1) - ×ÓÔÁ×ÌÑÅÔÓÑ ÒÁÚÄÅÌÉÔÅÌØ
  HBITMAP  hBitmap;         // éÄÅÎÔÉÆÉËÁÔÏÒ ËÁÒÔÉÎËÉ ÎÁ ËÎÏĞËÅ
                            // äÌÑ Linux - ÕËÁÚÁÔÅÌØ ÎÁ ÓÔÒÕËÔÕÒÕ BUTTONINFOLX
  long int Sibling;         // éÄÅÎÔÉÆÉËÁÔÏÒ ËÎÏĞËÉ × ĞÁÎÅÌÉ ÉÎÓÔÒÕÍÅÎÔÏ×,
                            // ĞÏÓÌÅ ËÏÔÏÒÏÊ ×ÓÔÁ×ÌÑÅÔÓÑ ÓÏÚÄÁ×ÁÅÍÁÑ ËÎÏĞËÁ.
                            // åÓÌÉ Sibling = NULL - ×ÓÔÁ×ÌÑÅÔÓÑ × ËÏÎÅÃ
}
  BUTTONINFO;

  
typedef struct TASKBUTTONINFO // ğÁÒÁÍÅÔÒ LPARAM ÓÏÏÂİÅÎÉÑ AW_INSERTTASKBUTTON     // 05/06/10
{
  HINSTANCE hTask;          // éÄÅÎÔÉÆÉËÁÔÏÒ ÂÉÂÌÉÏÔÅËÉ ÚÁÄÁŞÉ, ËÏÔÏÒÁÑ ÂÕÄÅÔ ×ÙĞÏÌÎÑÔØ ËÏÍÁÎÄÕ ÉÌÉ 0
                            // åÓÌÉ ÚÁÄÁÎ ÉÄÅÎÔÉÆÉËÁÔÏÒ ÚÁÄÁŞÉ, ÔÏ Command ÂÕÄÅÔ
                            // ĞÅÒÅÄÁ×ÁÔØÓÑ ÎÁ ÏÂÒÁÂÏÔËÕ ËÏÎËÒÅÔÎÏÊ ÚÁÄÁŞÅ
  long int Command;         // éÄÅÎÔÉÆÉËÁÔÏÒ ËÎÏĞËÉ,
                            // ÅÓÌÉ Command = (-1) - ×ÓÔÁ×ÌÑÅÔÓÑ ÒÁÚÄÅÌÉÔÅÌØ
  long int Sibling;         // éÄÅÎÔÉÆÉËÁÔÏÒ ËÎÏĞËÉ × ĞÁÎÅÌÉ ÉÎÓÔÒÕÍÅÎÔÏ×,
                            // ĞÏÓÌÅ ËÏÔÏÒÏÊ ×ÓÔÁ×ÌÑÅÔÓÑ ÓÏÚÄÁ×ÁÅÍÁÑ ËÎÏĞËÁ.
                            // åÓÌÉ Sibling ÒÁ×ÅÎ 0, ÔÏ ĞÒÉ ÓÏÚÄÁÎÉÉ ËÎÏĞËÁ ×ÓÔÁ×ÌÑÅÔÓÑ × ËÏÎÅÃ ÓĞÉÓËÁ
  HBITMAP  hBitmap;         // éÄÅÎÔÉÆÉËÁÔÏÒ ËÁÒÔÉÎËÉ ÎÁ ËÎÏĞËÅ ÉÌÉ 0
  long int Background;      // ğÒÉÚÎÁË ĞÒÏÒÉÓÏ×ËÉ ÆÏÎÁ ËÎÏĞËÉ (ÅÓÌÉ ÎÅ ÒÁ×ÎÏ 0),
                            // ÕŞÉÔÙ×ÁÅÔÓÑ ÅÓÌÉ hBitmap ÎÅ ÎÏÌØ
  long int State;           // óÏÓÔÏÑÎÉÅ ËÎÏĞËÉ (0 - ÏÔÖÁÔÁ, 1 - ÎÁÖÁÔÁ, -1 - ÎÅ ÍÅÎÑÅÔÓÑ)
  long int Enable;          // äÏÓÔÕĞÎÏÓÔØ ËÎÏĞËÉ (0 - ÎÅÄÏÓÔÕĞÎÁ ÄÌÑ ÎÁÖÁÔÉÑ, 1 - ÍÏÖÅÔ ÎÁÖÉÍÁÔØÓÑ)

  WCHAR    Hint[256];       // ëÏÒÏÔËÁÑ ĞÏÄÓËÁÚËÁ Ë ËÎÏĞËÅ × UNICODE ÉÌÉ 0

  WCHAR    Comment[256];    // äÌÉÎÎÁÑ ĞÏÄÓËÁÚËÁ Ë ËÎÏĞËÅ × UNICODE ÉÌÉ 0
}
  TASKBUTTONINFO;

#ifdef LINUXAPI                   // 07/06/05
typedef struct BUTTONINFOLX // ğÁÒÁÍÅÔÒ hBitmap ÓÔÒÕËÔÕÒÙ BUTTONINFO
{
  HBITMAP  hBitmap;         // éÄÅÎÔÉÆÉËÁÔÏÒ ËÁÒÔÉÎËÉ ÎÁ ËÎÏĞËÅ

  char     Hint[80];        // ğÏÄÓËÁÚËÁ
}
  BUTTONINFOLX;
#endif


typedef struct CONTRINFO  // ğÁÒÁÍÅÔÒ LPARAM ÓÏÏÂİÅÎÉÑ AW_INSERTCONTROL
{
  long int CtrlId;          // éÄÅÎÔÉÆÉËÁÔÏÒ ÓÏÚÄÁ×ÁÅÍÏÇÏ ÜÌÅÍÅÎÔÁ ÕĞÒÁ×ÌÅÎÉÑ,
                            // ÅÓÌÉ CtrlId = (-1) - ×ÓÔÁ×ÌÑÅÔÓÑ ÒÁÚÄÅÌÉÔÅÌØ
  HWND     hWindow;         // éÄÅÎÔÉÆÉËÁÔÏÒ ÏËÎÁ ÜÌÅÍÅÎÔÁ ÕĞÒÁ×ÌÅÎÉÑ

  long int Sibling;         // éÄÅÎÔÉÆÉËÁÔÏÒ ÜÌÅÍÅÎÔÁ ÕĞÒÁ×ÌÅÎÉÑ × ĞÁÎÅÌÉ
                            // ÉÎÓÔÒÕÍÅÎÔÏ×, ĞÏÓÌÅ ËÏÔÏÒÏÇÏ ×ÓÔÁ×ÌÑÅÔÓÑ
                            // ÓÏÚÄÁ×ÁÅÍÙÊ ÜÌÅÍÅÎÔ ÕĞÒÁ×ÌÅÎÉÑ.
                            // åÓÌÉ Sibling = NULL - ÄÏÂÁ×ÌÑÅÔÓÑ × ËÏÎÅÃ
}
  CONTRINFO;

typedef struct HITCONTROLINFO // ğÁÒÁÍÅÔÒ LPARAM ÓÏÂÙÔÉÉ MT_PANELRBUTTONUP
{
  POINT    Position;          // ğÏÌÏÖÅÎÉÅ ËÕÒÓÏÒÁ ÎÁ ÜËÒÁÎÅ

  long int CtrlID;            // éÄÅÎÔÉÆÉËÁÔÏÒ ÜÌÅÍÅÎÔÁ ÕĞÒÁ×ÌÅÎÉÑ ĞÁÎÅÌÉ,
                              // ÎÁÄ ËÏÔÏÒÙÍ ÂÙÌÁ ÎÁÖÁÔÁ ËÌÁ×ÉÛÁ
}
  HITCONTROLINFO;


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++ ÷åäåîéå ğòïôïëïìá ôòáîúáëãéê +++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef enum READLOG   // õóìï÷éñ óşéôù÷áîéñ ôòáîúáëãéê
{
  READ_ANYACTION = 0,  // óşéôáôø ğïóìåäîàà ôòáîúáëãéà
  LOG_ANYACTION  = 0,  // ïâòáâïôáôø ğïóìåäîàà ôòáîúáëãéà
  READ_MYACTION  = 1,  // óşéôáôø ó÷ïà ğïóìåäîàà ôòáîúáëãéà
                       // (ğï éíåîé ğïìøúï÷áôåìñ)
  LOG_MYACTION   = 1,  // ïâòáâïôáôø ó÷ïà ôòáîúáëãéà
}
 READLOG;

// úáòåúåò÷éòï÷áîîùå ôéğù ôòáîúáëãéê
enum ACTION_TYPE
{
  AT_OPEN     = 60000,     // öÕÒÎÁÌ ÏÔËÒÙÔ
  AT_CLOSE    = 60001,     // öÕÒÎÁÌ ÚÁËÒÙÔ
  AT_LOGON    = 60002,     // úÁĞÉÓØ × ÖÕÒÎÁÌ ×ËÌÀŞÅÎÁ
  AT_LOGOFF   = 60003,     // úÁĞÉÓØ × ÖÕÒÎÁÌ ÏÔËÌÀŞÅÎÁ
  AT_CLEAR    = 60004,     // æÁÊÌÙ ÏÔËÁÔÁ ÏŞÉİÅÎÙ (ÓÏÒÔÉÒÏ×ËÁ,...)
  AT_UNDO     = 60005,     // ïÔÍÅÎÁ ËÁËÏÊ-ÌÉÂÏ ĞÒÅÄÙÄÕİÅÊ ÔÒÁÎÚÁËÃÉÉ
  AT_NEXT     = 60006,     // ğÒÏÄÏÌÖÅÎÉÅ ĞÒÅÄÙÄÕİÅÊ ÔÒÁÎÚÁËÃÉÉ
  AT_REDO     = 60007,     // ÷ÏÓÓÔÁÎÏ×ÌÅÎÉÅ ËÁËÏÊ-ÌÉÂÏ ĞÒÅÄÙÄÕİÅÊ ÔÒÁÎÚÁËÃÉÉ
  AT_FIRST    = AT_OPEN,   // ğÅÒ×ÙÊ ÚÁÒÅÚÅÒ×ÉÒÏ×ÁÎÎÙÊ ËÏÄ
  AT_LAST     = AT_REDO,   // ğÏÓÌÅÄÎÉÊ ÚÁÒÅÚÅÒ×ÉÒÏ×ÁÎÎÙÊ ËÏÄ
};

// åÓÌÉ Type == AT_OPEN, ĞÏÓÌÅ ÚÁÇÏÌÏ×ËÁ ÉÄÅÔ
// ÏĞÉÓÁÎÉÅ ÉÓÔÏŞÎÉËÁ ÔÒÁÎÚÁËÃÉÊ, ÓÔÒÏËÁ 16 ÂÁÊÔ
// (ÉÍÑ ËÏÍĞØÀÔÅÒÁ × ÓÅÔÉ).

typedef struct ACTIONHEAD  // úáçïìï÷ïë ïğéóáîéñ ôòáîúáëãéé
{
  short int      Ident;    // 0x7FFF
  unsigned short Task;     // éÄÅÎÔÉÆÉËÁÔÏÒ ÚÁÄÁŞÉ,×ÙĞÏÌÎÉ×ÛÅÊ ÔÒÁÎÚÁËÃÉÀ
  unsigned short Count;    // şÉÓÌÏ ÏĞÅÒÁÃÉÊ (Length = 16+Count*16)
  unsigned short Type;     // ôÉĞ ÔÒÁÎÚÁËÃÉÉ (ËÏÄ ÚÁÄÁŞÉ)
  unsigned int   Date;     // äÁÔÁ ×ÙĞÏÌÎÅÎÉÑ ÔÒÁÎÚÁËÃÉÉ
  unsigned int   Time;     // ÷ÒÅÍÑ ×ÙĞÏÌÎÅÎÉÑ ÔÒÁÎÚÁËÃÉÉ
}
 ACTIONHEAD;

// ôéğù ïğåòáãéê îáä ïâ'åëôïí
enum OBJECT_OPERATION
{
   OO_APPEND    = 1,        // óïúäáîéå ïâ' åëôá
   OO_DELETE    = 2,        // õäáìåîéå ïâ'åëôá
   OO_UPDATE    = 4,        // ïâîï÷ìåîéå ïâ'åëôá
   OO_UNDO      = 8,        // ÷ïóóôáîï÷ìåîéå ïâ'åëôá
};

// íáóëá ïâòáâïôáîîùè üìåíåîôï÷ ïâ'åëôá
enum ACTION_MASK
{
   AM_HEAD      = 1,        // éúíåîåîù óğòá÷ïşîùå äáîîùå
   AM_METRIC    = 2,        // éúíåîåîá íåôòéëá ïâ'åëôá
   AM_SEMANTIC  = 4,        // éúíåîåîá óåíáîôéëá
   AM_DRAW      = 8,        // éúíåîåîï çòáæéşåóëïå ïğéóáîéå
};

typedef struct ACTIONRECORD // ïğéóáîéå ïôäåìøîïê ïğåòáãéé
{                           // (äÌÑ AT_OPEN - ÜÔÏ ÓÔÒÏËÁ 16 ÂÁÊÔ)
  long int      Key;        // õÎÉËÁÌØÎÙÊ ÎÏÍÅÒ ÏÂßÅËÔÁ × ÌÉÓÔÅ
  long int      Number;     // ğÏÓÌÅÄÏ×ÁÔÅÌØÎÙÊ ÎÏÍÅÒ × ÍÏÍÅÎÔ ÏÂÒÁÂÏÔËÉ
  long int      Back;       // îÏÍÅÒ ÚÁĞÉÓÉ × ÆÁÊÌÅ ÏÔËÁÔÁ (ÓÌÕÖÅÂÎÙÊ)
  unsigned char Type;       // ôÉĞ ÏĞÅÒÁÃÉÉ
  unsigned char Mask;       // íÁÓËÁ ÏÂÒÁÂÏÔÁÎÎÙÈ ÜÌÅÍÅÎÔÏ× ÏÂßÅËÔÁ
  short         List;       // îÏÍÅÒ ÌÉÓÔÁ
}
 ACTIONRECORD;


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++ ïğï÷åıåîéå ï éúíåîåîéé ïâ åëôá ëáòôù  ++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#ifdef WIN32API
typedef long int (WINAPI * CHANGECALL)(void * parm, void * value);
#else
typedef long int (*CHANGECALL)(void * parm, void * value);
#endif

typedef struct CHANGEINFO
{
  HSITE    hSite;     // éÄÅÎÔÉÆÉËÁÔÏÒ ËÁÒÔÙ × ÄÏËÕÍÅÎÔÅ
  short int List;     // îÏÍÅÒ ÌÉÓÔÁ ËÁÒÔÙ
  unsigned char Type; // ôÉĞ ÏĞÅÒÁÃÉÉ (OBJECT_OPERATION)
  unsigned char Mask; // íÁÓËÁ ÏÂÒÁÂÏÔÁÎÎÙÈ ÜÌÅÍÅÎÔÏ× ÏÂßÅËÔÁ (ACTION_MASK)
  long  int Key;      // õÎÉËÁÌØÎÙÊ ÎÏÍÅÒ ÏÂßÅËÔÁ × ÌÉÓÔÅ
  long  int Object;   // ğÏÓÌÅÄÏ×ÁÔÅÌØÎÙÊ ÎÏÍÅÒ ÏÂßÅËÔÁ × ÌÉÓÔÅ
}
  CHANGEINFO;


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++ ğïääåòöëá ïôïâòáöáåíùè ÷ ğáíñôø æáêìï÷ +++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct FILEMAPPING  // ğáòáíåôòù ïôïâòáöåîéñ æáêìá ÷ ğáíñôé
{
  FILEMAPPING() { hFile = 0; hMapping = 0; Address = 0; }

  HANDLE   hFile;           // éÄÅÎÔÉÆÉËÁÔÏÒ ÏÔËÒÙÔÏÇÏ ÆÁÊÌÁ
  HANDLE   hMapping;        // éÄÅÎÔÉÆÉËÁÔÏÒ ÏÔÏÂÒÁÖÅÎÉÑ (× UNIX = 0)
  char *   Address;         // áÄÒÅÓ ÏÂÌÁÓÔÉ ĞÁÍÑÔÉ ÄÌÑ ÏÔÏÂÒÁÖÅÎÉÑ ÄÁÎÎÙÈ
  unsigned long int Offset; // óÍÅİÅÎÉÅ × ÆÁÊÌÅ ÎÁ ĞÅÒ×ÙÊ ÂÁÊÔ ÄÁÎÎÙÈ
  unsigned long int Size;   // òÁÚÍÅÒ ÏÔÏÂÒÁÖÁÅÍÏÊ ÏÂÌÁÓÔÉ × ÆÁÊÌÅ
  unsigned long int Shift;  // ğÏĞÒÁ×ËÁ ÎÁ ĞÅÒ×ÙÊ ÂÁÊÔ × ÏÂÌÁÓÔÉ ĞÁÍÑÔÉ
                            // ÄÌÑ ÕŞÅÔÁ ËÒÁÔÎÏÓÔÉ ÒÁÚÍÅÒÕ ÓÔÒÁÎÉÃÙ (64 ëÂ)
}
  FILEMAPPING;

// 20/05/04
// æÌÁÇ ĞÒÏ×ÅÒËÉ ×ÈÏÄÉÍÏÓÔÉ ÏÂßÅËÔÁ, ËÏÔÏÒÙÊ ÒÅÖÕÔ, × ÏÂßÅËÔ - òåúáë
// (ÓÍ. mapCreateObjectsCross(...) × seekapi.h)
#define FLAGINSIDEOBJECTS  32

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++ îáîåóåîéå ïâ åëôá îá ëáòôõ  +++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
typedef struct PUTTOMAPINFO
{
  long int Incode;     // ÷ÎÕÔÒÅÎÎÉÊ ËÏÄ ÏÂßÅËÔÁ
  long int MapNumber;  // îÏÍÅÒ ËÁÒÔÙ
  long int Regime;     // óĞÏÓÏÂ ÎÁÎÅÓÅÎÉÑ ÏÂßÅËÔÁ

}
  PUTTOMAPINFO;

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++ éîæïòíáãéñ ï ôïşëå ğåòåóåşåîéñ ++++++++++++
// +++++++++++++  ïôòåúëá ó íåôòéëïê ğïäïâÿåëôá ++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
typedef struct NUMBERPOINT
{
  DOUBLEPOINT Point;   // ëÏÏÒÄÉÎÁÔÙ ÔÏŞËÉ
  long int Number;     // îÏÍÅÒ ÔÏŞËÉ ÍÅÔÒÉËÉ, ÚÁ ËÏÔÏÒÏÊ ÓÌÅÄÕÅÔ point
  long int Update;     // ğÒÅÄÌÏÖÅÎÉÅ ÚÁÍÅÎÙ ÔÏŞËÉ ÍÅÔÒÉËÉ
  long int Equal;      // îÏÍÅÒ ÔÏŞËÉ ÓÏ×ĞÁÄÅÎÉÑ × ÍÅÔÒÉËÅ
  long int Reserve;
}
  NUMBERPOINT;

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//    ğáòáíåôòù ïâòáâïôëé ëïîôõòï÷ ïâÿåëôï÷, éóğïìøúõåíùå
//        ğòé óïèòáîåîéé ïâÿåëôï÷ ó äåìåîéåí îá ìéóôù
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
typedef struct _DLLCLASS COMMITOBJECTPARM                         // 11/04/11
{
  COMMITOBJECTPARM () { memset(this, 0, sizeof(*this)); }

  double MinCutLength;          // íÉÎÉÍÁÌØÎÁÑ ÄÌÉÎÁ ÏÔÒÅÚËÁ ÍÅÔÒÉËÉ ÏÂßÅËÔÁ
                                // (× ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ)

  // éÓĞÏÌØÚÕÅÔÓÑ ÄÌÑ Á×ÔÏÍÁÔÉŞÅÓËÏÊ ÆÉÌØÔÒÁÃÉÉ ÔÏŞÅË ÍÅÔÒÉËÉ ĞÒÉ ÓÏÈÒÁÎÅÎÉÉ
  // ÌÉÎÅÊÎÙÈ É ĞÌÏİÁÄÎÙÈ ÏÂßÅËÔÏ× Ó ÄÅÌÅÎÉÅÍ ĞÏ ÌÉÓÔÁÍ × ÆÕÎËÃÉÑÈ:
  // mapCommitWithPlace(), mapCommitWithPlaceAsNew().
  // ğÒÉ ÏÂÎÁÒÕÖÅÎÉÉ ÏÔÒÅÚËÁ, ÄÌÉÎÁ ËÏÔÏÒÏÇÏ ÍÅÎÅÅ MinLineLength,
  // ÕÄÁÌÑÅÔÓÑ ÅÇÏ ×ÔÏÒÁÑ ÔÏŞËÁ.

  double MinCutLengthOnBorder;  // íÉÎÉÍÁÌØÎÁÑ ÄÌÉÎÁ ÏÔÒÅÚËÁ ÍÅÔÒÉËÉ ÏÂßÅËÔÁ,
                                // ×ÙÈÏÄÑİÅÇÏ ÎÁ ÒÁÍËÕ (× ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ)

  // éÓĞÏÌØÚÕÅÔÓÑ ÄÌÑ Á×ÔÏÍÁÔÉŞÅÓËÏÇÏ ÕÄÁÌÅÎÉÑ ËÏÒÏÔËÉÈ ÌÉÎÅÊÎÙÈ
  // É ×ÙÒÏÖÄÅÎÎÙÈ ĞÌÏİÁÄÎÙÈ ÏÂßÅËÔÏ×, ÆÏÒÍÉÒÕÅÍÙÈ ĞÒÉ ÏÂÒÅÚËÅ
  // ÏÂßÅËÔÏ× ĞÏ ÒÁÍËÅ × ÆÕÎËÃÉÑÈ:
  // mapCommitWithPlace(), mapCommitWithPlaceAsNew().
  // ğÏÄ ×ÙÒÏÖÄÅÎÎÙÍÉ ĞÌÏİÁÄÎÙÍÉ ÏÂßÅËÔÁÍÉ ĞÏÎÉÍÁÀÔÓÑ ÏÂßÅËÔÙ:
  // 1) ÔÒÅÕÇÏÌØÎÉË, ×ÙÔÑÎÕÔÙÊ ×ÄÏÌØ ÒÁÍËÉ ÌÉÓÔÁ ËÁÒÔÙ,
  //    ÄÌÉÎÁ ÏÄÎÏÊ ÉÚ ÓÔÏÒÏÎ ËÏÔÏÒÏÇÏ ÍÅÎÅÅ MinCutLengthOnBorder;
  // 2) ŞÅÔÙÒÅÈÕÇÏÌØÎÉË, ×ÙÔÑÎÕÔÙÊ ×ÄÏÌØ ÒÁÍËÉ ÌÉÓÔÁ ËÁÒÔÙ,
  //    ÄÌÉÎÙ Ä×ÕÈ ÏÔÒÅÚËÏ× ËÏÔÏÒÏÇÏ ÍÅÎÅÅ MinCutLengthOnBorder.

  char Reserve[48];             // òÅÚÅÒ×
}
  COMMITOBJECTPARM;

// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// æÁÊÌ Ó ÎÁÂÏÒÏÍ ÚÁĞÉÓÅÊ ÆÉËÓÉÒÏ×ÁÎÎÏÊ ÄÌÉÎÙ - 3D-×ÅËÔÏÒÁ
// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct VECDATA     // ÷åëôïò ğòé÷ñúëé 3D-ÍÏÄÅÌÉ
{                          //
  long        Code;        // ëÏÄ ÂÉÂÌÉÏÔÅËÉ (ÄÌÑ ÕÎÉËÁÌØÎÙÈ ÉÚÏÂÒÁÖÅÎÉÊ, ÉÎÁŞÅ 0)
  long        Key;         // ëÌÀŞ ÉÚÏÂÒÁÖÅÎÉÑ (ÄÌÑ ÕÎÉËÁÌØÎÙÈ ÉÚÏÂÒÁÖÅÎÉÊ, ÉÎÁŞÅ 0)
  XYHDOUBLE   Offset;      // óÍÅİÅÎÉÅ ÆÏÒÍÙ ÍÏÄÅÌÉ ÏÔÎÏÓÉÔÅÌØÎÏ ĞÅÒ×ÏÊ ÔÏŞËÉ ÏÂßÅËÔÁ
  double      Angle;       // õÇÏÌ ĞÏ×ÏÒÏÔÁ ÏÓÉ X ÍÏÄÅÌÉ ÏÔÎÏÓÉÔÅÌØÎÏ ÏÓÉ X ËÁÒÔÙ
}
  VECDATA;

typedef struct VECRECORD   // úÁĞÉÓØ ×ÅËÔÏÒÁ ĞÒÉ×ÑÚËÉ (ÚÁĞÉÓØ ÆÁÊÌÁ VEC)
{                          //
  long        Number;      // îÏÍÅÒ ÏÂßÅËÔÁ
  long        BaseKey;     // ëÌÀŞ ÏÂßÅËÔÁ
  VECDATA     Data;        // ÷ÅËÔÏÒ ĞÒÉ×ÑÚËÉ
}
  VECRECORD;

// ğÅÒ×ÁÑ ÔÏŞËÁ ×ÅËÔÏÒÁ ÎÁ ÏÂßÅËÔÅ ×ÙŞÉÔÁÅÍ ÉÚ ÎÅÅ ËÏÏÒÄÉÎÁÔÙ ĞÅÒ×ÏÊ ÔÏŞËÉ ÏÂßÅËÔÁ.
// éÚ ĞÏÌÕŞÅÎÎÏÇÏ ×ÙŞÉÔÁÅÍ ËÏÏÒÄÉÎÁÔÙ ĞÅÒ×ÏÊ ÔÏŞËÉ ×ÅËÔÏÒÁ ÍÏÄÅÌÉ. ğÏÌÕŞÅÎÎÏÅ ÚÎÁŞÅÎÉÅ = Offset.
// Angle - õÇÏÌ ĞÏ×ÏÒÏÔÁ ÏÓÉ X ÍÏÄÅÌÉ ÏÔÎÏÓÉÔÅÌØÎÏ ÏÓÉ X ËÁÒÔÙ.

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++ ğÁÒÁÍÅÔÒÙ ëáìøëõìñôïòá ++++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// 29/12/07
typedef struct SAVEMAPCOMPPARM
{
 char Titlsave[40];          // îÁÚ×ÁÎÉÅ ÒÅÖÉÍÁ
 double MemoryRegister;      // òÅÇÉÓÔÒ
 double MemoryBuffer;        // âÕÆÅÒ ĞÁÍÑÔÉ
 double Buffer;              // âÕÆÅÒ ×ÙŞÉÓÌÅÎÎÙÊ
 double Memory;              // ğÁÍÑÔØ
 double Value;               // ğÅÒÅÄÁ×ÁÅÍÏÅ ÚÎÁŞÅÎÉÅ
 long int Flagcomp;          // ğÒÉÚÎÁË ÄÅÊÓÔ×ÉÑ 1-(+),2-(-),3-(*),4-(/),
                             //                  0 - ÄÅÊÓÔ×ÉÑ ÎÅ ÂÙÌÏ
 long int Index;             // éÎÄÅËÓ ÄÌÑ ÅÄÉÎÉÃ ÉÚÍÅÒÅÎÉÑ ÄÌÉÎÙ
 long int Indexold;          // ğÒÅÄÙÄÕİÉÊ ÉÎÄÅËÓ
 long int IndexSq;           // éÎÄÅËÓ ÄÌÑ ÅÄÉÎÉÃ ÉÚÍÅÒÅÎÉÑ ĞÌÏİÁÄÉ
 long int Flagshow;          // ÷ÉÄÉÍÏÓÔØ ÄÉÁÌÏÇÁ
 long int Regnow;            // ğÅÒÅÄÁ×ÁÅÍÙÊ ÒÅÖÉÍ
 long int Regold;            // òÅÖÉÍ ĞÒÅÄÙÄÕİÉÊ-ÌÉÎ. ÉÌÉ ĞÌÏİ.
 long int Flagreg;           // ôÅËÕİÉÊ ÒÅÖÉÍ: 0- ÄÌÉÎÁ, 1- ĞÌÏİÁÄØ
 long int StopFlag;          // æÌÁÇ ÚÁËÒÙÔÉÑ ÄÉÁÌÏÇÁ
 long int Precision;         // ôÏŞÎÏÓÔØ ×ÙŞÉÓÌÅÎÉÊ

} SAVEMAPCOMPPARM;


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// // ğÁÒÁÍÅÔÒÙ ÒÅÄÁËÔÏÒÁ
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// 31/01/08

typedef struct MEDPROPERTY
{
 double FindRadius;             // òÁÄÉÕÓ ĞÏÉÓËÁ
 double Step;                   // ûÁÇ ÃÉÆÒÏ×ÁÎÉÑ
 double Filter;                 // ğÏÒÏÇ ÆÉÌØÔÒÁÃÉÉ
 double ZoneWide;               // ûÉÒÉÎÁ ÚÏÎÙ
 double AdjustValue;            // ğÏÒÏÇ ÓÏÇÌÁÓÏ×ÁÎÉÑ
 double SplineValue;            // ğÏÒÏÇ ÓÇÌÁÖÉ×ÁÎÉÑ
 double TakeRadius;             // òÁÄÉÕÓ ÚÁÈ×ÁÔÁ ÔÏŞÅË É ÌÉÎÉÊ //23/03/06

 long int IsSetup;              // ĞÁÒÁÍÅÔÒÙ ÓÅÁÎÓÁ ÚÁĞÏÌÎÅÎÙ ?
 long int IsDevide;             // òÁÚÒÅÚÁÔØ ĞÏ ÒÁÍËÁÍ   ?
 long int IsFrameCut;           // ïÂÒÅÚÁÔØ ĞÏ ÒÁÍËÅ   ?
 long int IsEditFrame;          // òÅÄÁËÔÉÒÏ×ÁÔØ ÒÁÍËÕ ?

 long int IsSemantic;           // úÁĞÒÁÛÉ×ÁÔØ ÓÅÍÁÎÔÉËÕ ?
 long int IsClearSelect;        // óÂÒÁÓÙ×ÁÔØ ×ÙÄÅÌÅÎÉÅ ?
 long int Is3dData;             // ôÒÅÈÍÅÒÎÁÑ ÍÅÔÒÉËÁ ?
 long int IsCursor;             // ó×ÏÉ ËÕÒÓÏÒÙ ?

 long int IsNext;               // éÓËÁÔØ ĞÒÏÄÏÌÖÅÎÉÅ?
 long int IsSeek;               // éÓËÁÔØ ĞÅÒÅÓÅŞÅÎÉÅ?
 long int IsCross;              // óÔÁ×ÉÔØ ÔÏŞËÉ ĞÅÒÅÓÅŞÅÎÉÑ?
 long int FilterType;           // ôÉĞ ÆÉÌØÔÒÁÃÉÉ

 long int IsGroup;              // ïÂÒÁÂÁÔÙ×ÁÔØ ÇÒÕĞĞÙ?
 long int FindSector;           // óÅËÔÏÒ ĞÏÉÓËÁ
 long int Spy;                  // óÌÅÄÉÔØ ÚÁ ×ÅËÔÏÒÉÚÁÔÏÒÏÍ?
 long int Speed;                // óËÏÒÏÓÔØ ×ÅËÔÏÒÉÚÁÃÉÉ (%)

 long int ViewSemanticCode;     // ğÒÏÓÍÁÔÒÉ×ÁÅÍÁÑ ÓÅÍÁÎÔÉËÁ
 long int IsStatistic;          // ğÏËÁÚÙ×ÁÔØ ÓÔÁÔÉÓÔÉËÕ
 long int PointInSpline;        // ôÏŞÅË × ÓĞÌÁÊÎÅ
 long int AutoCode;             // ëÏÄ ÌÉÎÉÉ ÏÆÏÒÍÌÅÎÉÑ Á×ÔÏÆÉÇÕÒ

 long int IsTrace;              // ôÒÁÓÓÉÒÏ×ËÁ
 long int IsPanel;              // ÷ÓĞÏÍÏÇÁÔÅÌØÎÙÅ ĞÁÎÅÌÉ  // 03/10/06

 long int MapSplineType;        // ôÉĞ ÓĞÌÁÊÎÁ ÄÌÑ MAP   //11/08/03
 long int SitSplineType;        // ôÉĞ ÓĞÌÁÊÎÁ ÄÌÑ SIT   //11/08/03

 long int Modelcount;           // ëÏÌÉŞÅÓÔ×Ï ÍÁËÅÔÏ×    //03/12/04
 long int MeasureUnit;          // åÄÉÎÉÃÁ ÉÚÍÅÒÅÎÉÑ     // 29/09/05

 long int BigButton;            // òÁÚÍÅÒ ËÎÏĞÏË         //17/01/08
 long int IsDateTime;           // ğÉÓÁÔØ ×ÒÅÍÑ É ÄÁÔÕ ÓÏÚÄÁÎÉÑ/ÒÅÄÁËÔÉÒÏ×ÁÎÉÑ //21/09/2009

// ğÁÒÁÍÅÔÒÙ ÎÁÓÙĞÉ

 double   Exc_Step;             // òÁÓÓÔÏÑÎÉÅ ÍÅÖÄÕ ÛÔÒÉÈÁÍÉ (ÍÍ)
 double   Exc_Lenght;           // äÌÉÎÁ ËÏÒ. ÛÔÒ. × (ÍÍ)
 double   Exc_MaxWidth;         // íÁËÓ. ÛÉÒÉÎÁ ÄÌÑ ÆÉËÓ.ÒÁÚÍÅÒÁ × (ÍÍ)

 long int Exc_Proport;          // õÓÔÁÎÏ×ÉÔØ ĞÒÏĞÏÒÃÉÏÎÁÌØÎÕÀ ÄÌÉÎÕ?
 long int Exc_Numerator;        // şÉÓÌÉÔÅÌØ ĞÒÏĞÏÒÃÉÉ                     //06/05/11
 long int Exc_Denominator;      // úÎÁÍÅÎÁÔÅÌØ ĞÒÏĞÏÒÃÉÉ
 long int Exc_Pitching;         // õËÒÅĞÌÅÎÎÙÅ?


 long int MoveMaxCount;         // ëÏÌÉŞÅÓÔ×Ï ĞÅÒÅÒÉÓÏ×Ù×ÁÅÍÙÈ ĞÒÉ ĞÅÒÅÍÅİÅÎÉÉ
 long int MoveViewType;         // 0 - ×ÓÅ, 1- ĞÅÒ×ÙÅ, 2 - ÓÌÕŞÁÊÎÏ


} MEDPROPERTY;


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// // ğÁÒÁÍÅÔÒÙ ÚÁÇÒÕÚËÉ Ole-ÏÂßÅËÔÁ
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// 29/06/10

typedef struct OLELOADPARM
{
 double   PosX;                 // ËÏÏÒÄÉÎÁÔÁ x × ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ
 double   PosY;                 // ËÏÏÒÄÉÎÁÔÁ y × ÍÅÔÒÁÈ ÎÁ ÍÅÓÔÎÏÓÔÉ 

 long int Height;               // ×ÙÓÏÔÁ Ole-ÏÂßÅËÔÁ × ÍÍ ÎÁ ËÁÒÔÅ × ÅÄÉÎÉŞÎÏÍ ÍÁÓÛÔÁÂÅ
 long int Width;                // ÛÉÒÉÎÁ Ole-ÏÂßÅËÔÁ × ÍÍ ÎÁ ËÁÒÔÅ × ÅÄÉÎÉŞÎÏÍ ÍÁÓÛÔÁÂÅ

 char     PosRight;             // 0 - ÌÅ×ÙÊ ÕÇÏÌ, 1 - ĞÒÁ×ÙÊ ÕÇÏÌ
 char     PosBottom;            // 0 - ×ÅÒÈÎÉÊ ÕÇÏÌ, 1 - ÎÉÖÎÉÊ ÕÇÏÌ
 char     Reserve[50];          // ×ÙÒÁ×ÎÉ×ÁÎÉÅ ÎÁ 8

 char     Path[260];            // ĞÏÌÎÙÊ ĞÕÔØ Ë ÄÁÎÎÙÍ

} OLELOADPARM;

// ÷ÅÇÅÔÁÃÉÏÎÎÙÅ ÉÎÄÅËÓÙ  // 31/08/11
#define	VIFIRST 1
#define	NDVI    1
#define	RVI     2
#define	IPVI    3
#define	DVI     4
#define	SAVI    5
#define	MSAVI2  6
#define	VILAST  6

// äÁÎÎÙÅ, ÎÅÏÂÈÏÄÉÍÙÅ ÄÌÑ ÏÔÏÂÒÁÖÅÎÉÑ ×ÅÇÅÔÁÃÉÏÎÎÏÇÏ ÉÎÄÅËÓÁ // 31/08/11
typedef struct VEGINDEX
{
   int      Index;         // ÉÓĞÏÌØÚÕÅÍÙÊ ÉÎÄÅËÓ ×ÅÇÅÔÁÃÉÉ (NDVI, RVI É Ô.Ä.)
   int      ColorCount;    // ËÏÌÉŞÅÓÔ×Ï Ã×ÅÔÏ× × ĞÁÌÉÔÒÅ ÏÔÒÉÓÏ×ËÉ ×ÅÇÅÔÁÃÉÏÎÎÏÇÏ ÉÎÄÅËÓÁ
   RGBQUAD  Palette[256];  // ĞÁÌÉÔÒÁ ÏÔÒÉÓÏ×ËÉ ×ÅÇÅÔÁÃÉÏÎÎÏÇÏ ÉÎÄÅËÓÁ
   int      RedBandNum;    // ÎÏÍÅÒ ËÒÁÓÎÏÇÏ ËÁÎÁÌÁ
   int      NirBandNum;    // ÎÏÍÅÒ ÉÎÆÒÁËÒÁÓÎÏÇÏ ËÁÎÁÌÁ
   double   L;             // ËÏÜÆÆÉÃÉÅÎÔ ÄÌÑ SAVI (0..1)
   double   Reserv[32];
}
  VEGINDEX;

#if defined(LINUXAPI) && defined(BUILD_DLL64)           // 26/03/12
#pragma pack(pop)
#endif

#endif  // MAPTYPE_H

